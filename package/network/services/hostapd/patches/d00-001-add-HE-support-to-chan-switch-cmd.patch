--- a/hostapd/ctrl_iface.c
+++ b/hostapd/ctrl_iface.c
@@ -2353,9 +2353,9 @@ static int hostapd_ctrl_iface_chan_switc
 
 	for (i = 0; i < iface->num_bss; i++) {
 
-		/* Save CHAN_SWITCH VHT config */
-		hostapd_chan_switch_vht_config(
-			iface->bss[i], settings.freq_params.vht_enabled);
+		/* Save CHAN_SWITCH VHT and HE config */
+		hostapd_chan_switch_config(
+			iface->bss[i], &settings.freq_params);
 
 		ret = hostapd_switch_channel(iface->bss[i], &settings);
 		if (ret) {
--- a/src/ap/ap_config.h
+++ b/src/ap/ap_config.h
@@ -1005,6 +1005,13 @@ struct hostapd_config {
 	u8 he_oper_centr_freq_seg1_idx;
 #endif /* CONFIG_IEEE80211AX */
 
+#ifdef CONFIG_IEEE80211AX
+        /* HE enable/disable config from CHAN_SWITCH */
+#define CH_SWITCH_HE_ENABLED BIT(0)
+#define CH_SWITCH_HE_DISABLED BIT(1)
+        unsigned int ch_switch_he_config;
+#endif /* CONFIG_IEEE80211AX */
+
 	/* VHT enable/disable config from CHAN_SWITCH */
 #define CH_SWITCH_VHT_ENABLED BIT(0)
 #define CH_SWITCH_VHT_DISABLED BIT(1)
--- a/src/ap/ctrl_iface_ap.c
+++ b/src/ap/ctrl_iface_ap.c
@@ -1061,6 +1061,7 @@ int hostapd_parse_csa_settings(const cha
 	SET_CSA_SETTING(sec_channel_offset);
 	settings->freq_params.ht_enabled = !!os_strstr(pos, " ht");
 	settings->freq_params.vht_enabled = !!os_strstr(pos, " vht");
+	settings->freq_params.he_enabled = !!os_strstr(pos, " he");
 	settings->block_tx = !!os_strstr(pos, " blocktx");
 #undef SET_CSA_SETTING
 
--- a/src/ap/hostapd.c
+++ b/src/ap/hostapd.c
@@ -3433,15 +3433,22 @@ void hostapd_cleanup_cs_params(struct ho
 }
 
 
-void hostapd_chan_switch_vht_config(struct hostapd_data *hapd, int vht_enabled)
+void hostapd_chan_switch_config(struct hostapd_data *hapd, struct hostapd_freq_params *freq_params)
 {
-	if (vht_enabled)
+	if (freq_params->he_enabled)
+		hapd->iconf->ch_switch_he_config |= CH_SWITCH_HE_ENABLED;
+	else
+		hapd->iconf->ch_switch_he_config |= CH_SWITCH_HE_DISABLED;
+
+	if (freq_params->vht_enabled)
 		hapd->iconf->ch_switch_vht_config |= CH_SWITCH_VHT_ENABLED;
 	else
 		hapd->iconf->ch_switch_vht_config |= CH_SWITCH_VHT_DISABLED;
 
 	hostapd_logger(hapd, NULL, HOSTAPD_MODULE_IEEE80211,
-		       HOSTAPD_LEVEL_INFO, "CHAN_SWITCH VHT CONFIG 0x%x",
+		       HOSTAPD_LEVEL_INFO, "CHAN_SWITCH HE CONFIG 0x%x "
+					   "CHAN_SWITCH VHT CONFIG 0x%x",
+		       hapd->iconf->ch_switch_he_config,
 		       hapd->iconf->ch_switch_vht_config);
 }
 
--- a/src/common/ieee802_11_common.c
+++ b/src/common/ieee802_11_common.c
@@ -717,16 +717,16 @@ enum hostapd_hw_mode ieee80211_freq_to_c
 
 /**
  * ieee80211_freq_to_channel_ext - Convert frequency into channel info
- * for HT40 and VHT. DFS channels are not covered.
+ * for HT40, VHT and HE. DFS channels are not covered.
  * @freq: Frequency (MHz) to convert
  * @sec_channel: 0 = non-HT40, 1 = sec. channel above, -1 = sec. channel below
- * @vht: VHT channel width (CHANWIDTH_*)
+ * @chan_width: VHT or HE channel width (CHANWIDTH_*)
  * @op_class: Buffer for returning operating class
  * @channel: Buffer for returning channel number
  * Returns: hw_mode on success, NUM_HOSTAPD_MODES on failure
  */
 enum hostapd_hw_mode ieee80211_freq_to_channel_ext(unsigned int freq,
-						   int sec_channel, int vht,
+						   int sec_channel, int chan_width,
 						   u8 *op_class, u8 *channel)
 {
 	u8 vht_opclass;
@@ -740,7 +740,7 @@ enum hostapd_hw_mode ieee80211_freq_to_c
 		if ((freq - 2407) % 5)
 			return NUM_HOSTAPD_MODES;
 
-		if (vht)
+		if (chan_width)
 			return NUM_HOSTAPD_MODES;
 
 		/* 2.407 GHz, channels 1..13 */
@@ -757,7 +757,7 @@ enum hostapd_hw_mode ieee80211_freq_to_c
 	}
 
 	if (freq == 2484) {
-		if (sec_channel || vht)
+		if (sec_channel || chan_width)
 			return NUM_HOSTAPD_MODES;
 
 		*op_class = 82; /* channel 14 */
@@ -774,7 +774,7 @@ enum hostapd_hw_mode ieee80211_freq_to_c
 		return HOSTAPD_MODE_IEEE80211A;
 	}
 
-	switch (vht) {
+	switch (chan_width) {
 	case CHANWIDTH_80MHZ:
 		vht_opclass = 128;
 		break;
@@ -877,7 +877,7 @@ enum hostapd_hw_mode ieee80211_freq_to_c
 
 	/* 56.16 GHz, channel 1..6 */
 	if (freq >= 56160 + 2160 * 1 && freq <= 56160 + 2160 * 6) {
-		if (sec_channel || vht)
+		if (sec_channel || chan_width)
 			return NUM_HOSTAPD_MODES;
 
 		*channel = (freq - 56160) / 2160;
--- a/src/common/ieee802_11_common.h
+++ b/src/common/ieee802_11_common.h
@@ -175,7 +175,7 @@ int hostapd_config_wmm_ac(struct hostapd
 enum hostapd_hw_mode ieee80211_freq_to_chan(int freq, u8 *channel);
 int ieee80211_chan_to_freq(const char *country, u8 op_class, u8 chan);
 enum hostapd_hw_mode ieee80211_freq_to_channel_ext(unsigned int freq,
-						   int sec_channel, int vht,
+						   int sec_channel, int chan_width,
 						   u8 *op_class, u8 *channel);
 int ieee80211_chaninfo_to_channel(unsigned int freq, enum chan_width chanwidth,
 				  int sec_channel, u8 *op_class, u8 *channel);
--- a/src/common/ieee802_11_defs.h
+++ b/src/common/ieee802_11_defs.h
@@ -1285,7 +1285,7 @@ struct ieee80211_ampe_ie {
 
 #define VHT_RX_NSS_MAX_STREAMS			    8
 
-/* VHT channel widths */
+/* HE and VHT channel widths */
 #define CHANWIDTH_USE_HT	0
 #define CHANWIDTH_80MHZ		1
 #define CHANWIDTH_160MHZ	2
--- a/src/ap/drv_callbacks.c
+++ b/src/ap/drv_callbacks.c
@@ -818,9 +818,10 @@ void hostapd_event_ch_switch(struct host
 
 	hostapd_logger(hapd, NULL, HOSTAPD_MODULE_IEEE80211,
 		       HOSTAPD_LEVEL_INFO,
-		       "driver %s channel switch: freq=%d, ht=%d, vht_ch=0x%x, offset=%d, width=%d (%s), cf1=%d, cf2=%d",
+		       "driver %s channel switch: freq=%d, ht=%d, vht_ch=0x%x, he_ch=0x%x, offset=%d, width=%d (%s), cf1=%d, cf2=%d",
 		       finished ? "had" : "starting",
-		       freq, ht, hapd->iconf->ch_switch_vht_config, offset,
+		       freq, ht, hapd->iconf->ch_switch_vht_config,
+		       hapd->iconf->ch_switch_he_config, offset,
 		       width, channel_width_to_string(width), cf1, cf2);
 
 	if (!hapd->iface->current_mode) {
@@ -875,16 +876,30 @@ void hostapd_event_ch_switch(struct host
 	hapd->iconf->ieee80211n = ht;
 	if (!ht) {
 		hapd->iconf->ieee80211ac = 0;
-	} else if (hapd->iconf->ch_switch_vht_config) {
-		/* CHAN_SWITCH VHT config */
-		if (hapd->iconf->ch_switch_vht_config &
-		    CH_SWITCH_VHT_ENABLED)
-			hapd->iconf->ieee80211ac = 1;
-		else if (hapd->iconf->ch_switch_vht_config &
-			 CH_SWITCH_VHT_DISABLED)
-			hapd->iconf->ieee80211ac = 0;
+		hapd->iconf->ieee80211ax = 0;
+	} else {
+		if (hapd->iconf->ch_switch_vht_config) {
+			/* CHAN_SWITCH VHT config */
+			if (hapd->iconf->ch_switch_vht_config &
+			    CH_SWITCH_VHT_ENABLED)
+				hapd->iconf->ieee80211ac = 1;
+			else if (hapd->iconf->ch_switch_vht_config &
+				 CH_SWITCH_VHT_DISABLED)
+				hapd->iconf->ieee80211ac = 0;
+		}
+		if (hapd->iconf->ch_switch_he_config) {
+			/* CHAN_SWITCH HE config */
+			if (hapd->iconf->ch_switch_he_config &
+			    CH_SWITCH_HE_ENABLED){
+				hapd->iconf->ieee80211ax = 1;
+				hapd->iconf->ieee80211ac = 1;
+			} else if (hapd->iconf->ch_switch_he_config &
+				   CH_SWITCH_HE_DISABLED)
+				hapd->iconf->ieee80211ax = 0;
+		}
 	}
 	hapd->iconf->ch_switch_vht_config = 0;
+	hapd->iconf->ch_switch_he_config = 0;
 
 	hapd->iconf->secondary_channel = offset;
 	hostapd_set_oper_chwidth(hapd->iconf, chwidth);
--- a/src/ap/hostapd.h
+++ b/src/ap/hostapd.h
@@ -601,7 +601,7 @@ void hostapd_channel_list_updated(struct
 void hostapd_set_state(struct hostapd_iface *iface, enum hostapd_iface_state s);
 const char * hostapd_state_text(enum hostapd_iface_state s);
 int hostapd_csa_in_progress(struct hostapd_iface *iface);
-void hostapd_chan_switch_vht_config(struct hostapd_data *hapd, int vht_enabled);
+void hostapd_chan_switch_config(struct hostapd_data *hapd, struct hostapd_freq_params *freq_params);
 int hostapd_switch_channel(struct hostapd_data *hapd,
 			   struct csa_settings *settings);
 void
--- a/src/ap/ieee802_11_vht.c
+++ b/src/ap/ieee802_11_vht.c
@@ -166,60 +166,6 @@ static int check_valid_vht_mcs(struct ho
 	return 0;
 }
 
-
-u8 * hostapd_eid_wb_chsw_wrapper(struct hostapd_data *hapd, u8 *eid)
-{
-	u8 bw, chan1, chan2 = 0;
-	int freq1;
-
-	if (!hapd->cs_freq_params.channel ||
-	    !hapd->cs_freq_params.vht_enabled)
-		return eid;
-
-	/* bandwidth: 0: 40, 1: 80, 2: 160, 3: 80+80 */
-	switch (hapd->cs_freq_params.bandwidth) {
-	case 40:
-		bw = 0;
-		break;
-	case 80:
-		/* check if it's 80+80 */
-		if (!hapd->cs_freq_params.center_freq2)
-			bw = 1;
-		else
-			bw = 3;
-		break;
-	case 160:
-		bw = 2;
-		break;
-	default:
-		/* not valid VHT bandwidth or not in CSA */
-		return eid;
-	}
-
-	freq1 = hapd->cs_freq_params.center_freq1 ?
-		hapd->cs_freq_params.center_freq1 :
-		hapd->cs_freq_params.freq;
-	if (ieee80211_freq_to_chan(freq1, &chan1) !=
-	    HOSTAPD_MODE_IEEE80211A)
-		return eid;
-
-	if (hapd->cs_freq_params.center_freq2 &&
-	    ieee80211_freq_to_chan(hapd->cs_freq_params.center_freq2,
-				   &chan2) != HOSTAPD_MODE_IEEE80211A)
-		return eid;
-
-	*eid++ = WLAN_EID_VHT_CHANNEL_SWITCH_WRAPPER;
-	*eid++ = 5; /* Length of Channel Switch Wrapper */
-	*eid++ = WLAN_EID_VHT_WIDE_BW_CHSWITCH;
-	*eid++ = 3; /* Length of Wide Bandwidth Channel Switch element */
-	*eid++ = bw; /* New Channel Width */
-	*eid++ = chan1; /* New Channel Center Frequency Segment 0 */
-	*eid++ = chan2; /* New Channel Center Frequency Segment 1 */
-
-	return eid;
-}
-
-
 u8 * hostapd_eid_txpower_envelope(struct hostapd_data *hapd, u8 *eid)
 {
 	struct hostapd_iface *iface = hapd->iface;
--- a/src/ap/ieee802_11.c
+++ b/src/ap/ieee802_11.c
@@ -5432,5 +5432,58 @@ void ieee802_11_rx_from_unknown(struct h
 			WLAN_REASON_CLASS3_FRAME_FROM_NONASSOC_STA);
 }
 
+u8 * hostapd_eid_wb_chsw_wrapper(struct hostapd_data *hapd, u8 *eid)
+{
+        u8 bw, chan1, chan2 = 0;
+        int freq1;
+
+        if (!hapd->cs_freq_params.channel ||
+            (!hapd->cs_freq_params.vht_enabled &&
+            !hapd->cs_freq_params.he_enabled))
+                return eid;
+
+        /* bandwidth: 0: 40, 1: 80, 2: 160, 3: 80+80 */
+        switch (hapd->cs_freq_params.bandwidth) {
+        case 40:
+                bw = 0;
+                break;
+        case 80:
+                /* check if it's 80+80 */
+                if (!hapd->cs_freq_params.center_freq2)
+                        bw = 1;
+                else
+                        bw = 3;
+                break;
+        case 160:
+                bw = 2;
+                break;
+        default:
+                /* not valid VHT bandwidth or not in CSA */
+                return eid;
+        }
+
+        freq1 = hapd->cs_freq_params.center_freq1 ?
+                hapd->cs_freq_params.center_freq1 :
+                hapd->cs_freq_params.freq;
+        if (ieee80211_freq_to_chan(freq1, &chan1) !=
+            HOSTAPD_MODE_IEEE80211A)
+                return eid;
+
+        if (hapd->cs_freq_params.center_freq2 &&
+            ieee80211_freq_to_chan(hapd->cs_freq_params.center_freq2,
+                                   &chan2) != HOSTAPD_MODE_IEEE80211A)
+                return eid;
+
+        *eid++ = WLAN_EID_VHT_CHANNEL_SWITCH_WRAPPER;
+        *eid++ = 5; /* Length of Channel Switch Wrapper */
+        *eid++ = WLAN_EID_VHT_WIDE_BW_CHSWITCH;
+        *eid++ = 3; /* Length of Wide Bandwidth Channel Switch element */
+        *eid++ = bw; /* New Channel Width */
+        *eid++ = chan1; /* New Channel Center Frequency Segment 0 */
+        *eid++ = chan2; /* New Channel Center Frequency Segment 1 */
+
+        return eid;
+}
+
 
 #endif /* CONFIG_NATIVE_WINDOWS */
--- a/src/ap/beacon.c
+++ b/src/ap/beacon.c
@@ -504,7 +504,6 @@ static u8 * hostapd_gen_probe_resp(struc
 		pos = hostapd_eid_vht_capabilities(hapd, pos, 0);
 		pos = hostapd_eid_vht_operation(hapd, pos);
 		pos = hostapd_eid_txpower_envelope(hapd, pos);
-		pos = hostapd_eid_wb_chsw_wrapper(hapd, pos);
 	}
 #endif /* CONFIG_IEEE80211AC */
 
@@ -519,6 +518,10 @@ static u8 * hostapd_gen_probe_resp(struc
 	}
 #endif /* CONFIG_IEEE80211AX */
 
+	if ((hapd->iconf->ieee80211ac && !hapd->conf->disable_11ac) ||
+	     hapd->iconf->ieee80211ax)
+		pos = hostapd_eid_wb_chsw_wrapper(hapd, pos);
+
 #ifdef CONFIG_IEEE80211AC
 	if (hapd->conf->vendor_vht)
 		pos = hostapd_eid_vendor_vht(hapd, pos);
@@ -1233,7 +1236,6 @@ int ieee802_11_build_ap_params(struct ho
 		tailpos = hostapd_eid_vht_capabilities(hapd, tailpos, 0);
 		tailpos = hostapd_eid_vht_operation(hapd, tailpos);
 		tailpos = hostapd_eid_txpower_envelope(hapd, tailpos);
-		tailpos = hostapd_eid_wb_chsw_wrapper(hapd, tailpos);
 	}
 #endif /* CONFIG_IEEE80211AC */
 
@@ -1249,6 +1251,10 @@ int ieee802_11_build_ap_params(struct ho
 	}
 #endif /* CONFIG_IEEE80211AX */
 
+	if ((hapd->iconf->ieee80211ac && !hapd->conf->disable_11ac) ||
+	     hapd->iconf->ieee80211ax)
+		tailpos = hostapd_eid_wb_chsw_wrapper(hapd, tailpos);
+
 #ifdef CONFIG_IEEE80211AC
 	if (hapd->conf->vendor_vht)
 		tailpos = hostapd_eid_vendor_vht(hapd, tailpos);
--- a/src/drivers/driver_nl80211.c
+++ b/src/drivers/driver_nl80211.c
@@ -4445,7 +4445,7 @@ static int nl80211_put_freq_params(struc
 		     nla_put_u32(msg, NL80211_ATTR_CENTER_FREQ2,
 				 freq->center_freq2)))
 			return -ENOBUFS;
-	} else if (freq->ht_enabled) {
+	} else if (freq->ht_enabled || (freq->he_enabled && is_24ghz)) {
 		enum nl80211_channel_type ct;
 
 		wpa_printf(MSG_DEBUG, "  * sec_channel_offset=%d",
