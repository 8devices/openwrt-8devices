From a4b946567502dcb22084158bfa25d88b29a9c6db Mon Sep 17 00:00:00 2001
From: Anilkumar Kolli <akolli@codeaurora.org>
Date: Mon, 13 Jul 2020 22:40:48 +0530
Subject: [PATCH] ath11k: use MHI config from static structures

Use upstream MHI APIs for ath11k.

Signed-off-by: Anilkumar Kolli <akolli@codeaurora.org>
---
 drivers/net/wireless/ath/ath11k/mhi.c | 117 +++++++++++++++++-----------------
 1 file changed, 60 insertions(+), 57 deletions(-)

diff --git a/drivers/net/wireless/ath/ath11k/mhi.c b/drivers/net/wireless/ath/ath11k/mhi.c
index 58f33aed2e4e..e8df80ab4321 100644
--- a/drivers/net/wireless/ath/ath11k/mhi.c
+++ b/drivers/net/wireless/ath/ath11k/mhi.c
@@ -7,21 +7,18 @@
 
 #include "debug.h"
 #include "mhi.h"
-#include "core.h"
 
 #define MHI_TIMEOUT_DEFAULT_MS	90000
 
-#ifdef UPSTREAM_MHI
 static struct mhi_channel_config ath11k_mhi_channels[] = {
 	{
 		.num = 0,
 		.name = "LOOPBACK",
 		.num_elements = 32,
-		.event_ring = 0,
+		.event_ring = 1,
 		.dir = DMA_TO_DEVICE,
-		.ee_mask = 0x4,
+		.ee_mask = 0x14,
 		.pollcfg = 0,
-		.data_type = MHI_BUF_RAW,
 		.doorbell = MHI_DB_BRST_DISABLE,
 		.lpm_notify = false,
 		.offload_channel = false,
@@ -33,11 +30,10 @@ static struct mhi_channel_config ath11k_mhi_channels[] = {
 		.num = 1,
 		.name = "LOOPBACK",
 		.num_elements = 32,
-		.event_ring = 0,
+		.event_ring = 1,
 		.dir = DMA_FROM_DEVICE,
-		.ee_mask = 0x4,
+		.ee_mask = 0x14,
 		.pollcfg = 0,
-		.data_type = MHI_BUF_RAW,
 		.doorbell = MHI_DB_BRST_DISABLE,
 		.lpm_notify = false,
 		.offload_channel = false,
@@ -51,9 +47,8 @@ static struct mhi_channel_config ath11k_mhi_channels[] = {
 		.num_elements = 64,
 		.event_ring = 1,
 		.dir = DMA_TO_DEVICE,
-		.ee_mask = 0x4,
+		.ee_mask = 0x14,
 		.pollcfg = 0,
-		.data_type = MHI_BUF_SKB,
 		.doorbell = MHI_DB_BRST_DISABLE,
 		.lpm_notify = false,
 		.offload_channel = false,
@@ -64,12 +59,11 @@ static struct mhi_channel_config ath11k_mhi_channels[] = {
 	{
 		.num = 21,
 		.name = "IPCR",
-		.num_elements = 64,
+		.num_elements = 32,
 		.event_ring = 1,
 		.dir = DMA_FROM_DEVICE,
-		.ee_mask = 0x4,
+		.ee_mask = 0x14,
 		.pollcfg = 0,
-		.data_type = MHI_BUF_RAW,
 		.doorbell = MHI_DB_BRST_DISABLE,
 		.lpm_notify = false,
 		.offload_channel = false,
@@ -82,7 +76,7 @@ static struct mhi_channel_config ath11k_mhi_channels[] = {
 static struct mhi_event_config ath11k_mhi_events[] = {
 	{
 		.num_elements = 32,
-		.irq_moderation_ms = 0,
+		.irq_moderation_ms = 1,
 		.irq = 1,
 		.mode = MHI_DB_BRST_DISABLE,
 		.data_type = MHI_ER_CTRL,
@@ -104,7 +98,7 @@ static struct mhi_event_config ath11k_mhi_events[] = {
 
 static struct mhi_controller_config ath11k_mhi_config = {
 	.max_channels = 128,
-	.timeout_ms = 2000,
+	.timeout_ms = 10000,
 	.use_bounce_buf = false,
 	.buf_len = 0,
 	.num_channels = ARRAY_SIZE(ath11k_mhi_channels),
@@ -112,7 +106,6 @@ static struct mhi_controller_config ath11k_mhi_config = {
 	.num_events = ARRAY_SIZE(ath11k_mhi_events),
 	.event_cfg = ath11k_mhi_events,
 };
-#endif
 
 static int ath11k_pci_get_mhi_msi(struct ath11k_pci *ar_pci)
 {
@@ -139,16 +132,25 @@ static int ath11k_pci_get_mhi_msi(struct ath11k_pci *ar_pci)
 						base_vector + i);
 
 	ar_pci->mhi_ctrl->irq = irq;
-	ar_pci->mhi_ctrl->msi_allocated = num_vectors;
+	ar_pci->mhi_ctrl->nr_irqs = num_vectors;
 
 	return 0;
 }
 
-static int ath11k_mhi_link_status(struct mhi_controller *mhi_ctrl, void *priv)
+static int ath11k_mhi_op_link_status(struct mhi_controller *mhi_ctrl)
 {
 	return 0;
 }
 
+static int ath11k_mhi_op_runtime_get(struct mhi_controller *mhi_cntrl)
+{
+	return 0;
+}
+
+static void ath11k_mhi_op_runtime_put(struct mhi_controller *mhi_cntrl)
+{
+}
+
 static char *ath11k_mhi_callback_to_str(int reason)
 {
 	switch (reason) {
@@ -171,33 +173,34 @@ static char *ath11k_mhi_callback_to_str(int reason)
 	}
 };
 
-
-static void ath11k_mhi_notify_status(struct mhi_controller *mhi_ctrl, void *priv,
-				     enum MHI_CB reason)
+static void ath11k_mhi_op_status_cb(struct mhi_controller *mhi_cntrl,
+				    enum mhi_callback cb)
 {
-	struct ath11k_base *ab = dev_get_drvdata(mhi_ctrl->dev);
+	struct ath11k_base *ab = dev_get_drvdata(mhi_cntrl->dev);
 
 	ath11k_info(ab, "mhi notify status reason %s\n",
-		    ath11k_mhi_callback_to_str(reason));
+		    ath11k_mhi_callback_to_str(cb));
 
-	if (reason == MHI_CB_EE_RDDM)
+	if (cb == MHI_CB_EE_RDDM)
 		queue_work(ab->workqueue_aux, &ab->reset_work);
 
 }
 
-static int ath11k_mhi_pm_runtime_get(struct mhi_controller *mhi_ctrl, void *priv)
+static int ath11k_mhi_read_reg(struct mhi_controller *mhi_cntrl, void __iomem *addr,
+                               u32 *out)
 {
-	return 0;
+        *out = ioread32(addr);
+        return 0;
 }
 
-static void ath11k_mhi_pm_runtime_put_noidle(struct mhi_controller *mhi_ctrl,
-					     void *priv)
+static void ath11k_mhi_write_reg(struct mhi_controller *mhi_cntrl, void __iomem *addr,
+                                 u32 val)
 {
+        iowrite32(val, addr);
 }
 
 int ath11k_pci_register_mhi(struct ath11k_pci *ar_pci)
 {
-	struct pci_dev *pci_dev = ar_pci->pdev;
 	struct ath11k_base *ab = ar_pci->ab;
 	struct mhi_controller *mhi_ctrl;
 	struct device_node *np;
@@ -206,42 +209,37 @@ int ath11k_pci_register_mhi(struct ath11k_pci *ar_pci)
 	unsigned long start, size;
 	bool no_dt_entry = 0;
 
-	mhi_ctrl = mhi_alloc_controller(0);
-	if (!mhi_ctrl) {
-		ath11k_err(ab, "invalid mhi controller context\n");
-		return -EINVAL;
-	}
-
+	mhi_ctrl = kzalloc(sizeof(*mhi_ctrl), GFP_KERNEL);
+	if (!mhi_ctrl)
+		return PTR_ERR(mhi_ctrl);
+ 
 	ar_pci->mhi_ctrl = mhi_ctrl;
+	mhi_ctrl->cntrl_dev = ab->dev;
 
-	mhi_ctrl->priv_data = ar_pci;
-	mhi_ctrl->dev = &pci_dev->dev;
-	mhi_ctrl->of_node = ab->dev->of_node;
-	mhi_ctrl->dev_id = ar_pci->dev_id;
-	mhi_ctrl->domain = pci_domain_nr(pci_dev->bus);
-	mhi_ctrl->bus = pci_dev->bus->number;
-	mhi_ctrl->slot = PCI_SLOT(pci_dev->devfn);
-
-	mhi_ctrl->rddm_size = ATH11K_PCI_FW_RDDM_SZ;
 	mhi_ctrl->fw_image = ATH11K_PCI_FW_FILE_NAME;
 	mhi_ctrl->regs = ar_pci->mem;
 
 	ret = ath11k_pci_get_mhi_msi(ar_pci);
 	if (ret) {
 		ath11k_err(ab, "failed to get msi for mhi\n");
+		kfree(mhi_ctrl);
 		return ret;
 	}
 
 	np = of_find_node_by_type(NULL, "memory");
-	if (!np)
+	if (!np) {
 		no_dt_entry = 1;
+		goto no_dt;
+	}
 
 	aw = of_n_addr_cells(np);
 	sw = of_n_size_cells(np);
 
 	reg = (unsigned int *)of_get_property(np, "reg", &len);
-	if (!reg)
+	if (!reg) {
 		no_dt_entry = 1;
+		goto no_dt;
+	}
 
 	reg_end = reg + len/4;
 	do {
@@ -251,6 +249,7 @@ int ath11k_pci_register_mhi(struct ath11k_pci *ar_pci)
 		reg += sw;
 	} while (reg < reg_end);
 
+no_dt:
 	if (no_dt_entry) {
         	mhi_ctrl->iova_start = 0;
         	mhi_ctrl->iova_stop = 0xFFFFFFFF;
@@ -259,21 +258,25 @@ int ath11k_pci_register_mhi(struct ath11k_pci *ar_pci)
         	mhi_ctrl->iova_stop = (dma_addr_t)(start + size);
 	}
 
-	ath11k_info(ab, "mhi_ctrl start addr 0x%llx end addr 0x%llx\n",
-			(u64)mhi_ctrl->iova_start, (u64)mhi_ctrl->iova_stop);
-
-	mhi_ctrl->link_status = ath11k_mhi_link_status;
-	mhi_ctrl->status_cb = ath11k_mhi_notify_status;
-	mhi_ctrl->runtime_get = ath11k_mhi_pm_runtime_get;
-	mhi_ctrl->runtime_put = ath11k_mhi_pm_runtime_put_noidle;
-
 	mhi_ctrl->sbl_size = SZ_512K;
 	mhi_ctrl->seg_len = SZ_512K;
 	mhi_ctrl->fbc_download = true;
+	mhi_ctrl->rddm_size = ATH11K_PCI_FW_RDDM_SZ;
+
+	mhi_ctrl->link_status = ath11k_mhi_op_link_status;
+	mhi_ctrl->runtime_get = ath11k_mhi_op_runtime_get;
+	mhi_ctrl->runtime_put = ath11k_mhi_op_runtime_put;
+	mhi_ctrl->status_cb = ath11k_mhi_op_status_cb;
+        mhi_ctrl->read_reg = ath11k_mhi_read_reg;
+        mhi_ctrl->write_reg = ath11k_mhi_write_reg;
+
+	ath11k_info(ab, "mhi_ctrl start addr 0x%llx end addr 0x%llx\n",
+			(u64)mhi_ctrl->iova_start, (u64)mhi_ctrl->iova_stop);
 
-	ret = of_register_mhi_controller(mhi_ctrl);
+	ret = mhi_register_controller(mhi_ctrl, &ath11k_mhi_config);
 	if (ret) {
 		ath11k_err(ab, "failed to register to mhi bus, err = %d\n", ret);
+		kfree(mhi_ctrl);
 		return ret;
 	}
 
@@ -284,7 +287,7 @@ void ath11k_pci_unregister_mhi(struct ath11k_pci *ar_pci)
 {
 	struct mhi_controller *mhi_ctrl = ar_pci->mhi_ctrl;
 
-	mhi_unregister_mhi_controller(mhi_ctrl);
+	mhi_unregister_controller(mhi_ctrl);
 	kfree(mhi_ctrl->irq);
 }
 
@@ -423,7 +426,7 @@ int ath11k_pci_set_mhi_state(struct ath11k_pci *ar_pci,
 		ret = 0;
 		break;
 	case ATH11K_MHI_POWER_ON:
-		ret = mhi_sync_power_up(ar_pci->mhi_ctrl);
+		ret = mhi_async_power_up(ar_pci->mhi_ctrl);
 		break;
 	case ATH11K_MHI_POWER_OFF:
 		mhi_power_down(ar_pci->mhi_ctrl, true);
-- 
2.7.4

