From b3e3563c66d400e7a6da4f2add46d63345fc1c90 Mon Sep 17 00:00:00 2001
From: Seevalamuthu Mariappan <quic_seevalam@quicinc.com>
Date: Tue, 8 Feb 2022 15:14:36 +0530
Subject: [PATCH] ath11k: Add debugfs entry to configure bss survey mode

BSS channel survey can be requested for two modes. But, request
type is set to READ mode by default. Add debugfs interface to
configure either READ or READ_CLEAR mode.

In READ_CLEAR mode, firmware sends the survey values to host and clear it.
So, every time when dumping survey results will have the fresh values.
Whereas in READ mode, firmware will not clear survey values. Survey results
will have cumulative values in this case.

Command to configure bss survey request mode:

$ echo 1 > /sys/kernel/debug/ieee80211/phyX/ath11k/bss_survey_mode

This configuration option is needed to test survey dump results with
both modes.
Also, set default mode to READ_CLEAR as this is the expected one to
be used.

Signed-off-by: Seevalamuthu Mariappan <quic_seevalam@quicinc.com>
---
 drivers/net/wireless/ath/ath11k/core.h    |  1 +
 drivers/net/wireless/ath/ath11k/debugfs.c | 50 +++++++++++++++++++++++++++++++
 drivers/net/wireless/ath/ath11k/mac.c     |  7 ++++-
 3 files changed, 57 insertions(+), 1 deletion(-)

diff --git a/drivers/net/wireless/ath/ath11k/core.h b/drivers/net/wireless/ath/ath11k/core.h
index 833dc53..a51c970 100644
--- a/drivers/net/wireless/ath/ath11k/core.h
+++ b/drivers/net/wireless/ath/ath11k/core.h
@@ -670,6 +670,7 @@ struct ath11k_debug {
 	bool disable_dynamic_bw;
 	struct dentry *debugfs_smartant;
 	u32 coex_priority_level[ATH11K_MAX_COEX_PRIORITY_LEVEL];
+	enum wmi_bss_chan_info_req_type bss_survey_mode;
 };
 
 struct ath11k_per_peer_tx_stats {
diff --git a/drivers/net/wireless/ath/ath11k/debugfs.c b/drivers/net/wireless/ath/ath11k/debugfs.c
index d62fca7..8018b22 100644
--- a/drivers/net/wireless/ath/ath11k/debugfs.c
+++ b/drivers/net/wireless/ath/ath11k/debugfs.c
@@ -4647,6 +4647,53 @@ static const struct file_operations fops_coex_priority = {
 	.llseek = default_llseek,
 };
 
+static ssize_t ath11k_bss_survey_mode_read(struct file *file,
+					   char __user *user_buf,
+					   size_t count, loff_t *ppos)
+{
+	struct ath11k *ar = file->private_data;
+	char buf[32] = {0};
+	size_t len = 0;
+
+	mutex_lock(&ar->conf_mutex);
+	len += scnprintf(buf + len, sizeof(buf) - len,
+			 "%u\n",
+			 ar->debug.bss_survey_mode);
+	mutex_unlock(&ar->conf_mutex);
+
+	return simple_read_from_buffer(user_buf, count, ppos, buf, len);
+}
+
+static ssize_t ath11k_bss_survey_mode_write(struct file *file,
+					    const char __user *user_buf,
+					    size_t count, loff_t *ppos)
+{
+	struct ath11k *ar = file->private_data;
+	u8 survey_mode;
+
+	if (kstrtouint_from_user(user_buf, count, 0, &survey_mode))
+		return -EINVAL;
+
+	if ((survey_mode != WMI_BSS_SURVEY_REQ_TYPE_READ) &&
+	    (survey_mode != WMI_BSS_SURVEY_REQ_TYPE_READ_CLEAR))
+		return -EINVAL;
+
+	mutex_lock(&ar->conf_mutex);
+
+	ar->debug.bss_survey_mode = survey_mode;
+
+	mutex_unlock(&ar->conf_mutex);
+	return count;
+}
+
+static const struct file_operations fops_bss_survey_mode = {
+	.read = ath11k_bss_survey_mode_read,
+	.write = ath11k_bss_survey_mode_write,
+	.open = simple_open,
+	.owner = THIS_MODULE,
+	.llseek = default_llseek,
+};
+
 int ath11k_debugfs_register(struct ath11k *ar)
 {
 	struct ath11k_base *ab = ar->ab;
@@ -4761,6 +4808,9 @@ int ath11k_debugfs_register(struct ath11k *ar)
 			    &fops_medium_busy);
 	debugfs_create_file("coex_priority", 0600,
 			    ar->debug.debugfs_pdev, ar, &fops_coex_priority);
+	debugfs_create_file("bss_survey_mode", 0644,
+			    ar->debug.debugfs_pdev, ar,
+			    &fops_bss_survey_mode);
 
 	return 0;
 }
diff --git a/drivers/net/wireless/ath/ath11k/mac.c b/drivers/net/wireless/ath/ath11k/mac.c
index af380a5..6ab8525 100644
--- a/drivers/net/wireless/ath/ath11k/mac.c
+++ b/drivers/net/wireless/ath/ath11k/mac.c
@@ -10490,10 +10490,15 @@ ath11k_mac_update_bss_chan_survey(struct ath11k *ar,
 				  struct ieee80211_channel *channel)
 {
 	int ret;
-	enum wmi_bss_chan_info_req_type type = WMI_BSS_SURVEY_REQ_TYPE_READ;
+	enum wmi_bss_chan_info_req_type type = WMI_BSS_SURVEY_REQ_TYPE_READ_CLEAR;
 
 	lockdep_assert_held(&ar->conf_mutex);
 
+#ifdef CPTCFG_ATH11K_DEBUGFS
+	if (ar->debug.bss_survey_mode)
+		type = ar->debug.bss_survey_mode;
+#endif
+
 	if (!test_bit(WMI_TLV_SERVICE_BSS_CHANNEL_INFO_64, ar->ab->wmi_ab.svc_map) ||
 	    ar->rx_channel != channel)
 		return;
-- 
2.7.4

