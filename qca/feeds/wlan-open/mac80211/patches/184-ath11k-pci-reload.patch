From c6718705017a06d6f40fa8fed1c5922d52411e48 Mon Sep 17 00:00:00 2001
From: Anilkumar Kolli <akolli@codeaurora.org>
Date: Fri, 15 May 2020 14:57:31 +0530
Subject: [PATCH 184/187] ath11k: fix ath11k reload

Signed-off-by: Anilkumar Kolli <akolli@codeaurora.org>
---
 drivers/net/wireless/ath/ath11k/mhi.c |  2 +-
 drivers/net/wireless/ath/ath11k/pci.c | 33 ++++++++++++++++++++++++++++-----
 2 files changed, 29 insertions(+), 6 deletions(-)

--- a/drivers/net/wireless/ath/ath11k/mhi.c
+++ b/drivers/net/wireless/ath/ath11k/mhi.c
@@ -450,7 +450,7 @@ out:
 
 void ath11k_pci_stop_mhi(struct ath11k_pci *ar_pci)
 {
-	ath11k_pci_set_mhi_state(ar_pci, ATH11K_MHI_RESUME);
+	ath11k_pci_set_mhi_state_bit(ar_pci, ATH11K_MHI_RESUME);
 	ath11k_pci_set_mhi_state(ar_pci, ATH11K_MHI_POWER_OFF);
 	ath11k_pci_set_mhi_state(ar_pci, ATH11K_MHI_DEINIT);
 }
--- a/drivers/net/wireless/ath/ath11k/pci.c
+++ b/drivers/net/wireless/ath/ath11k/pci.c
@@ -628,7 +628,6 @@ static void ath11k_pci_ext_grp_disable(s
 
 static void __ath11k_pci_ext_irq_disable(struct ath11k_base *sc)
 {
-	struct sk_buff *skb;
 	int i;
 
 	for (i = 0; i < ATH11K_EXT_IRQ_GRP_NUM_MAX; i++) {
@@ -808,14 +807,14 @@ static int ath11k_pci_config_irq(struct
 
 	/* Configure CE irqs */
 	for (i = 0, msi_data_idx = 0; i < CE_COUNT; i++) {
+		if (ath11k_ce_get_attr_flags(ab, i) & CE_ATTR_DIS_INTR)
+			continue;
+
 		msi_data = (msi_data_idx % msi_data_count) + msi_irq_start;
 
 		irq = ath11k_pci_get_msi_irq(ab->dev, msi_data);
 		ce_pipe = &ab->ce.ce_pipe[i];
 
-		if (ath11k_ce_get_attr_flags(ab, i) & CE_ATTR_DIS_INTR)
-			continue;
-
 		irq_idx = ATH11K_IRQ_CE0_OFFSET + i;
 
 		tasklet_init(&ce_pipe->intr_tq, ath11k_pci_ce_tasklet,
@@ -1018,6 +1017,23 @@ out:
 	return ret;
 }
 
+#define ATH11K_PCI_QCN9000_SOC_GLOBAL_RESET_ADDRESS 0x3008
+#define ATH11K_PCI_QCN9000_SOC_GLOBAL_RESET_VALUE 0x5
+#define ATH11K_PCI_QCN9000_SOC_GLOBAL_RESET_WAIT_CNT 50
+
+void ath11k_pci_qcn9000_global_reset(struct ath11k_pci *ar_pci)
+{
+	int current_ee, reset_cnt = 0;
+
+	do {
+		iowrite32(ATH11K_PCI_QCN9000_SOC_GLOBAL_RESET_VALUE,
+			  ar_pci->mem + ATH11K_PCI_QCN9000_SOC_GLOBAL_RESET_ADDRESS);
+		msleep(20);
+		current_ee = mhi_get_exec_env(ar_pci->mhi_ctrl);
+	} while (current_ee != MHI_EE_PBL &&
+		 reset_cnt < ATH11K_PCI_QCN9000_SOC_GLOBAL_RESET_WAIT_CNT);
+}
+
 static void ath11k_pci_free_region(struct ath11k_pci *ar_pci)
 {
 	struct pci_dev *pci_dev = ar_pci->pdev;
@@ -1052,6 +1068,10 @@ static void ath11k_pci_power_down(struct
 
 	ar_pci = ath11k_pci_priv(ab);
 	ath11k_pci_qca6x90_powerdown(ar_pci);
+
+	/* TODO these are qcn9000 specific move it to hw_ops */
+	ath11k_pci_qcn9000_global_reset(ar_pci);
+	mhi_set_mhi_state(ar_pci->mhi_ctrl, MHI_STATE_RESET);
 }
 
 static void ath11k_pci_kill_tasklets(struct ath11k_base *ab)
@@ -1280,10 +1300,13 @@ static void ath11k_pci_remove(struct pci
 	struct ath11k_pci *ar_pci = ath11k_pci_priv(ab);
 
 	set_bit(ATH11K_FLAG_UNREGISTERING, &ab->dev_flags);
+	ath11k_core_deinit(ab);
+	ath11k_pci_free_irq(ab);
 	ath11k_pci_unregister_mhi(ar_pci);
 	ath11k_pci_disable_msi(ar_pci);
 	ath11k_pci_free_region(ar_pci);
-	ath11k_pci_free_irq(ab);
+	ath11k_hal_srng_deinit(ab);
+	ath11k_ce_free_pipes(ab);
 	ath11k_core_free(ab);
 }
 
