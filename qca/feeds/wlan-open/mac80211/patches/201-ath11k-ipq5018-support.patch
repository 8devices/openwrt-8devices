From d065def1d943856d488c2756690d2fd678120609 Mon Sep 17 00:00:00 2001
From: Sriram R <srirrama@codeaurora.org>
Date: Mon, 13 Jul 2020 11:58:45 +0530
Subject: [PATCH] ath11k: Add support for IPQ5018

Add support for IPQ5018.

Signed-off-by: Sriram R <srirrama@codeaurora.org>
---
 drivers/net/wireless/ath/ath11k/ahb.c    | 299 +++++++++++++++++++++++++++++--
 drivers/net/wireless/ath/ath11k/ce.c     |   1 +
 drivers/net/wireless/ath/ath11k/ce.h     |   5 +
 drivers/net/wireless/ath/ath11k/core.c   |  25 ++-
 drivers/net/wireless/ath/ath11k/core.h   |   3 +
 drivers/net/wireless/ath/ath11k/dp.c     |  11 +-
 drivers/net/wireless/ath/ath11k/hal.c    | 182 ++++++++++++++++++-
 drivers/net/wireless/ath/ath11k/hal.h    |  78 ++++++++
 drivers/net/wireless/ath/ath11k/hal_rx.c |  18 +-
 drivers/net/wireless/ath/ath11k/hw.c     |  68 +++++++
 drivers/net/wireless/ath/ath11k/hw.h     |   7 +
 drivers/net/wireless/ath/ath11k/qmi.h    |   3 +
 12 files changed, 661 insertions(+), 39 deletions(-)

--- a/drivers/net/wireless/ath/ath11k/ahb.c
+++ b/drivers/net/wireless/ath/ath11k/ahb.c
@@ -69,6 +69,9 @@ static const struct of_device_id ath11k_
 	{ .compatible = "qcom,ipq6018-wifi",
 	  .data = (void *)ATH11K_HW_IPQ6018,
 	},
+	{ .compatible = "qcom,ipq5018-wifi",
+	  .data = (void *)ATH11K_HW_IPQ5018,
+	},
 	{ }
 };
 
@@ -313,6 +316,202 @@ static const struct service_to_pipe targ
 	{ /* terminator entry */ }
 };
 
+/* Target firmware's Copy Engine configuration for IPQ5018 */
+static const struct ce_pipe_config target_ce_config_wlan_5018[] = {
+	/* CE0: host->target HTC control and raw streams */
+	{
+		.pipenum = __cpu_to_le32(0),
+		.pipedir = __cpu_to_le32(PIPEDIR_OUT),
+		.nentries = __cpu_to_le32(32),
+		.nbytes_max = __cpu_to_le32(2048),
+		.flags = __cpu_to_le32(CE_ATTR_FLAGS),
+		.reserved = __cpu_to_le32(0),
+	},
+
+	/* CE1: target->host HTT + HTC control */
+	{
+		.pipenum = __cpu_to_le32(1),
+		.pipedir = __cpu_to_le32(PIPEDIR_IN),
+		.nentries = __cpu_to_le32(32),
+		.nbytes_max = __cpu_to_le32(2048),
+		.flags = __cpu_to_le32(CE_ATTR_FLAGS),
+		.reserved = __cpu_to_le32(0),
+	},
+
+	/* CE2: target->host WMI */
+	{
+		.pipenum = __cpu_to_le32(2),
+		.pipedir = __cpu_to_le32(PIPEDIR_IN),
+		.nentries = __cpu_to_le32(32),
+		.nbytes_max = __cpu_to_le32(2048),
+		.flags = __cpu_to_le32(CE_ATTR_FLAGS),
+		.reserved = __cpu_to_le32(0),
+	},
+
+	/* CE3: host->target WMI */
+	{
+		.pipenum = __cpu_to_le32(3),
+		.pipedir = __cpu_to_le32(PIPEDIR_OUT),
+		.nentries = __cpu_to_le32(32),
+		.nbytes_max = __cpu_to_le32(2048),
+		.flags = __cpu_to_le32(CE_ATTR_FLAGS),
+		.reserved = __cpu_to_le32(0),
+	},
+
+	/* CE4: host->target HTT */
+	{
+		.pipenum = __cpu_to_le32(4),
+		.pipedir = __cpu_to_le32(PIPEDIR_OUT),
+		.nentries = __cpu_to_le32(256),
+		.nbytes_max = __cpu_to_le32(256),
+		.flags = __cpu_to_le32(CE_ATTR_FLAGS | CE_ATTR_DIS_INTR),
+		.reserved = __cpu_to_le32(0),
+	},
+
+	/* CE5: target->host Pktlog */
+	{
+		.pipenum = __cpu_to_le32(5),
+		.pipedir = __cpu_to_le32(PIPEDIR_IN),
+		.nentries = __cpu_to_le32(32),
+		.nbytes_max = __cpu_to_le32(2048),
+		.flags = __cpu_to_le32(CE_ATTR_FLAGS),
+		.reserved = __cpu_to_le32(0),
+	},
+
+	/* CE6: Reserved for target autonomous hif_memcpy */
+	{
+		.pipenum = __cpu_to_le32(6),
+		.pipedir = __cpu_to_le32(PIPEDIR_INOUT),
+		.nentries = __cpu_to_le32(32),
+		.nbytes_max = __cpu_to_le32(16384),
+		.flags = __cpu_to_le32(CE_ATTR_FLAGS),
+		.reserved = __cpu_to_le32(0),
+	},
+
+	/* CE7 used only by Host */
+	{
+		.pipenum = __cpu_to_le32(7),
+		.pipedir = __cpu_to_le32(PIPEDIR_OUT),
+		.nentries = __cpu_to_le32(32),
+		.nbytes_max = __cpu_to_le32(2048),
+		.flags = __cpu_to_le32(0x2000),
+		.reserved = __cpu_to_le32(0),
+	},
+
+	/* CE8 target->host used only by IPA */
+	{
+		.pipenum = __cpu_to_le32(8),
+		.pipedir = __cpu_to_le32(PIPEDIR_INOUT),
+		.nentries = __cpu_to_le32(32),
+		.nbytes_max = __cpu_to_le32(16384),
+		.flags = __cpu_to_le32(CE_ATTR_FLAGS),
+		.reserved = __cpu_to_le32(0),
+	},
+};
+
+/* Map from service/endpoint to Copy Engine for IPQ5018.
+ * This table is derived from the CE TABLE, above.
+ * It is passed to the Target at startup for use by firmware.
+ */
+static const struct service_to_pipe target_service_to_ce_map_wlan_5018[] = {
+	{
+		__cpu_to_le32(ATH11K_HTC_SVC_ID_WMI_DATA_VO),
+		__cpu_to_le32(PIPEDIR_OUT),	/* out = UL = host -> target */
+		__cpu_to_le32(3),
+	},
+	{
+		__cpu_to_le32(ATH11K_HTC_SVC_ID_WMI_DATA_VO),
+		__cpu_to_le32(PIPEDIR_IN),	/* in = DL = target -> host */
+		__cpu_to_le32(2),
+	},
+	{
+		__cpu_to_le32(ATH11K_HTC_SVC_ID_WMI_DATA_BK),
+		__cpu_to_le32(PIPEDIR_OUT),	/* out = UL = host -> target */
+		__cpu_to_le32(3),
+	},
+	{
+		__cpu_to_le32(ATH11K_HTC_SVC_ID_WMI_DATA_BK),
+		__cpu_to_le32(PIPEDIR_IN),	/* in = DL = target -> host */
+		__cpu_to_le32(2),
+	},
+	{
+		__cpu_to_le32(ATH11K_HTC_SVC_ID_WMI_DATA_BE),
+		__cpu_to_le32(PIPEDIR_OUT),	/* out = UL = host -> target */
+		__cpu_to_le32(3),
+	},
+	{
+		__cpu_to_le32(ATH11K_HTC_SVC_ID_WMI_DATA_BE),
+		__cpu_to_le32(PIPEDIR_IN),	/* in = DL = target -> host */
+		__cpu_to_le32(2),
+	},
+	{
+		__cpu_to_le32(ATH11K_HTC_SVC_ID_WMI_DATA_VI),
+		__cpu_to_le32(PIPEDIR_OUT),	/* out = UL = host -> target */
+		__cpu_to_le32(3),
+	},
+	{
+		__cpu_to_le32(ATH11K_HTC_SVC_ID_WMI_DATA_VI),
+		__cpu_to_le32(PIPEDIR_IN),	/* in = DL = target -> host */
+		__cpu_to_le32(2),
+	},
+	{
+		__cpu_to_le32(ATH11K_HTC_SVC_ID_WMI_CONTROL),
+		__cpu_to_le32(PIPEDIR_OUT),	/* out = UL = host -> target */
+		__cpu_to_le32(3),
+	},
+	{
+		__cpu_to_le32(ATH11K_HTC_SVC_ID_WMI_CONTROL),
+		__cpu_to_le32(PIPEDIR_IN),	/* in = DL = target -> host */
+		__cpu_to_le32(2),
+	},
+
+	{
+		__cpu_to_le32(ATH11K_HTC_SVC_ID_RSVD_CTRL),
+		__cpu_to_le32(PIPEDIR_OUT),	/* out = UL = host -> target */
+		__cpu_to_le32(0),
+	},
+	{
+		__cpu_to_le32(ATH11K_HTC_SVC_ID_RSVD_CTRL),
+		__cpu_to_le32(PIPEDIR_IN),	/* in = DL = target -> host */
+		__cpu_to_le32(1),
+	},
+
+	{
+		__cpu_to_le32(ATH11K_HTC_SVC_ID_TEST_RAW_STREAMS),
+		__cpu_to_le32(PIPEDIR_OUT),	/* out = UL = host -> target */
+		__cpu_to_le32(0),
+	},
+	{
+		__cpu_to_le32(ATH11K_HTC_SVC_ID_TEST_RAW_STREAMS),
+		__cpu_to_le32(PIPEDIR_IN),	/* in = DL = target -> host */
+		__cpu_to_le32(1),
+	},
+	{
+		__cpu_to_le32(ATH11K_HTC_SVC_ID_HTT_DATA_MSG),
+		__cpu_to_le32(PIPEDIR_OUT),	/* out = UL = host -> target */
+		__cpu_to_le32(4),
+	},
+	{
+		__cpu_to_le32(ATH11K_HTC_SVC_ID_HTT_DATA_MSG),
+		__cpu_to_le32(PIPEDIR_IN),	/* in = DL = target -> host */
+		__cpu_to_le32(1),
+	},
+	{
+		__cpu_to_le32(ATH11K_HTC_SVC_ID_PKT_LOG),
+		__cpu_to_le32(PIPEDIR_IN),	/* in = DL = target -> host */
+		__cpu_to_le32(5),
+	},
+
+       /* (Additions here) */
+
+       { /* must be last */
+               __cpu_to_le32(0),
+               __cpu_to_le32(0),
+               __cpu_to_le32(0),
+       },
+
+
+};
 /* enum ext_irq_num - irq numbers that can be used by external modules
  * like datapath
  */
@@ -357,12 +556,22 @@ enum ext_irq_num {
 
 static inline u32 ath11k_ahb_read32(struct ath11k_base *ab, u32 offset)
 {
-	return ioread32(ab->mem + offset);
+	if (ab->ce_remap && (offset & HAL_CE_REMAP_REG_BASE)) {
+		offset = offset - HAL_CE_REMAP_REG_BASE;
+		return ioread32(ab->mem_ce + offset);
+	} else {
+		return ioread32(ab->mem + offset);
+	}
 }
 
 static inline void ath11k_ahb_write32(struct ath11k_base *ab, u32 offset, u32 value)
 {
-	iowrite32(value, ab->mem + offset);
+	if (ab->ce_remap && (offset & HAL_CE_REMAP_REG_BASE)) {
+		offset = offset - HAL_CE_REMAP_REG_BASE;
+		iowrite32(value, ab->mem_ce + offset);
+	} else {
+		iowrite32(value, ab->mem + offset);
+	}
 }
 
 static void ath11k_ahb_kill_tasklets(struct ath11k_base *ab)
@@ -428,30 +637,54 @@ static void ath11k_ahb_clearbit32(struct
 static void ath11k_ahb_ce_irq_enable(struct ath11k_base *ab, u16 ce_id)
 {
 	const struct ce_pipe_config *ce_config;
+	u32 ie1_reg_addr, ie2_reg_addr, ie3_reg_addr;
+
+	if  (ab->hw_rev == ATH11K_HW_IPQ5018) {
+		ce_config = &target_ce_config_wlan_5018[ce_id];
+		ie1_reg_addr = CE_HOST_IPQ5018_IE_ADDRESS;
+		ie2_reg_addr = CE_HOST_IPQ5018_IE_2_ADDRESS;
+		ie3_reg_addr = CE_HOST_IPQ5018_IE_3_ADDRESS;
+	} else {
+		ce_config = &target_ce_config_wlan[ce_id];
+		ie1_reg_addr = CE_HOST_IE_ADDRESS;
+		ie2_reg_addr = CE_HOST_IE_2_ADDRESS;
+		ie3_reg_addr = CE_HOST_IE_3_ADDRESS;
+	}
 
-	ce_config = &target_ce_config_wlan[ce_id];
 	if (__le32_to_cpu(ce_config->pipedir) & PIPEDIR_OUT)
-		ath11k_ahb_setbit32(ab, ce_id, CE_HOST_IE_ADDRESS);
+		ath11k_ahb_setbit32(ab, ce_id, ie1_reg_addr);
 
 	if (__le32_to_cpu(ce_config->pipedir) & PIPEDIR_IN) {
-		ath11k_ahb_setbit32(ab, ce_id, CE_HOST_IE_2_ADDRESS);
+		ath11k_ahb_setbit32(ab, ce_id, ie2_reg_addr);
 		ath11k_ahb_setbit32(ab, ce_id + CE_HOST_IE_3_SHIFT,
-				    CE_HOST_IE_3_ADDRESS);
+				    ie3_reg_addr);
 	}
 }
 
 static void ath11k_ahb_ce_irq_disable(struct ath11k_base *ab, u16 ce_id)
 {
 	const struct ce_pipe_config *ce_config;
+	u32 ie1_reg_addr, ie2_reg_addr, ie3_reg_addr;
+
+	if  (ab->hw_rev == ATH11K_HW_IPQ5018) {
+		ce_config = &target_ce_config_wlan_5018[ce_id];
+		ie1_reg_addr = CE_HOST_IPQ5018_IE_ADDRESS;
+		ie2_reg_addr = CE_HOST_IPQ5018_IE_2_ADDRESS;
+		ie3_reg_addr = CE_HOST_IPQ5018_IE_3_ADDRESS;
+	} else {
+		ce_config = &target_ce_config_wlan[ce_id];
+		ie1_reg_addr = CE_HOST_IE_ADDRESS;
+		ie2_reg_addr = CE_HOST_IE_2_ADDRESS;
+		ie3_reg_addr = CE_HOST_IE_3_ADDRESS;
+	}
 
-	ce_config = &target_ce_config_wlan[ce_id];
 	if (__le32_to_cpu(ce_config->pipedir) & PIPEDIR_OUT)
-		ath11k_ahb_clearbit32(ab, ce_id, CE_HOST_IE_ADDRESS);
+		ath11k_ahb_clearbit32(ab, ce_id, ie1_reg_addr);
 
 	if (__le32_to_cpu(ce_config->pipedir) & PIPEDIR_IN) {
-		ath11k_ahb_clearbit32(ab, ce_id, CE_HOST_IE_2_ADDRESS);
+		ath11k_ahb_clearbit32(ab, ce_id, ie2_reg_addr);
 		ath11k_ahb_clearbit32(ab, ce_id + CE_HOST_IE_3_SHIFT,
-				      CE_HOST_IE_3_ADDRESS);
+				      ie3_reg_addr);
 	}
 }
 
@@ -562,10 +795,17 @@ static void ath11k_ahb_init_qmi_ce_confi
 {
 	struct ath11k_qmi_ce_cfg *cfg = &ab->qmi.ce_cfg;
 
-	cfg->tgt_ce_len = ARRAY_SIZE(target_ce_config_wlan) - 1;
-	cfg->tgt_ce = target_ce_config_wlan;
-	cfg->svc_to_ce_map_len = ARRAY_SIZE(target_service_to_ce_map_wlan);
-	cfg->svc_to_ce_map = target_service_to_ce_map_wlan;
+	if  (ab->hw_rev == ATH11K_HW_IPQ5018) {
+		cfg->tgt_ce_len = ARRAY_SIZE(target_ce_config_wlan_5018) - 1;
+		cfg->tgt_ce = target_ce_config_wlan_5018;
+		cfg->svc_to_ce_map_len = ARRAY_SIZE(target_service_to_ce_map_wlan_5018);
+		cfg->svc_to_ce_map = target_service_to_ce_map_wlan_5018;
+	} else {
+		cfg->tgt_ce_len = ARRAY_SIZE(target_ce_config_wlan) - 1;
+		cfg->tgt_ce = target_ce_config_wlan;
+		cfg->svc_to_ce_map_len = ARRAY_SIZE(target_service_to_ce_map_wlan);
+		cfg->svc_to_ce_map = target_service_to_ce_map_wlan;
+	}
 	ab->qmi.service_ins_id = ATH11K_QMI_WLFW_SERVICE_INS_ID_V01_QCA8074;
 }
 
@@ -790,12 +1030,21 @@ static int ath11k_ahb_config_irq(struct
 static int ath11k_ahb_map_service_to_pipe(struct ath11k_base *ab, u16 service_id,
 					  u8 *ul_pipe, u8 *dl_pipe)
 {
-	const struct service_to_pipe *entry;
+	const struct service_to_pipe *entry, *svc_map;
 	bool ul_set = false, dl_set = false;
+	int arr_sz;
 	int i;
 
-	for (i = 0; i < ARRAY_SIZE(target_service_to_ce_map_wlan); i++) {
-		entry = &target_service_to_ce_map_wlan[i];
+	if  (ab->hw_rev == ATH11K_HW_IPQ5018) {
+		arr_sz = ARRAY_SIZE(target_service_to_ce_map_wlan_5018);
+		svc_map = target_service_to_ce_map_wlan_5018;
+	} else {
+		arr_sz = ARRAY_SIZE(target_service_to_ce_map_wlan);
+		svc_map = target_service_to_ce_map_wlan;
+	}
+
+	for (i = 0; i < arr_sz; i++) {
+		entry = &svc_map[i];
 
 		if (__le32_to_cpu(entry->service_id) != service_id)
 			continue;
@@ -894,6 +1143,21 @@ static int ath11k_ahb_probe(struct platf
 	ab->enable_cold_boot_cal = enable_cold_boot_cal;
 	platform_set_drvdata(pdev, ab);
 
+	ab->mem_ce = ab->mem;
+	if (ab->hw_rev == ATH11K_HW_IPQ5018) {
+		/* ce register space is moved out of wcss unlike ipq8074 or ipq6018
+		 * and the space is not contiguous, hence remapping the CE registers
+		 * to a new space for accessing them.
+		 */
+		ab->mem_ce = ioremap_nocache(HAL_IPQ5018_CE_WFSS_REG_BASE, HAL_IPQ5018_CE_SIZE);
+		if (IS_ERR(ab->mem_ce)) {
+			dev_err(&pdev->dev, "ce ioremap error\n");
+			return -ENOMEM;
+		}
+		ab->ce_remap = true;
+		ab->ce_remap_base_addr = HAL_IPQ5018_CE_WFSS_REG_BASE;
+	}
+
 	ret = ath11k_core_pre_init(ab);
 	if (ret)
 		goto err_core_free;
@@ -965,6 +1229,10 @@ static int ath11k_ahb_remove(struct plat
 
 	ath11k_hal_srng_deinit(ab);
 	ath11k_ce_free_pipes(ab);
+
+	if (ab->ce_remap)
+		iounmap(ab->mem_ce);
+
 	ath11k_core_free(ab);
 	platform_set_drvdata(pdev, NULL);
 
--- a/drivers/net/wireless/ath/ath11k/ce.c
+++ b/drivers/net/wireless/ath/ath11k/ce.c
@@ -952,6 +952,7 @@ int ath11k_ce_attr_attach(struct ath11k_
 		ab->ce.ce_count = 12;
 		break;
 	case ATH11K_HW_QCN90XX:
+	case ATH11K_HW_IPQ5018:
 		ab->ce.host_ce_config = host_ce_config_wlan_qcn90xx;
 		ab->ce.ce_count = 6;
 		break;
--- a/drivers/net/wireless/ath/ath11k/ce.h
+++ b/drivers/net/wireless/ath/ath11k/ce.h
@@ -50,6 +50,11 @@ void ath11k_ce_byte_swap(void *mem, u32
 #define CE_HOST_IE_2_ADDRESS	0x00A18040
 #define CE_HOST_IE_3_ADDRESS	CE_HOST_IE_ADDRESS
 
+/* CE IE registers are different for IPQ5018 */
+#define CE_HOST_IPQ5018_IE_ADDRESS		0x0841804C
+#define CE_HOST_IPQ5018_IE_2_ADDRESS		0x08418050
+#define CE_HOST_IPQ5018_IE_3_ADDRESS		CE_HOST_IPQ5018_IE_ADDRESS
+
 #define CE_HOST_IE_3_SHIFT	0xC
 
 #define CE_RING_IDX_INCR(nentries_mask, idx) (((idx) + 1) & (nentries_mask))
--- a/drivers/net/wireless/ath/ath11k/core.c
+++ b/drivers/net/wireless/ath/ath11k/core.c
@@ -96,6 +96,27 @@ static const struct ath11k_hw_params ath
 		.spectral_summary_pad_sz = 16,
 		.spectral_fft_hdr_len = 24,
 	},
+	{
+		.dev_id = ATH11K_HW_IPQ5018,
+		.name = "ipq5018",
+		.fw = {
+			.dir = IPQ5018_FW_DIR,
+			.board_size = IPQ5018_MAX_BOARD_DATA_SZ,
+			.cal_size = IPQ5018_MAX_CAL_DATA_SZ,
+		},
+		.spectral_fft_sz = 2,
+		.max_radios = 1,
+		.bdf_addr = 0x4BA00000,
+		.bdf_sz = ATH11K_QMI_BDF_MAX_SIZE,
+		.caldb_sz = ATH11K_QMI_CALDB_SIZE_IPQ5018,
+		.hal_desc_sz = sizeof(struct hal_rx_desc_qcn9000),
+		.hw_ops = &ath11k_ipq5018_ops,
+		.credit_flow = false,
+		.m3_addr = ATH11K_QMI_IPQ5018_M3_DUMP_ADDRESS,
+		.spectral_max_fft_bins = 1024,
+		.spectral_summary_pad_sz = 16,
+		.spectral_fft_hdr_len = 24,
+	},
 };
 
 static int ath11k_core_create_board_name(struct ath11k_base *ab, char *name,
@@ -941,7 +962,8 @@ static int ath11k_check_hw_param(struct
 		    !hw_ops->rx_desc_get_mpdu_ppdu_id || !hw_ops->rx_desc_get_mpdu_addr2_valid ||
 		    !hw_ops->rx_desc_get_mpdu_addr2 || !hw_ops->rx_desc_msdu_da_mcbc ||
 		    !hw_ops->rx_desc_set_msdu_len || !hw_ops->rx_desc_get_attention ||
-		    !hw_ops->rx_desc_get_hal_mpdu_peerid || !hw_ops->rx_desc_get_hal_mpdu_len)) {
+		    !hw_ops->rx_desc_get_hal_mpdu_peerid || !hw_ops->rx_desc_get_hal_mpdu_len ||
+		    !hw_ops->get_reo_dest_remap_config)) {
 		ath11k_err(ab, "Unsupported hw ops in hw version: 0x%x\n", ab->hw_rev);
 		return -EINVAL;
 	}
@@ -1000,6 +1022,9 @@ int ath11k_core_pre_init(struct ath11k_b
 	case ATH11K_HW_QCN90XX:
 		ab->srng_regs = &qcn9000_srng_regs;
 		break;
+	case ATH11K_HW_IPQ5018:
+		ab->srng_regs = &ipq5018_srng_regs;
+		break;
 	default:
 		ath11k_err(ab, "unsupported core hardware revision %d\n",
 				ab->hw_rev);
--- a/drivers/net/wireless/ath/ath11k/core.h
+++ b/drivers/net/wireless/ath/ath11k/core.h
@@ -111,6 +111,7 @@ enum ath11k_hw_rev {
 	ATH11K_HW_QCN90XX,
 	ATH11K_HW_QCA6290,
 	ATH11K_HW_QCA6390,
+	ATH11K_HW_IPQ5018,
 };
 
 enum ath11k_firmware_mode {
@@ -757,6 +758,7 @@ struct ath11k_base {
 	struct ath11k_soc_nss nss;
 
 	void __iomem *mem;
+	void __iomem *mem_ce;
 	dma_addr_t mem_pa;
 	unsigned long mem_len;
 
@@ -847,6 +849,8 @@ struct ath11k_base {
 	bool use_register_windowing;
 	bool static_window_map;
 	bool is_qdss_tracing;
+	bool ce_remap;
+	u32 ce_remap_base_addr;
 	const struct ath11k_hw_regs *regs;
 	const struct hal_srng_regs *srng_regs;
 	u32 sw_pdev_id_map[MAX_RADIOS];
--- a/drivers/net/wireless/ath/ath11k/dp.c
+++ b/drivers/net/wireless/ath/ath11k/dp.c
@@ -446,20 +446,13 @@ static int ath11k_dp_srng_common_setup(s
 		goto err;
 	}
 
+	ring_hash_map = ab->hw_params.hw_ops->get_reo_dest_remap_config();
+
 	/* When hash based routing of rx packet is enabled, 32 entries to map
 	 * the hash values to the ring will be configured. Each hash entry uses
 	 * three bits to map to a particular ring. The ring mapping will be
 	 * 0:TCL, 1:SW1, 2:SW2, 3:SW3, 4:SW4, 5:Release, 6:FW and 7:Not used.
 	 */
-	ring_hash_map = HAL_HASH_ROUTING_RING_SW1 << 0 |
-			HAL_HASH_ROUTING_RING_SW2 << 3 |
-			HAL_HASH_ROUTING_RING_SW3 << 6 |
-			HAL_HASH_ROUTING_RING_SW4 << 9 |
-			HAL_HASH_ROUTING_RING_SW1 << 12 |
-			HAL_HASH_ROUTING_RING_SW2 << 15 |
-			HAL_HASH_ROUTING_RING_SW3 << 18 |
-			HAL_HASH_ROUTING_RING_SW4 << 21;
-
 	ath11k_hal_reo_hw_setup(ab, ring_hash_map);
 
 	return 0;
--- a/drivers/net/wireless/ath/ath11k/hal.c
+++ b/drivers/net/wireless/ath/ath11k/hal.c
@@ -363,6 +363,7 @@ const struct hal_srng_regs ipq8074_srng_
 	.tcl1_ring_misc_offset =
 		(HAL_IPQ8074_TCL1_RING_MISC - HAL_IPQ8074_TCL1_RING_BASE_LSB),
 	.wbm_idle_link_ring_misc = 0x00000870,
+	.reo_dest_ring_map_shift = HAL_REO_DEST_RING_CTRL_HASH_RING_SHIFT,
 };
 
 static const struct hal_srng_reg_grps qcn9000_srng_reg_grps[HAL_MAX_RING_TYPES] = {
@@ -518,6 +519,163 @@ const struct hal_srng_regs qcn9000_srng_
 	.tcl1_ring_misc_offset =
 		(HAL_QCN9000_TCL1_RING_MISC - HAL_QCN9000_TCL1_RING_BASE_LSB),
 	.wbm_idle_link_ring_misc = 0x00000884,
+	.reo_dest_ring_map_shift = HAL_REO_DEST_RING_CTRL_HASH_RING_SHIFT,
+};
+
+static const struct hal_srng_reg_grps ipq5018_srng_reg_grps[HAL_MAX_RING_TYPES] = {
+	{ /* REO_DST */
+		.reg_start = {
+			HAL_SEQ_WCSS_UMAC_REO_REG + HAL_IPQ5018_REO1_RING_BASE_LSB,
+			HAL_SEQ_WCSS_UMAC_REO_REG + HAL_IPQ5018_REO1_RING_HP,
+		},
+		.reg_size = {
+			HAL_IPQ5018_REO2_RING_BASE_LSB - HAL_IPQ5018_REO1_RING_BASE_LSB,
+			HAL_IPQ5018_REO2_RING_HP - HAL_IPQ5018_REO1_RING_HP,
+		},
+	},
+	{ /* REO_EXCEPTION */
+		.reg_start = {
+			HAL_SEQ_WCSS_UMAC_REO_REG + HAL_REO_TCL_RING_BASE_LSB,
+			HAL_SEQ_WCSS_UMAC_REO_REG + HAL_REO_TCL_RING_HP,
+		},
+	},
+	{ /* REO_REINJECT */
+		.reg_start = {
+			HAL_SEQ_WCSS_UMAC_REO_REG + HAL_IPQ5018_SW2REO_RING_BASE_LSB,
+			HAL_SEQ_WCSS_UMAC_REO_REG + HAL_IPQ5018_SW2REO_RING_HP,
+		},
+	},
+	{ /* REO_CMD */
+		.reg_start = {
+			HAL_SEQ_WCSS_UMAC_REO_REG + HAL_IPQ5018_REO_CMD_RING_BASE_LSB,
+			HAL_SEQ_WCSS_UMAC_REO_REG + HAL_IPQ5018_REO_CMD_HP,
+		},
+	},
+	{ /* REO_STATUS */
+		.reg_start = {
+			HAL_SEQ_WCSS_UMAC_REO_REG +
+				HAL_REO_STATUS_RING_BASE_LSB,
+			HAL_SEQ_WCSS_UMAC_REO_REG + HAL_REO_STATUS_HP,
+		},
+	},
+	{ /* TCL_DATA */
+		.reg_start = {
+			HAL_SEQ_WCSS_UMAC_TCL_REG + HAL_IPQ5018_TCL1_RING_BASE_LSB,
+			HAL_SEQ_WCSS_UMAC_TCL_REG + HAL_TCL1_RING_HP,
+		},
+		.reg_size = {
+			HAL_IPQ5018_TCL2_RING_BASE_LSB - HAL_IPQ5018_TCL1_RING_BASE_LSB,
+			HAL_TCL2_RING_HP - HAL_TCL1_RING_HP,
+		},
+	},
+	{ /* TCL_CMD */
+		.reg_start = {
+			HAL_SEQ_WCSS_UMAC_TCL_REG + HAL_IPQ5018_TCL_RING_BASE_LSB,
+			HAL_SEQ_WCSS_UMAC_TCL_REG + HAL_TCL_RING_HP,
+		},
+	},
+	{ /* TCL_STATUS */
+		.reg_start = {
+			HAL_SEQ_WCSS_UMAC_TCL_REG +
+				HAL_IPQ5018_TCL_STATUS_RING_BASE_LSB,
+			HAL_SEQ_WCSS_UMAC_TCL_REG + HAL_TCL_STATUS_RING_HP,
+		},
+	},
+	{ /* CE_SRC */
+		.reg_start = {
+			(HAL_IPQ5018_SEQ_WFSS_CE0_SRC_REG +
+			 HAL_CE_DST_RING_BASE_LSB),
+			HAL_IPQ5018_SEQ_WFSS_CE0_SRC_REG + HAL_CE_DST_RING_HP,
+		},
+		.reg_size = {
+			(HAL_IPQ5018_SEQ_WFSS_CE1_SRC_REG -
+			 HAL_IPQ5018_SEQ_WFSS_CE0_SRC_REG),
+			(HAL_IPQ5018_SEQ_WFSS_CE1_SRC_REG -
+			 HAL_IPQ5018_SEQ_WFSS_CE0_SRC_REG),
+		},
+	},
+	{ /* CE_DST */
+		.reg_start = {
+			(HAL_IPQ5018_SEQ_WFSS_CE0_DST_REG +
+			 HAL_CE_DST_RING_BASE_LSB),
+			HAL_IPQ5018_SEQ_WFSS_CE0_DST_REG + HAL_CE_DST_RING_HP,
+		},
+		.reg_size = {
+			(HAL_IPQ5018_SEQ_WFSS_CE1_DST_REG -
+			 HAL_IPQ5018_SEQ_WFSS_CE0_DST_REG),
+			(HAL_IPQ5018_SEQ_WFSS_CE1_DST_REG -
+			 HAL_IPQ5018_SEQ_WFSS_CE0_DST_REG),
+		},
+	},
+	{ /* CE_DST_STATUS */
+		.reg_start = {
+			(HAL_IPQ5018_SEQ_WFSS_CE0_DST_REG +
+			 HAL_CE_DST_STATUS_RING_BASE_LSB),
+			(HAL_IPQ5018_SEQ_WFSS_CE0_DST_REG +
+			 HAL_CE_DST_STATUS_RING_HP),
+		},
+		.reg_size = {
+			(HAL_IPQ5018_SEQ_WFSS_CE1_DST_REG -
+			 HAL_IPQ5018_SEQ_WFSS_CE0_DST_REG),
+			(HAL_IPQ5018_SEQ_WFSS_CE1_DST_REG -
+			 HAL_IPQ5018_SEQ_WFSS_CE0_DST_REG),
+		},
+	},
+	{ /* WBM_IDLE_LINK */
+		.reg_start = {
+			(HAL_SEQ_WCSS_UMAC_WBM_REG +
+			 HAL_IPQ5018_WBM_IDLE_LINK_RING_BASE_LSB),
+			(HAL_SEQ_WCSS_UMAC_WBM_REG + HAL_WBM_IDLE_LINK_RING_HP),
+		},
+	},
+	{ /* SW2WBM_RELEASE */
+		.reg_start = {
+			(HAL_SEQ_WCSS_UMAC_WBM_REG +
+			 HAL_IPQ5018_WBM_RELEASE_RING_BASE_LSB),
+			(HAL_SEQ_WCSS_UMAC_WBM_REG + HAL_WBM_RELEASE_RING_HP),
+		},
+	},
+	{ /* WBM2SW_RELEASE */
+		.reg_start = {
+			(HAL_SEQ_WCSS_UMAC_WBM_REG +
+			 HAL_IPQ5018_WBM0_RELEASE_RING_BASE_LSB),
+			(HAL_SEQ_WCSS_UMAC_WBM_REG + HAL_WBM0_RELEASE_RING_HP),
+		},
+		.reg_size = {
+			(HAL_IPQ5018_WBM1_RELEASE_RING_BASE_LSB -
+			 HAL_IPQ5018_WBM0_RELEASE_RING_BASE_LSB),
+			(HAL_WBM1_RELEASE_RING_HP - HAL_WBM0_RELEASE_RING_HP),
+		},
+	},
+};
+
+const struct hal_srng_regs ipq5018_srng_regs = {
+	.srng_reg_grps = ipq5018_srng_reg_grps,
+	.srng_reo_config = &reo_config,
+	.tcl1_ring_msi1_base_lsb_offset =
+		(HAL_IPQ5018_TCL1_RING_MSI1_BASE_LSB - HAL_IPQ5018_TCL1_RING_BASE_LSB),
+	.tcl1_ring_msi1_base_msb_offset =
+		(HAL_IPQ5018_TCL1_RING_MSI1_BASE_MSB - HAL_IPQ5018_TCL1_RING_BASE_LSB),
+	.tcl1_ring_msi1_data_offset =
+		(HAL_IPQ5018_TCL1_RING_MSI1_DATA - HAL_IPQ5018_TCL1_RING_BASE_LSB),
+	.tcl1_ring_base_msb_offset =
+		(HAL_IPQ5018_TCL1_RING_BASE_MSB - HAL_IPQ5018_TCL1_RING_BASE_LSB),
+	.tcl1_ring_id_offset =
+		(HAL_IPQ5018_TCL1_RING_ID - HAL_IPQ5018_TCL1_RING_BASE_LSB),
+	.tcl1_ring_consr_int_setup_IX0_offset =
+		(HAL_IPQ5018_TCL1_RING_CONSUMER_INT_SETUP_IX0 -
+			HAL_IPQ5018_TCL1_RING_BASE_LSB),
+	.tcl1_ring_consr_int_setup_IX1_offset =
+		(HAL_IPQ5018_TCL1_RING_CONSUMER_INT_SETUP_IX1 -
+			HAL_IPQ5018_TCL1_RING_BASE_LSB),
+	.tcl1_ring_tp_addr_lsb_offset =
+		(HAL_IPQ5018_TCL1_RING_TP_ADDR_LSB - HAL_IPQ5018_TCL1_RING_BASE_LSB),
+	.tcl1_ring_tp_addr_msb_offset =
+		(HAL_IPQ5018_TCL1_RING_TP_ADDR_MSB - HAL_IPQ5018_TCL1_RING_BASE_LSB),
+	.tcl1_ring_misc_offset =
+		(HAL_IPQ5018_TCL1_RING_MISC - HAL_IPQ5018_TCL1_RING_BASE_LSB),
+	.wbm_idle_link_ring_misc = HAL_IPQ5018_WBM_IDLE_LINK_RING_MISC_ADDR,
+	.reo_dest_ring_map_shift = HAL_IPQ5018_REO_DEST_RING_CTRL_HASH_RING_SHIFT,
 };
 
 
@@ -1111,6 +1269,14 @@ void ath11k_hal_srng_access_begin(struct
  */
 void ath11k_hal_srng_access_end(struct ath11k_base *ab, struct hal_srng *srng)
 {
+	unsigned long *mem;
+
+	if (srng->flags & HAL_SRNG_FLAGS_REMAP_CE_RING) {
+		mem = ab->mem_ce;
+	} else {
+		mem = ab->mem;
+	}
+
 	lockdep_assert_held(&srng->lock);
 
 	/* TODO: See if we need a write memory barrier here */
@@ -1132,13 +1298,13 @@ void ath11k_hal_srng_access_end(struct a
 				*(volatile u32 *)srng->u.src_ring.tp_addr;
 			ath11k_hif_write32(ab,
 					   (unsigned long)srng->u.src_ring.hp_addr -
-					   (unsigned long)ab->mem,
+					   (unsigned long)mem,
 					   srng->u.src_ring.hp);
 		} else {
 			srng->u.dst_ring.last_hp = *srng->u.dst_ring.hp_addr;
 			ath11k_hif_write32(ab,
 					   (unsigned long)srng->u.dst_ring.tp_addr -
-					   (unsigned long)ab->mem,
+					   (unsigned long)mem,
 					   srng->u.dst_ring.tp);
 		}
 	}
@@ -1249,6 +1415,7 @@ int ath11k_hal_srng_setup(struct ath11k_
 	u32 lmac_idx;
 	int i;
 	u32 reg_base;
+	unsigned long *mem;
 
 	ring_id = ath11k_hal_srng_get_ring_id(ab, type, ring_num, mac_id);
 	if (ring_id < 0)
@@ -1277,6 +1444,13 @@ int ath11k_hal_srng_setup(struct ath11k_
 				      (ring_num * srng_config->reg_size[i]);
 	}
 
+	mem = ab->mem;
+
+	if (ab->ce_remap && (type == HAL_CE_DST || type == HAL_CE_SRC)) {
+		srng->flags |= HAL_SRNG_FLAGS_REMAP_CE_RING;
+		mem = ab->mem_ce;
+	}
+
 	memset(srng->ring_base_vaddr, 0,
 	       (srng->entry_size * srng->num_entries) << 2);
 
@@ -1301,7 +1475,7 @@ int ath11k_hal_srng_setup(struct ath11k_
 			srng->flags |= HAL_SRNG_FLAGS_LMAC_RING;
 		} else {
 			srng->u.src_ring.hp_addr =
-				(u32 *)((unsigned long)ab->mem + reg_base);
+				(u32 *)((unsigned long)mem + reg_base);
 		}
 	} else {
 		/* During initialization loop count in all the descriptors
@@ -1325,7 +1499,7 @@ int ath11k_hal_srng_setup(struct ath11k_
 						   lmac_idx);
 			srng->flags |= HAL_SRNG_FLAGS_LMAC_RING;
 		} else {
-			srng->u.dst_ring.tp_addr = (u32 *)((unsigned long)ab->mem + reg_base +
+			srng->u.dst_ring.tp_addr = (u32 *)((unsigned long)mem + reg_base +
 							   (HAL_REO1_RING_TP - HAL_REO1_RING_HP));
 		}
 	}
--- a/drivers/net/wireless/ath/ath11k/hal.h
+++ b/drivers/net/wireless/ath/ath11k/hal.h
@@ -11,6 +11,8 @@
 
 struct ath11k_base;
 
+#define HAL_CE_REMAP_REG_BASE (ab->ce_remap_base_addr)
+
 #define HAL_LINK_DESC_SIZE			(32 << 2)
 #define HAL_LINK_DESC_ALIGN			128
 #define HAL_NUM_MPDUS_PER_LINK_DESC		6
@@ -129,6 +131,78 @@ struct ath11k_base;
 #define HAL_REO1_AGING_THRESH_IX_2		0x0000056c
 #define HAL_REO1_AGING_THRESH_IX_3		0x00000570
 
+/* IPQ5018 specific register changes */
+
+/* IPQ5018 ce registers */
+#define HAL_CE_WFSS_CE_REG_BASE_5018		0x08400000
+#define HAL_IPQ5018_CE_WFSS_REG_BASE		0x08400000
+#define HAL_IPQ5018_SEQ_WFSS_CE0_SRC_REG	0x08400000
+#define HAL_IPQ5018_SEQ_WFSS_CE0_DST_REG	0x08401000
+#define HAL_IPQ5018_SEQ_WFSS_CE1_SRC_REG	0x08402000
+#define HAL_IPQ5018_SEQ_WFSS_CE1_DST_REG	0x08403000
+#define HAL_IPQ5018_CE_SIZE			0x200000
+
+/* IPQ5018 SW2TCL(x) R0 ring configuration address */
+#define HAL_IPQ5018_TCL1_RING_BASE_LSB			0x00000694
+#define HAL_IPQ5018_TCL1_RING_BASE_MSB			0x00000698
+#define HAL_IPQ5018_TCL1_RING_ID			0x0000069c
+#define HAL_IPQ5018_TCL1_RING_MISC			0x000006a4
+#define HAL_IPQ5018_TCL1_RING_TP_ADDR_LSB		0x000006b0
+#define HAL_IPQ5018_TCL1_RING_TP_ADDR_MSB		0x000006b4
+#define HAL_IPQ5018_TCL1_RING_CONSUMER_INT_SETUP_IX0	0x000006c4
+#define HAL_IPQ5018_TCL1_RING_CONSUMER_INT_SETUP_IX1	0x000006c8
+#define HAL_IPQ5018_TCL1_RING_MSI1_BASE_LSB		0x000006dc
+#define HAL_IPQ5018_TCL1_RING_MSI1_BASE_MSB		0x000006e0
+#define HAL_IPQ5018_TCL1_RING_MSI1_DATA			0x000006e4
+#define HAL_IPQ5018_TCL2_RING_BASE_LSB			0x000006ec
+#define HAL_IPQ5018_TCL_RING_BASE_LSB			0x0000079c
+#define HAL_IPQ5018_TCL_STATUS_RING_BASE_LSB		0x000008a4
+
+/* IPQ5018 REO2SW(x) R0 ring configuration address 5018*/
+#define HAL_IPQ5018_REO1_RING_BASE_LSB                  0x000001ec
+#define HAL_IPQ5018_REO1_RING_BASE_MSB                  0x000001f0
+#define HAL_IPQ5018_REO1_RING_ID                        0x000001f4
+#define HAL_IPQ5018_REO1_RING_MISC                      0x000001fc
+#define HAL_IPQ5018_REO1_RING_HP_ADDR_LSB               0x00000200
+#define HAL_IPQ5018_REO1_RING_HP_ADDR_MSB               0x00000204
+#define HAL_IPQ5018_REO1_RING_PRODUCER_INT_SETUP        0x00000210
+#define HAL_IPQ5018_REO1_RING_MSI1_BASE_LSB             0x00000234
+#define HAL_IPQ5018_REO1_RING_MSI1_BASE_MSB             0x00000238
+#define HAL_IPQ5018_REO1_RING_MSI1_DATA                 0x0000023c
+#define HAL_IPQ5018_REO2_RING_BASE_LSB                  0x00000244
+#define HAL_IPQ5018_REO1_AGING_THRESH_IX_0              0x00000564
+#define HAL_IPQ5018_REO1_AGING_THRESH_IX_1              0x00000568
+#define HAL_IPQ5018_REO1_AGING_THRESH_IX_2              0x0000056c
+#define HAL_IPQ5018_REO1_AGING_THRESH_IX_3              0x00000570
+
+/* IPQ5018 REO2SW(x) R2 ring pointers (head/tail) address */
+#define HAL_IPQ5018_REO1_RING_HP			0x00003028
+#define HAL_IPQ5018_REO1_RING_TP			0x0000302c
+#define HAL_IPQ5018_REO2_RING_HP			0x00003030
+
+/* IPQ5018 REO CMD R0 address */
+#define HAL_IPQ5018_REO_CMD_RING_BASE_LSB		0x000000e4
+
+/* IPQ5018 REO CMD R2 address */
+#define HAL_IPQ5018_REO_CMD_HP				0x00003010
+
+/* IPQ5018 SW2REO R0 address */
+#define HAL_IPQ5018_SW2REO_RING_BASE_LSB		0x0000013c
+
+/* IPQ5018 SW2REO R2 address */
+#define HAL_IPQ5018_SW2REO_RING_HP			0x00003018
+
+/* IPQ5018 WBM Idle R0 address */
+#define HAL_IPQ5018_WBM_IDLE_LINK_RING_BASE_LSB	0x00000874
+#define HAL_IPQ5018_WBM_IDLE_LINK_RING_MISC_ADDR 0x00000884
+
+/* IPQ5018 SW2WBM R0 release address */
+#define HAL_IPQ5018_WBM_RELEASE_RING_BASE_LSB	0x000001ec
+
+/* IPQ5018 WBM2SW R0 release address */
+#define HAL_IPQ5018_WBM0_RELEASE_RING_BASE_LSB	0x00000924
+#define HAL_IPQ5018_WBM1_RELEASE_RING_BASE_LSB	0x0000097c
+
 /* REO2SW(x) R2 ring pointers (head/tail) address */
 #define HAL_REO1_RING_HP			0x00003038
 #define HAL_REO1_RING_TP			0x0000303c
@@ -483,6 +557,7 @@ enum hal_srng_dir {
 #define HAL_SRNG_FLAGS_LOW_THRESH_INTR_EN	0x00010000
 #define HAL_SRNG_FLAGS_MSI_INTR			0x00020000
 #define HAL_SRNG_FLAGS_LMAC_RING		0x80000000
+#define HAL_SRNG_FLAGS_REMAP_CE_RING		0x10000000
 
 #define HAL_SRNG_TLV_HDR_TAG		GENMASK(9, 1)
 #define HAL_SRNG_TLV_HDR_LEN		GENMASK(25, 10)
@@ -654,10 +729,12 @@ struct hal_srng_regs {
 	u32 tcl1_ring_tp_addr_msb_offset;
 	u32 tcl1_ring_misc_offset;
 	u32 wbm_idle_link_ring_misc;
+	u8 reo_dest_ring_map_shift;
 };
 
 extern const struct hal_srng_regs ipq8074_srng_regs;
 extern const struct hal_srng_regs qcn9000_srng_regs;
+extern const struct hal_srng_regs ipq5018_srng_regs;
 
 /**
  * enum hal_rx_buf_return_buf_manager
@@ -743,6 +820,9 @@ enum hal_rx_buf_return_buf_manager {
 
 #define HAL_REO_DEST_RING_CTRL_HASH_RING_MAP	GENMASK(31, 8)
 
+#define HAL_REO_DEST_RING_CTRL_HASH_RING_SHIFT			8
+#define HAL_IPQ5018_REO_DEST_RING_CTRL_HASH_RING_SHIFT		0
+
 struct ath11k_hal_reo_cmd {
 	u32 addr_lo;
 	u32 flag;
--- a/drivers/net/wireless/ath/ath11k/hal_rx.c
+++ b/drivers/net/wireless/ath/ath11k/hal_rx.c
@@ -802,6 +802,8 @@ void ath11k_hal_reo_init_cmd_ring(struct
 void ath11k_hal_reo_hw_setup(struct ath11k_base *ab, u32 ring_hash_map)
 {
 	u8 frag_dest_ring = HAL_SRNG_RING_ID_REO2SW1;
+	const struct hal_srng_regs *srng_regs = ab->srng_regs;
+	u8 reo_dest_hash_shift = srng_regs->reo_dest_ring_map_shift;
 	u32 reo_base = HAL_SEQ_WCSS_UMAC_REO_REG;
 	u32 val;
 
@@ -830,18 +832,18 @@ void ath11k_hal_reo_hw_setup(struct ath1
 	if (ab->nss.enabled)
 		return;
 
+	/* These registers use only 24bits(3 bits x 8 hash values) for
+	 * mapping the dest rings and remaining bits are reserved/not used
+	 * so its safe to write them completely.
+	 */
 	ath11k_hif_write32(ab, reo_base + HAL_REO1_DEST_RING_CTRL_IX_0,
-			   FIELD_PREP(HAL_REO_DEST_RING_CTRL_HASH_RING_MAP,
-				      ring_hash_map));
+			   ring_hash_map << reo_dest_hash_shift);
 	ath11k_hif_write32(ab, reo_base + HAL_REO1_DEST_RING_CTRL_IX_1,
-			   FIELD_PREP(HAL_REO_DEST_RING_CTRL_HASH_RING_MAP,
-				      ring_hash_map));
+			   ring_hash_map << reo_dest_hash_shift);
 	ath11k_hif_write32(ab, reo_base + HAL_REO1_DEST_RING_CTRL_IX_2,
-			   FIELD_PREP(HAL_REO_DEST_RING_CTRL_HASH_RING_MAP,
-				      ring_hash_map));
+			   ring_hash_map << reo_dest_hash_shift);
 	ath11k_hif_write32(ab, reo_base + HAL_REO1_DEST_RING_CTRL_IX_3,
-			   FIELD_PREP(HAL_REO_DEST_RING_CTRL_HASH_RING_MAP,
-				      ring_hash_map));
+			   ring_hash_map << reo_dest_hash_shift);
 }
 
 static inline void
--- a/drivers/net/wireless/ath/ath11k/hw.c
+++ b/drivers/net/wireless/ath/ath11k/hw.c
@@ -421,6 +421,38 @@ u32 ath11k_rx_desc_get_hal_mpdu_len_qcn9
                          __le32_to_cpu(mpdu_info->u.qcn9000.info1));
 }
 
+static u32 ath11k_get_reo_dest_remap_config_default(void)
+{
+	u32 ring_hash_map;
+
+	ring_hash_map = HAL_HASH_ROUTING_RING_SW1 << 0 |
+			HAL_HASH_ROUTING_RING_SW2 << 3 |
+			HAL_HASH_ROUTING_RING_SW3 << 6 |
+			HAL_HASH_ROUTING_RING_SW4 << 9 |
+			HAL_HASH_ROUTING_RING_SW1 << 12 |
+			HAL_HASH_ROUTING_RING_SW2 << 15 |
+			HAL_HASH_ROUTING_RING_SW3 << 18 |
+			HAL_HASH_ROUTING_RING_SW4 << 21;
+
+	return ring_hash_map;
+}
+
+static u32 ath11k_get_reo_dest_remap_config_ipq5018(void)
+{
+	u32 ring_hash_map;
+
+	ring_hash_map = HAL_HASH_ROUTING_RING_SW1 << 0 |
+			HAL_HASH_ROUTING_RING_SW2 << 4 |
+			HAL_HASH_ROUTING_RING_SW3 << 8 |
+			HAL_HASH_ROUTING_RING_SW4 << 12 |
+			HAL_HASH_ROUTING_RING_SW1 << 16 |
+			HAL_HASH_ROUTING_RING_SW2 << 20 |
+			HAL_HASH_ROUTING_RING_SW3 << 24 |
+			HAL_HASH_ROUTING_RING_SW4 << 28;
+
+	return ring_hash_map;
+}
+
 const struct ath11k_hw_ops ath11k_qca8074_ops = {
 	.get_hw_mac_from_pdev_id = ath11k_qca8074_hw_mac_from_pdev_id,
 	.tx_mesh_enable = ath11k_tx_mesh_enable_qca8074,
@@ -454,6 +486,7 @@ const struct ath11k_hw_ops ath11k_qca807
 	.rx_desc_get_attention = ath11k_rx_desc_get_attention_qca8074,
 	.rx_desc_get_hal_mpdu_peerid = ath11k_rx_desc_get_hal_mpdu_peerid_qca8074,
 	.rx_desc_get_hal_mpdu_len = ath11k_rx_desc_get_hal_mpdu_len_qca8074,
+	.get_reo_dest_remap_config = ath11k_get_reo_dest_remap_config_default,
 };
 
 const struct ath11k_hw_ops ath11k_qca6018_ops = {
@@ -489,6 +522,7 @@ const struct ath11k_hw_ops ath11k_qca601
 	.rx_desc_get_attention = ath11k_rx_desc_get_attention_qca8074,
 	.rx_desc_get_hal_mpdu_peerid = ath11k_rx_desc_get_hal_mpdu_peerid_qca8074,
         .rx_desc_get_hal_mpdu_len = ath11k_rx_desc_get_hal_mpdu_len_qca8074,
+	.get_reo_dest_remap_config = ath11k_get_reo_dest_remap_config_default,
 };
 
 const struct ath11k_hw_ops ath11k_qcn9000_ops = {
@@ -524,5 +558,42 @@ const struct ath11k_hw_ops ath11k_qcn900
 	.rx_desc_get_attention = ath11k_rx_desc_get_attention_qcn9000,
 	.rx_desc_get_hal_mpdu_peerid = ath11k_rx_desc_get_hal_mpdu_peerid_qcn9000,
 	.rx_desc_get_hal_mpdu_len = ath11k_rx_desc_get_hal_mpdu_len_qcn9000,
+	.get_reo_dest_remap_config = ath11k_get_reo_dest_remap_config_default,
+};
+
+const struct ath11k_hw_ops ath11k_ipq5018_ops = {
+	.get_hw_mac_from_pdev_id = ath11k_qca6018_hw_mac_from_pdev_id,
+	.tx_mesh_enable = ath11k_tx_mesh_enable_qcn9000,
+	.rx_desc_get_first_msdu = ath11k_rx_desc_get_first_msdu_qcn9000,
+	.rx_desc_get_last_msdu = ath11k_rx_desc_get_last_msdu_qcn9000,
+	.rx_desc_get_l3_pad_bytes = ath11k_rx_desc_get_l3_pad_bytes_qcn9000,
+	.rx_desc_get_hdr_status = ath11k_rx_desc_get_hdr_status_qcn9000,
+	.rx_desc_encrypt_valid = ath11k_rx_desc_encrypt_valid_qcn9000,
+	.rx_desc_get_encrypt_type = ath11k_rx_desc_get_encrypt_type_qcn9000,
+	.rx_desc_get_decap_type = ath11k_rx_desc_get_decap_type_qcn9000,
+	.rx_desc_get_mesh_ctl = ath11k_rx_desc_get_mesh_ctl_qcn9000,
+	.rx_desc_get_mpdu_seq_ctl_vld = ath11k_rx_desc_get_mpdu_seq_ctl_vld_qcn9000,
+	.rx_desc_get_mpdu_fc_valid = ath11k_rx_desc_get_mpdu_fc_valid_qcn9000,
+	.rx_desc_get_mpdu_start_seq_no = ath11k_rx_desc_get_mpdu_start_seq_no_qcn9000,
+	.rx_desc_get_msdu_len = ath11k_rx_desc_get_msdu_len_qcn9000,
+	.rx_desc_get_msdu_sgi = ath11k_rx_desc_get_msdu_sgi_qcn9000,
+	.rx_desc_get_msdu_rate_mcs = ath11k_rx_desc_get_msdu_rate_mcs_qcn9000,
+	.rx_desc_get_msdu_rx_bw = ath11k_rx_desc_get_msdu_rx_bw_qcn9000,
+	.rx_desc_get_msdu_freq = ath11k_rx_desc_get_msdu_freq_qcn9000,
+	.rx_desc_get_msdu_pkt_type = ath11k_rx_desc_get_msdu_pkt_type_qcn9000,
+	.rx_desc_get_msdu_nss = ath11k_rx_desc_get_msdu_nss_qcn9000,
+	.rx_desc_get_mpdu_tid = ath11k_rx_desc_get_mpdu_tid_qcn9000,
+	.rx_desc_get_mpdu_peer_id = ath11k_rx_desc_get_mpdu_peer_id_qcn9000,
+	.rx_desc_copy_attn_end_tlv = ath11k_rx_desc_copy_attn_end_qcn9000,
+	.rx_desc_get_mpdu_start_tag = ath11k_rx_desc_get_mpdu_start_tag_qcn9000,
+	.rx_desc_get_mpdu_ppdu_id = ath11k_rx_desc_get_mpdu_ppdu_id_qcn9000,
+	.rx_desc_get_mpdu_addr2_valid = ath11k_rx_desc_get_mpdu_addr2_valid_qcn9000,
+	.rx_desc_get_mpdu_addr2 = ath11k_rx_desc_get_mpdu_addr2_qcn9000,
+	.rx_desc_msdu_da_mcbc = ath11k_rx_desc_msdu_da_mcbc_qcn9000,
+	.rx_desc_set_msdu_len = ath11k_rx_desc_set_msdu_len_qcn9000,
+	.rx_desc_get_attention = ath11k_rx_desc_get_attention_qcn9000,
+	.rx_desc_get_hal_mpdu_peerid = ath11k_rx_desc_get_hal_mpdu_peerid_qcn9000,
+	.rx_desc_get_hal_mpdu_len = ath11k_rx_desc_get_hal_mpdu_len_qcn9000,
+	.get_reo_dest_remap_config = ath11k_get_reo_dest_remap_config_ipq5018,
 };
 
--- a/drivers/net/wireless/ath/ath11k/hw.h
+++ b/drivers/net/wireless/ath/ath11k/hw.h
@@ -83,6 +83,11 @@
 #define QCN90XX_MAX_BOARD_DATA_SZ	(256 * 1024)
 #define QCN90XX_MAX_CAL_DATA_SZ		QCN90XX_MAX_BOARD_DATA_SZ
 
+/* IPQ5018 definitions */
+#define IPQ5018_FW_DIR			ATH11K_FW_DIR "/IPQ5018/hw1.0"
+#define IPQ5018_MAX_BOARD_DATA_SZ	(256 * 1024)
+#define IPQ5018_MAX_CAL_DATA_SZ		IPQ5018_MAX_BOARD_DATA_SZ
+
 #define QCA6x90_FW_DIR			"QCA6x90"
 #define QCA6x90_MAX_BOARD_DATA_SZ	(256 * 1024)
 
@@ -158,6 +163,7 @@ struct ath11k_hw_ops {
 	struct rx_attention *(*rx_desc_get_attention)(struct hal_rx_desc *desc);
 	u16 (*rx_desc_get_hal_mpdu_peerid)(struct hal_rx_mpdu_info *mpdu_info);
 	u32 (*rx_desc_get_hal_mpdu_len)(struct hal_rx_mpdu_info *mpdu_info);
+	u32 (*get_reo_dest_remap_config)(void);
 };
 
 struct ath11k_hw_params {
@@ -268,5 +274,6 @@ extern const struct ath11k_hw_regs qcn90
 extern const struct ath11k_hw_ops ath11k_qca8074_ops;
 extern const struct ath11k_hw_ops ath11k_qca6018_ops;
 extern const struct ath11k_hw_ops ath11k_qcn9000_ops;
+extern const struct ath11k_hw_ops ath11k_ipq5018_ops;
 
 #endif
--- a/drivers/net/wireless/ath/ath11k/qmi.h
+++ b/drivers/net/wireless/ath/ath11k/qmi.h
@@ -29,6 +29,7 @@
 #define ATH11K_QMI_CALDB_SIZE_IPQ807X			0x480000
 #define ATH11K_QMI_HOST_FWADDR_SZ_QCN9000		0x2F00000
 #define ATH11K_QMI_CALDB_SIZE_QCN9000		0x800000
+#define ATH11K_QMI_CALDB_SIZE_IPQ5018		0x200000
 #define ATH11K_QMI_DEFAULT_CAL_FILE_NAME	"caldata.bin"
 #define ATH11K_QMI_DEF_CAL_FILE_PREFIX		"caldata_"
 #define ATH11K_QMI_DEF_CAL_FILE_SUFFIX		".bin"
@@ -38,6 +39,8 @@
 #define FW_ID_BASE 7
 #define ATH11K_QMI_IPQ8074_M3_DUMP_ADDRESS	0x51000000
 #define ATH11K_QMI_IPQ6018_M3_DUMP_ADDRESS	0x50100000
+#define ATH11K_QMI_IPQ5018_M3_DUMP_ADDRESS	0x4C800000
+
 #define ATH11K_QMI_M3_DUMP_SIZE			0x100000
 
 #define QMI_WLFW_REQUEST_MEM_IND_V01		0x0035
