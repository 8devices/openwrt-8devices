From b3213496ab8688c6ef6f92be1dce0d1ed32ca9e3 Mon Sep 17 00:00:00 2001
From: Ramya Gnanasekar <rgnanase@codeaurora.org>
Date: Thu, 9 Jul 2020 10:48:15 +0530
Subject: [PATCH] ath11k: add support to collect q6mem dump

q6mem dump is not collected when fw crashes due to system restart.
Implemented a knob in debugfs to enable/disable fw recovery from
qsdk to collect q6mem dump .

root@OpenWrt:~# echo 1 > /sys/kernel/debug/ath11k/ipq6018_2/set_fw_recovery
root@OpenWrt:~# cat /sys/kernel/debug/ath11k/ipq6018_2/set_fw_recovery
1

Signed-off-by: Ramya Gnanasekar <rgnanase@codeaurora.org>
---
 drivers/net/wireless/ath/ath11k/core.c  |  3 ++-
 drivers/net/wireless/ath/ath11k/core.h  |  1 +
 drivers/net/wireless/ath/ath11k/debug.c | 46 +++++++++++++++++++++++++++++++++
 3 files changed, 49 insertions(+), 1 deletion(-)

--- a/drivers/net/wireless/ath/ath11k/core.c
+++ b/drivers/net/wireless/ath/ath11k/core.c
@@ -618,7 +618,8 @@ int ath11k_core_ssr_notifier_cb(struct n
 	/* TODO Add more driver stats */
 
 	/* Crash the system once all the stats are dumped */
-	BUG_ON(1);
+	if(!qmi->ab->fw_recovery_support)
+		BUG_ON(1);
 
 	return 0;
 }
--- a/drivers/net/wireless/ath/ath11k/core.h
+++ b/drivers/net/wireless/ath/ath11k/core.h
@@ -838,6 +838,7 @@ struct ath11k_base {
 	const struct hal_srng_regs *srng_regs;
 	u32 sw_pdev_id_map[MAX_RADIOS];
 	u32 hw_pdev_id_map[MAX_RADIOS];
+	bool fw_recovery_support;
 	/* must be last */
 	u8 drv_priv[0] __aligned(sizeof(void *));
 };
@@ -986,6 +987,7 @@ void ath11k_core_free_bdf(struct ath11k_
 
 void ath11k_core_halt(struct ath11k *ar);
 int ath11k_core_pre_init(struct ath11k_base *ab);
+void ath11k_core_dump_bp_stats(struct ath11k_base *ab);
 void ath11k_coredump_qdss_dump(struct ath11k_base *ab,
 			       struct ath11k_qmi_event_qdss_trace_save_data *event_data);
 
--- a/drivers/net/wireless/ath/ath11k/debug.c
+++ b/drivers/net/wireless/ath/ath11k/debug.c
@@ -1204,6 +1204,48 @@ static const struct file_operations fops
 	.llseek = default_llseek,
 };
 
+static ssize_t ath11k_debug_write_fw_recovery(struct file *file,
+                                              char __user *user_buf,
+                                              size_t count, loff_t *ppos)
+{
+       struct ath11k_base *ab = file->private_data;
+       bool enable;
+       int ret;
+
+       if (kstrtobool_from_user(user_buf, count, &enable))
+                return -EINVAL;
+
+       if (enable == ab->fw_recovery_support) {
+                ret = count;
+                goto exit;
+       }
+
+       ab->fw_recovery_support = enable;
+       ret = count;
+
+exit:
+       return ret;
+}
+
+static ssize_t ath11k_debug_read_fw_recovery(struct file *file,
+                                          char __user *user_buf,
+                                          size_t count, loff_t *ppos)
+{
+       struct ath11k_base *ab = file->private_data;
+       char buf[32];
+       size_t len;
+
+       len = scnprintf(buf, sizeof(buf), "%u\n", ab->fw_recovery_support);
+
+       return simple_read_from_buffer(user_buf, count, ppos, buf, len);
+}
+
+static const struct file_operations fops_fw_recovery = {
+       .read = ath11k_debug_read_fw_recovery,
+       .write = ath11k_debug_write_fw_recovery,
+       .open = simple_open,
+};
+
 int ath11k_debug_pdev_create(struct ath11k_base *ab)
 {
 	char soc_name[11] = {0};
@@ -1231,6 +1273,10 @@ int ath11k_debug_pdev_create(struct ath1
 	debugfs_create_file("soc_dp_stats", 0600, ab->debugfs_soc, ab,
 			    &fops_soc_dp_stats);
 
+	debugfs_create_file("set_fw_recovery", 0600, ab->debugfs_soc, ab,
+			    &fops_fw_recovery);
+
+
 	return 0;
 }
 
--- a/drivers/net/wireless/ath/ath11k/pci.c
+++ b/drivers/net/wireless/ath/ath11k/pci.c
@@ -1213,6 +1213,8 @@ static int ath11k_pci_probe(struct pci_d
 		ab->fixed_mem_region = false;
 	}
 
+	ab->fw_recovery_support = false;
+
 	spin_lock_init(&ar_pci->window_lock);
 
 	ret = ath11k_pci_claim(ar_pci, pdev);
--- a/drivers/net/wireless/ath/ath11k/coredump.c
+++ b/drivers/net/wireless/ath/ath11k/coredump.c
@@ -15,6 +15,9 @@
 #include "pci.h"
 #include "debug.h"
 
+struct ath11k_coredump_segment_info ath11k_coredump_seg_info;
+EXPORT_SYMBOL(ath11k_coredump_seg_info);
+
 static void *ath11k_coredump_find_segment(loff_t user_offset,
 					  struct ath11k_dump_segment *segment,
 					  int phnum, size_t *data_left)
@@ -177,9 +180,10 @@ void ath11k_coredump_download_rddm(struc
 		seg_info->len = PAGE_ALIGN(seg_sz);
 		seg_info->addr = fw_img->mhi_buf[i].dma_addr;
 		seg_info->vaddr = fw_img->mhi_buf[i].buf;
-		ath11k_info(ab, "seg vaddr is %px len is 0x%x\n",
-					seg_info->vaddr, seg_info->len);
 		seg_info->type = ATH11K_FW_CRASH_PAGING_DATA;
+		ath11k_info(ab, "seg vaddr is %px len is 0x%x type %d\n",
+			    seg_info->vaddr, seg_info->len, seg_info->type);
+
 		seg_info++;
 	}
 
@@ -188,8 +192,8 @@ void ath11k_coredump_download_rddm(struc
 		seg_info->len = PAGE_ALIGN(seg_sz);
 		seg_info->addr = rddm_img->mhi_buf[i].dma_addr;
 		seg_info->vaddr = rddm_img->mhi_buf[i].buf;
-		ath11k_info(ab, "seg vaddr is %px len is 0x%x\n",
-					seg_info->vaddr, seg_info->len);
+		ath11k_info(ab, "seg vaddr is %px len is 0x%x type %d\n",
+			    seg_info->vaddr, seg_info->len, seg_info->type);
 		seg_info->type = ATH11K_FW_CRASH_RDDM_DATA;
 		seg_info++;
 	}
@@ -200,8 +204,8 @@ void ath11k_coredump_download_rddm(struc
 		seg_info->len = ab->qmi.target_mem[i].size;
 		seg_info->addr = ab->qmi.target_mem[i].paddr;
 		seg_info->vaddr = ab->qmi.target_mem[i].vaddr;
-		ath11k_info(ab, "seg vaddr is %px len is 0x%x\n",
-					seg_info->vaddr, seg_info->len);
+		ath11k_info(ab, "seg vaddr is %px len is 0x%x type %d\n",
+			    seg_info->vaddr, seg_info->len, seg_info->type);
 		seg_info->type = ATH11K_FW_REMOTE_MEM_DATA;
 		seg_info++;
 	}
@@ -210,13 +214,28 @@ void ath11k_coredump_download_rddm(struc
 		seg_info->len = ab->qmi.qdss_mem[0].size;
 		seg_info->addr = ab->qmi.qdss_mem[0].paddr;
 		seg_info->vaddr = ab->qmi.qdss_mem[0].vaddr;
-		ath11k_dbg(ab, ATH11K_DBG_QMI, "seg vaddr is %px len is 0x%x\n",
-			   seg_info->vaddr, seg_info->len);
+		ath11k_dbg(ab, ATH11K_DBG_QMI, "seg vaddr is %px len is 0x%x type %d\n",
+			   seg_info->vaddr, seg_info->len, seg_info->type);
 		seg_info->type = ATH11K_FW_QDSS_DATA;
 		seg_info++;
 	}
 
-	ath11k_coredump_build_inline(ar_pci, segment, num_seg);
+	/* Crash the system once all the stats are dumped */
+	if(!ab->fw_recovery_support) {
+		ath11k_core_dump_bp_stats(ab);
+		ath11k_hal_dump_srng_stats(ab);
+
+		ath11k_coredump_seg_info.chip_id = ar_pci->dev_id;
+		ath11k_coredump_seg_info.qrtr_id = ar_pci->ab->qmi.service_ins_id;
+		ath11k_coredump_seg_info.bus_id = pci_domain_nr(ar_pci->pdev->bus);
+		ath11k_coredump_seg_info.num_seg = num_seg;
+		ath11k_coredump_seg_info.seg = segment;
+
+		BUG_ON(1);
+	} else {
+		ath11k_coredump_build_inline(ar_pci, segment, num_seg);
+	}
+
 	vfree(segment);
 }
 
--- a/drivers/net/wireless/ath/ath11k/coredump.h
+++ b/drivers/net/wireless/ath/ath11k/coredump.h
@@ -58,6 +58,13 @@ struct ath11k_coredump_state {
 	u32 num_seg;
 };
 
+struct ath11k_coredump_segment_info {
+	u32 chip_id;
+	u32 qrtr_id;
+	u32 num_seg;
+	struct ath11k_dump_segment *seg;
+	u8 bus_id;
+}; 
 
 void ath11k_coredump_download_rddm(struct ath11k_base *ab);
 
