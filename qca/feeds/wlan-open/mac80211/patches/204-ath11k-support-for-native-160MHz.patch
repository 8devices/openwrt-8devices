From 8cdb5b7216f6b7f022fb64d37db9e7dcd0e8dbcf Mon Sep 17 00:00:00 2001
From: P Praneesh <ppranees@codeaurora.org>
Date: Tue, 11 Aug 2020 21:36:57 +0530
Subject: [PATCH] ath11k: Add native 160MHz support for qcn9000

nss_ratio_enabled flag is added to indicate firmware
supports sending NSS ratio information from firmware
as a part of service ready ext event. Extract this
NSS ratio info  from service ready ext event and
save this information in ath11k_pdev_cap to calculate
NSS ratio.

Current firmware configurations support two types
of NSS ratio which is WMI_NSS_RATIO_1_NSS for qcn9000
and WMI_NSS_RATIO_1BY2_NSS for ipq8074. Based on this
two configuration, max supported NSS getting calculated.

Tested on: QCN9000

Signed-off-by: P Praneesh <ppranees@codeaurora.org>
---
 drivers/net/wireless/ath/ath11k/core.h |  2 +
 drivers/net/wireless/ath/ath11k/mac.c  | 75 +++++++++++++++++++++++++---------
 drivers/net/wireless/ath/ath11k/mac.h  |  3 ++
 drivers/net/wireless/ath/ath11k/wmi.c  | 18 ++++++--
 drivers/net/wireless/ath/ath11k/wmi.h  | 30 ++++++++++++++
 5 files changed, 106 insertions(+), 22 deletions(-)

--- a/drivers/net/wireless/ath/ath11k/mac.c
+++ b/drivers/net/wireless/ath/ath11k/mac.c
@@ -5232,6 +5232,12 @@ ath11k_create_vht_cap(struct ath11k *ar,
 	vht_cap.vht_mcs.rx_mcs_map = cpu_to_le16(rxmcs_map);
 	vht_cap.vht_mcs.tx_mcs_map = cpu_to_le16(txmcs_map);
 
+	/* Check if the HW supports 1:1 NSS ratio and reset
+	 * EXT NSS BW Support field to 0 to indicate 1:1 ratio
+	 */
+	if (ar->pdev->cap.nss_ratio_info == WMI_NSS_RATIO_1_NSS)
+		vht_cap.cap &= ~IEEE80211_VHT_CAP_EXT_NSS_BW_MASK;
+
 	return vht_cap;
 }
 
@@ -5415,11 +5421,12 @@ static void ath11k_mac_set_hemcsmap(stru
 				    struct ath11k_pdev_cap *cap,
 				    struct ieee80211_sta_he_cap * he_cap)
 {
-	u16 txmcs_map, rxmcs_map;
+	u16 txmcs_map = 0, rxmcs_map = 0;
+	u16 txmcs_map_160 = 0, rxmcs_map_160 = 0;
 	u32 i = 0;
+	u8 maxtxnss_160 = ath11k_get_nss_160mhz(ar, ar->num_tx_chains);
+	u8 maxrxnss_160 = ath11k_get_nss_160mhz(ar, ar->num_rx_chains);
 
-	rxmcs_map = 0;
-	txmcs_map = 0;
 	for (i = 0; i < 8; i++) {
 		if (i < ar->num_tx_chains &&
 		    (ar->cfg_tx_chainmask >> cap->tx_chain_mask_shift) & BIT(i))
@@ -5432,19 +5439,31 @@ static void ath11k_mac_set_hemcsmap(stru
 			rxmcs_map |= IEEE80211_HE_MCS_SUPPORT_0_11 << (i * 2);
 		else
 			rxmcs_map |= IEEE80211_HE_MCS_NOT_SUPPORTED << (i * 2);
+
+		if (i < maxtxnss_160 &&
+		    (ar->cfg_tx_chainmask >> cap->tx_chain_mask_shift) & BIT(i))
+			txmcs_map_160 |= IEEE80211_HE_MCS_SUPPORT_0_11 << (i * 2);
+		else
+			txmcs_map_160 |= IEEE80211_HE_MCS_NOT_SUPPORTED << (i * 2);
+
+		if (i < maxrxnss_160 &&
+		    (ar->cfg_tx_chainmask >> cap->tx_chain_mask_shift) & BIT(i))
+			rxmcs_map_160 |= IEEE80211_HE_MCS_SUPPORT_0_11 << (i * 2);
+		else
+			rxmcs_map_160 |= IEEE80211_HE_MCS_NOT_SUPPORTED << (i * 2);
 	}
 	he_cap->he_mcs_nss_supp.rx_mcs_80 =
 		cpu_to_le16(rxmcs_map & 0xffff);
 	he_cap->he_mcs_nss_supp.tx_mcs_80 =
 		cpu_to_le16(txmcs_map & 0xffff);
 	he_cap->he_mcs_nss_supp.rx_mcs_160 =
-		cpu_to_le16(rxmcs_map & 0xffff);
+		cpu_to_le16(rxmcs_map_160 & 0xffff);
 	he_cap->he_mcs_nss_supp.tx_mcs_160 =
-		cpu_to_le16(txmcs_map & 0xffff);
+		cpu_to_le16(txmcs_map_160 & 0xffff);
 	he_cap->he_mcs_nss_supp.rx_mcs_80p80 =
-		cpu_to_le16(rxmcs_map & 0xffff);
+		cpu_to_le16(rxmcs_map_160 & 0xffff);
 	he_cap->he_mcs_nss_supp.tx_mcs_80p80 =
-		cpu_to_le16(txmcs_map & 0xffff);
+		cpu_to_le16(txmcs_map_160 & 0xffff);
 }
 
 static int ath11k_mac_copy_he_cap(struct ath11k *ar,
