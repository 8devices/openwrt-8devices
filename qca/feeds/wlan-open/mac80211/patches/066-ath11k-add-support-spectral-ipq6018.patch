--- a/drivers/net/wireless/ath/ath11k/core.c
+++ b/drivers/net/wireless/ath/ath11k/core.c
@@ -33,6 +33,7 @@ static const struct ath11k_hw_params ath
 			.board_size = 256 * 1024,
 			.cal_size = 256 * 1024,
 		},
+		.spectral_fft_sz = 2,
 		.max_radios = 3,
 		.bdf_addr = 0x4B0C0000,
 		.hw_ops = &ipq8074_ops,
@@ -62,6 +63,7 @@ static const struct ath11k_hw_params ath
 			.board_size = 256 * 1024,
 			.cal_size = 256 * 1024,
 		},
+		.spectral_fft_sz = 4,
 		.max_radios = 2,
 		.bdf_addr = 0x4ABC0000,
 		.hw_ops = &ipq6018_ops,
--- a/drivers/net/wireless/ath/ath11k/hw.h
+++ b/drivers/net/wireless/ath/ath11k/hw.h
@@ -127,6 +127,7 @@ struct ath11k_hw_params {
 		size_t board_size;
 		size_t cal_size;
 	} fw;
+	u8 spectral_fft_sz;
 
 	const struct ath11k_hw_ops *hw_ops;
 	const struct ath11k_hw_ring_mask *ring_mask;
--- a/drivers/net/wireless/ath/ath11k/spectral.c
+++ b/drivers/net/wireless/ath/ath11k/spectral.c
@@ -570,6 +570,18 @@ static void ath11k_spectral_parse_16bit_
 	}
 }
 
+static void ath11k_spectral_parse_32bit_fft(u8 *outbins, u8 *inbins, int num_bins)
+{
+	int i;
+	__le32 *data = (__le32 *)inbins;
+
+	i = 0;
+	while (i < num_bins) {
+		outbins[i] = (__le32_to_cpu(data[i])) & ATH11K_SPECTRAL_SAMPLE_FFT_BIN_MASK;
+		i++;
+	}
+}
+
 static
 int ath11k_spectral_process_fft(struct ath11k *ar,
 				struct ath11k_spectral_summary_report *summary,
@@ -588,6 +600,12 @@ int ath11k_spectral_process_fft(struct a
 
 	lockdep_assert_held(&ar->spectral.lock);
 
+	if (!ab->hw_params.spectral_fft_sz) {
+		ath11k_warn(ab, "invalid bin size type for hw rev %d\n",
+			    ab->hw_rev);
+		return -EINVAL;
+	}
+
 	tlv = (struct spectral_tlv *)data;
 	tlv_len = FIELD_GET(SPECTRAL_TLV_HDR_LEN, __le32_to_cpu(tlv->header));
 	/* convert Dword into bytes */
@@ -649,9 +667,21 @@ int ath11k_spectral_process_fft(struct a
 	freq = summary->meta.freq2;
 	fft_sample->freq2 = __cpu_to_be16(freq);
 
-	ath11k_spectral_parse_16bit_fft(fft_sample->data,
-					fft_report->bins,
-					num_bins);
+	switch (ab->hw_params.spectral_fft_sz) {
+	case 4:
+		ath11k_spectral_parse_32bit_fft(fft_sample->data,
+						fft_report->bins,
+						num_bins);
+		break;
+	case 2:
+		ath11k_spectral_parse_16bit_fft(fft_sample->data,
+						fft_report->bins,
+						num_bins);
+		break;
+	default:
+		ath11k_warn(ab, "unsupported fft size %u\n", ab->hw_params.spectral_fft_sz);
+		return -EOPNOTSUPP;
+	}
 
 	fft_sample->max_exp = ath11k_spectral_get_max_exp(fft_sample->max_index,
 							  search.peak_mag,
