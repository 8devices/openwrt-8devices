From 9678d333617314d470da5cbd08c0c3efbaec5353 Mon Sep 17 00:00:00 2001
From: Carl Huang <cjhuang@codeaurora.org>
Date: Tue, 30 Jun 2020 23:35:53 +0530
Subject: [PATCH] ath11k: free qmi allocated memory

Qmi allocated dma memory needs to be freed whenever necessary,
such as rmmod, qmi restart. Otherwise memory leak occurs.

Signed-off-by: Carl Huang <cjhuang@codeaurora.org>
Signed-off-by: P Praneesh <ppranees@codeaurora.org>
---
 drivers/net/wireless/ath/ath11k/core.c |  1 +
 drivers/net/wireless/ath/ath11k/qmi.c  | 59 ++++++++++++++++++++++++++++------
 drivers/net/wireless/ath/ath11k/qmi.h  |  2 +-
 3 files changed, 52 insertions(+), 10 deletions(-)

diff --git a/drivers/net/wireless/ath/ath11k/core.c b/drivers/net/wireless/ath/ath11k/core.c
index 380f23d..3abeafa 100644
--- a/drivers/net/wireless/ath/ath11k/core.c
+++ b/drivers/net/wireless/ath/ath11k/core.c
@@ -412,6 +412,7 @@ static void ath11k_core_soc_destroy(struct ath11k_base *ab)
 	ath11k_dp_free(ab);
 	ath11k_reg_free(ab);
 	ath11k_qmi_deinit_service(ab);
+	ath11k_qmi_free_resource(ab);
 }
 
 static int ath11k_core_pdev_create(struct ath11k_base *ab)
diff --git a/drivers/net/wireless/ath/ath11k/qmi.c b/drivers/net/wireless/ath/ath11k/qmi.c
index 7969782..282bffb 100644
--- a/drivers/net/wireless/ath/ath11k/qmi.c
+++ b/drivers/net/wireless/ath/ath11k/qmi.c
@@ -2367,20 +2367,43 @@ out:
 	return ret;
 }
 
+static void ath11k_qmi_free_target_mem_chunk(struct ath11k_base *ab)
+{
+	int i;
+
+	if (ab->fixed_mem_region)
+		return;
+
+	for (i = 0; i < ab->qmi.mem_seg_count; i++) {
+		if (!ab->qmi.target_mem[i].vaddr)
+			continue;
+
+		dma_free_coherent(ab->dev,
+				  ab->qmi.target_mem[i].size,
+				  ab->qmi.target_mem[i].vaddr,
+				  ab->qmi.target_mem[i].paddr);
+		ab->qmi.target_mem[i].vaddr = NULL;
+	}
+}
+
 static int ath11k_qmi_alloc_target_mem_chunk(struct ath11k_base *ab)
 {
-	int i, idx;
+	int i;
+	struct target_mem_chunk *chunk;
 
-	for (i = 0, idx = 0; i < ab->qmi.mem_seg_count; i++) {
-		ab->qmi.target_mem[i].vaddr = dma_alloc_coherent(ab->dev, ab->qmi.target_mem[i].size,
-						&ab->qmi.target_mem[i].paddr, GFP_KERNEL);
-		if (!ab->qmi.target_mem[idx].vaddr) {
-			ath11k_err(ab, "failed to allocate memory for FW, size: 0x%x, type: %u\n",
-				    ab->qmi.target_mem[i].size, ab->qmi.target_mem[i].type);
+	for (i = 0; i < ab->qmi.mem_seg_count; i++) {
+		chunk = &ab->qmi.target_mem[i];
+		chunk->vaddr = dma_alloc_coherent(ab->dev,
+						  chunk->size,
+						  &chunk->paddr,
+						  GFP_KERNEL);
+
+		if (!chunk->vaddr) {
+			ath11k_err(ab, "failed to alloc memory, size: 0x%x,type: %u\n",
+				   chunk->size,
+				   chunk->type);
 			return -EINVAL;
 		}
-		ab->qmi.target_mem[i].size = ab->qmi.target_mem[i].size;
-		ab->qmi.target_mem[i].type = ab->qmi.target_mem[i].type;
 	}
 
 	return 0;
@@ -2721,6 +2744,18 @@ out:
 	return 0;
 }
 
+static void ath11k_free_m3_bin(struct ath11k_base *ab)
+{
+	struct m3_mem_region *m3_mem = &ab->qmi.m3_mem;
+
+	if (!ab->m3_fw_support || !m3_mem->vaddr)
+		return;
+
+	dma_free_coherent(ab->dev, m3_mem->size,
+			  m3_mem->vaddr, m3_mem->paddr);
+	m3_mem->vaddr = NULL;
+}
+
 static int ath11k_load_m3_bin(struct ath11k_base *ab)
 {
 	struct m3_mem_region *m3_mem = &ab->qmi.m3_mem;
@@ -3511,6 +3546,12 @@ int ath11k_qmi_init_service(struct ath11k_base *ab)
 	return ret;
 }
 
+void ath11k_qmi_free_resource(struct ath11k_base *ab)
+{
+	ath11k_qmi_free_target_mem_chunk(ab);
+	ath11k_free_m3_bin(ab);
+}
+
 void ath11k_qmi_deinit_service(struct ath11k_base *ab)
 {
 	qmi_handle_release(&ab->qmi.handle);
diff --git a/drivers/net/wireless/ath/ath11k/qmi.h b/drivers/net/wireless/ath/ath11k/qmi.h
index 9226328..9327260 100644
--- a/drivers/net/wireless/ath/ath11k/qmi.h
+++ b/drivers/net/wireless/ath/ath11k/qmi.h
@@ -603,6 +603,6 @@ int wlfw_send_qdss_trace_config_download_req(struct ath11k_base *ab,
 int ath11k_send_qdss_trace_mode_req(struct ath11k_base *ab,
 		enum wlfw_qdss_trace_mode_enum_v01 mode);
 int ath11k_qmi_fwreset_from_cold_boot(struct ath11k_base *ab);
-
+void ath11k_qmi_free_resource(struct ath11k_base *ab);
 
 #endif
-- 
2.7.4

