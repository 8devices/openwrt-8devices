From a6d4a6e80806259ffb4eeabe046440d44423b99c Mon Sep 17 00:00:00 2001
From: Karthikeyan Periyasamy <quic_periyasa@quicinc.com>
Date: Wed, 2 Feb 2022 08:47:50 +0530
Subject: [PATCH] ath11k: add tbl lock

Signed-off-by: Karthikeyan Periyasamy <quic_periyasa@quicinc.com>
---
 drivers/net/wireless/ath/ath11k/core.c |  1 +
 drivers/net/wireless/ath/ath11k/core.h |  8 ++---
 drivers/net/wireless/ath/ath11k/mac.c  |  4 +++
 drivers/net/wireless/ath/ath11k/peer.c | 60 ++++++++++++++++++++++++++++++----
 4 files changed, 62 insertions(+), 11 deletions(-)

--- a/drivers/net/wireless/ath/ath11k/core.c
+++ b/drivers/net/wireless/ath/ath11k/core.c
@@ -1894,6 +1894,7 @@ struct ath11k_base *ath11k_core_alloc(st
 		goto err_free_wq;
 
 	mutex_init(&ab->core_lock);
+	mutex_init(&ab->tbl_mtx_lock);
 	mutex_init(&ab->base_ast_lock);
 	spin_lock_init(&ab->base_lock);
 	init_completion(&ab->reset_complete);
--- a/drivers/net/wireless/ath/ath11k/core.h
+++ b/drivers/net/wireless/ath/ath11k/core.h
@@ -1095,10 +1095,10 @@ struct ath11k_base {
 	struct ath11k_hal_reg_capabilities_ext hal_reg_cap[MAX_RADIOS];
 	unsigned long long free_vdev_map;
 
-	/*
-	 * The rhashtable containing struct ath11k_peer keyed by mac addr
-	 * protected under ab->base_lock spin lock
-	 */
+	/* To synchronize rhash tbl write operation */
+	struct mutex tbl_mtx_lock;
+
+	/* The rhashtable containing struct ath11k_peer keyed by mac addr */
 	struct rhashtable *rhead_peer_addr;
 	struct rhashtable_params rhash_peer_addr_param;
 
--- a/drivers/net/wireless/ath/ath11k/mac.c
+++ b/drivers/net/wireless/ath/ath11k/mac.c
@@ -948,6 +948,7 @@ void ath11k_mac_peer_cleanup_all(struct
 
 	lockdep_assert_held(&ar->conf_mutex);
 
+	mutex_lock(&ab->tbl_mtx_lock);
 	spin_lock_bh(&ab->base_lock);
 	list_for_each_entry_safe(peer, tmp, &ab->peers, list) {
 		ath11k_peer_rx_tid_cleanup(ar, peer);
@@ -956,6 +957,7 @@ void ath11k_mac_peer_cleanup_all(struct
 		kfree(peer);
 	}
 	spin_unlock_bh(&ab->base_lock);
+	mutex_unlock(&ab->tbl_mtx_lock);
 
 	ar->num_peers = 0;
 	ar->num_stations = 0;
@@ -5739,6 +5741,7 @@ static int ath11k_mac_op_sta_state(struc
 				   sta->addr, arvif->vdev_id);
 
 		ath11k_mac_dec_num_stations(arvif, sta);
+		mutex_lock(&ar->ab->tbl_mtx_lock);
 		spin_lock_bh(&ar->ab->base_lock);
 		peer = ath11k_peer_find(ar->ab, arvif->vdev_id, sta->addr);
 		if (peer && peer->sta == sta) {
@@ -5751,6 +5754,7 @@ static int ath11k_mac_op_sta_state(struc
 			ar->num_peers--;
 		}
 		spin_unlock_bh(&ar->ab->base_lock);
+		mutex_unlock(&ar->ab->tbl_mtx_lock);
 
 free:
 		kfree(arsta->tx_stats);
--- a/drivers/net/wireless/ath/ath11k/peer.c
+++ b/drivers/net/wireless/ath/ath11k/peer.c
@@ -8,6 +8,23 @@
 #include "debug.h"
 #include "nss.h"
 
+static struct ath11k_peer *ath11k_peer_find_list_by_id(struct ath11k_base *ab,
+						       int peer_id)
+{
+	struct ath11k_peer *peer;
+
+	lockdep_assert_held(&ab->base_lock);
+
+	list_for_each_entry(peer, &ab->peers, list) {
+		if (peer->peer_id != peer_id)
+			continue;
+
+		return peer;
+	}
+
+	return NULL;
+}
+
 struct ath11k_peer *ath11k_peer_find(struct ath11k_base *ab, int vdev_id,
 				     const u8 *addr)
 {
@@ -433,7 +450,7 @@ void ath11k_peer_unmap_event(struct ath1
 
 	spin_lock_bh(&ab->base_lock);
 
-	peer = ath11k_peer_find_by_id(ab, peer_id);
+	peer = ath11k_peer_find_list_by_id(ab, peer_id);
 	if (!peer) {
 		ath11k_warn(ab, "peer-unmap-event: unknown peer id %d\n",
 			    peer_id);
@@ -444,7 +461,6 @@ void ath11k_peer_unmap_event(struct ath1
 		ath11k_dbg(ab, ATH11K_DBG_PEER, "peer unmap vdev %d peer %pM id %d\n",
 			   peer->vdev_id, peer->addr, peer_id);
 
-	ath11k_peer_rhash_delete(ab, peer);
 	list_del(&peer->list);
 	kfree(peer);
 	wake_up(&ab->peer_mapping_wq);
@@ -461,7 +477,7 @@ void ath11k_peer_unmap_v2_event(struct a
 
 	spin_lock_bh(&ab->base_lock);
 
-	peer = ath11k_peer_find_by_id(ab, peer_id);
+	peer = ath11k_peer_find_list_by_id(ab, peer_id);
 	if (!peer) {
 		ath11k_warn(ab, "peer-unmap-event: unknown peer id %d\n",
 			    peer_id);
@@ -498,7 +514,6 @@ void ath11k_peer_unmap_v2_event(struct a
 #endif
 free_peer:
 	rcu_read_unlock();
-	ath11k_peer_rhash_delete(ab, peer);
 	list_del(&peer->list);
 	kfree(peer);
 	wake_up(&ab->peer_mapping_wq);
@@ -636,6 +651,7 @@ static inline int ath11k_peer_rhash_inse
 	struct ath11k_peer *tmp;
 
 	lockdep_assert_held(&ab->base_lock);
+	lockdep_assert_held(&ab->tbl_mtx_lock);
 
 	tmp = rhashtable_lookup_get_insert_fast(rtbl, rhead, *params);
 
@@ -653,6 +669,7 @@ static inline int ath11k_peer_rhash_remo
 					   struct rhashtable_params *params)
 {
 	lockdep_assert_held(&ab->base_lock);
+	lockdep_assert_held(&ab->tbl_mtx_lock);
 
 	return rhashtable_remove_fast(rtbl, rhead, *params);
 }
@@ -662,6 +679,7 @@ static int ath11k_peer_rhash_add(struct
 	int ret;
 
 	lockdep_assert_held(&ab->base_lock);
+	lockdep_assert_held(&ab->tbl_mtx_lock);
 
 	if (!ab->rhead_peer_id || !ab->rhead_peer_addr)
 		return -EPERM;
@@ -702,6 +720,7 @@ void ath11k_peer_cleanup(struct ath11k *
 #ifdef CPTCFG_ATH11K_NSS_SUPPORT
 	mutex_lock(&ab->base_ast_lock);
 #endif
+	mutex_lock(&ab->tbl_mtx_lock);
 	spin_lock_bh(&ab->base_lock);
 	list_for_each_entry_safe(peer, tmp_peer, &ab->peers, list) {
 		if (peer->vdev_id != vdev_id)
@@ -728,6 +747,7 @@ void ath11k_peer_cleanup(struct ath11k *
 	}
 
 	spin_unlock_bh(&ab->base_lock);
+	mutex_unlock(&ab->tbl_mtx_lock);
 #ifdef CPTCFG_ATH11K_NSS_SUPPORT
 	mutex_unlock(&ab->base_ast_lock);
 #endif
@@ -763,8 +783,8 @@ int ath11k_wait_for_peer_delete_done(str
 int ath11k_peer_delete(struct ath11k *ar, u32 vdev_id, u8 *addr)
 {
 	int ret;
-#ifdef CPTCFG_ATH11K_NSS_SUPPORT
 	struct ath11k_peer *peer;
+#ifdef CPTCFG_ATH11K_NSS_SUPPORT
 	struct ath11k_ast_entry *ast_entry, *tmp_ast;
 #endif
 	lockdep_assert_held(&ar->conf_mutex);
@@ -774,10 +794,13 @@ int ath11k_peer_delete(struct ath11k *ar
 	ath11k_nss_peer_delete(ar->ab, vdev_id, addr);
 #ifdef CPTCFG_ATH11K_NSS_SUPPORT
 	mutex_lock(&ar->ab->base_ast_lock);
+#endif
+	mutex_lock(&ar->ab->tbl_mtx_lock);
 	spin_lock_bh(&ar->ab->base_lock);
 
 	peer = ath11k_peer_find_by_addr(ar->ab, addr);
 	if (peer) {
+#ifdef CPTCFG_ATH11K_NSS_SUPPORT
 		peer->delete_in_progress = true;
 		if (peer->self_ast_entry) {
 			ath11k_peer_del_ast(ar, peer->self_ast_entry);
@@ -795,8 +818,12 @@ int ath11k_peer_delete(struct ath11k *ar
 					list_del_init(&ast_entry->wmi_list);
 				}
 			}
+#endif
+		ath11k_peer_rhash_delete(ar->ab, peer);
 	}
 	spin_unlock_bh(&ar->ab->base_lock);
+	mutex_unlock(&ar->ab->tbl_mtx_lock);
+#ifdef CPTCFG_ATH11K_NSS_SUPPORT
 	mutex_unlock(&ar->ab->base_ast_lock);
 #endif
 	ret = ath11k_wmi_send_peer_delete_cmd(ar, addr, vdev_id);
@@ -861,11 +888,13 @@ int ath11k_peer_create(struct ath11k *ar
 	if (ret)
 		return ret;
 
+	mutex_lock(&ar->ab->tbl_mtx_lock);
 	spin_lock_bh(&ar->ab->base_lock);
 
 	peer = ath11k_peer_find(ar->ab, param->vdev_id, param->peer_addr);
 	if (!peer) {
 		spin_unlock_bh(&ar->ab->base_lock);
+		mutex_unlock(&ar->ab->tbl_mtx_lock);
 		ath11k_warn(ar->ab, "failed to find peer %pM on vdev %i after creation\n",
 			    param->peer_addr, param->vdev_id);
 
@@ -876,6 +905,7 @@ int ath11k_peer_create(struct ath11k *ar
 	ret = ath11k_peer_rhash_add(ar->ab, peer);
 	if (ret) {
 		spin_unlock_bh(&ar->ab->base_lock);
+		mutex_unlock(&ar->ab->tbl_mtx_lock);
 		goto cleanup;
 	}
 
@@ -918,6 +948,7 @@ int ath11k_peer_create(struct ath11k *ar
 	}
 
 	spin_unlock_bh(&ar->ab->base_lock);
+	mutex_unlock(&ar->ab->tbl_mtx_lock);
 
 	return 0;
 
@@ -947,6 +978,7 @@ int ath11k_peer_rhash_delete(struct ath1
 	int ret;
 
 	lockdep_assert_held(&ab->base_lock);
+	lockdep_assert_held(&ab->tbl_mtx_lock);
 
 	if (!ab->rhead_peer_id || !ab->rhead_peer_addr)
 		return -EPERM;
@@ -977,6 +1009,8 @@ static int ath11k_peer_rhash_id_tbl_init
 	int ret;
 	size_t size;
 
+	lockdep_assert_held(&ab->tbl_mtx_lock);
+
 	if (ab->rhead_peer_id)
 		return 0;
 
@@ -1032,6 +1066,8 @@ static int ath11k_peer_rhash_addr_tbl_in
 	int ret;
 	size_t size;
 
+	lockdep_assert_held(&ab->tbl_mtx_lock);
+
 	if (ab->rhead_peer_addr)
 		return 0;
 
@@ -1081,6 +1117,8 @@ err_free:
 
 static inline void ath11k_peer_rhash_id_tbl_destroy(struct ath11k_base *ab)
 {
+	lockdep_assert_held(&ab->tbl_mtx_lock);
+
 	if (!ab->rhead_peer_id)
 		return;
 
@@ -1091,6 +1129,8 @@ static inline void ath11k_peer_rhash_id_
 
 static inline void ath11k_peer_rhash_addr_tbl_destroy(struct ath11k_base *ab)
 {
+	lockdep_assert_held(&ab->tbl_mtx_lock);
+
 	if (!ab->rhead_peer_addr)
 		return;
 
@@ -1103,28 +1143,34 @@ int ath11k_peer_rhash_tbl_init(struct at
 {
 	int ret;
 
+	mutex_lock(&ab->tbl_mtx_lock);
+
 	ret = ath11k_peer_rhash_id_tbl_init(ab);
 	if (ret)
-		return ret;
+		goto out;
 
 	ret = ath11k_peer_rhash_addr_tbl_init(ab);
 	if (ret)
 		goto cleanup_tbl;
 
+	mutex_unlock(&ab->tbl_mtx_lock);
+
 	return 0;
 
 cleanup_tbl:
 	ath11k_peer_rhash_id_tbl_destroy(ab);
+out:
+	mutex_unlock(&ab->tbl_mtx_lock);
 
 	return ret;
 }
 
 void ath11k_peer_rhash_tbl_destroy(struct ath11k_base *ab)
 {
-	spin_lock_bh(&ab->base_lock);
+	mutex_lock(&ab->tbl_mtx_lock);
 
 	ath11k_peer_rhash_id_tbl_destroy(ab);
 	ath11k_peer_rhash_addr_tbl_destroy(ab);
 
-	spin_unlock_bh(&ab->base_lock);
+	mutex_unlock(&ab->tbl_mtx_lock);
 }
