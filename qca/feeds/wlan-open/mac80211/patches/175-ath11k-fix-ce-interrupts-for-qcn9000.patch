From 250b18a682e1a273ff1b137850fd27e5db6febeb Mon Sep 17 00:00:00 2001
From: Anilkumar Kolli <akolli@codeaurora.org>
Date: Tue, 24 Mar 2020 20:20:20 +0530
Subject: [PATCH 1175/1179] ath11k: fix ce interrupts for qcn9000

Signed-off-by: Anilkumar Kolli <akolli@codeaurora.org>
---
 drivers/net/wireless/ath/ath11k/ahb.c  |  12 ++--
 drivers/net/wireless/ath/ath11k/ce.c   | 109 +++++++++++++++++++++++++++++++--
 drivers/net/wireless/ath/ath11k/ce.h   |  10 ++-
 drivers/net/wireless/ath/ath11k/core.c |  19 +++---
 drivers/net/wireless/ath/ath11k/hal.c  |   4 +-
 drivers/net/wireless/ath/ath11k/pci.c  |  80 ++++++++++++++++++++----
 drivers/net/wireless/ath/ath11k/pci.h  |   2 +
 7 files changed, 202 insertions(+), 34 deletions(-)

--- a/drivers/net/wireless/ath/ath11k/ahb.c
+++ b/drivers/net/wireless/ath/ath11k/ahb.c
@@ -326,7 +326,7 @@ static void ath11k_ahb_kill_tasklets(str
 	for (i = 0; i < CE_COUNT; i++) {
 		struct ath11k_ce_pipe *ce_pipe = &ab->ce.ce_pipe[i];
 
-		if (ath11k_ce_get_attr_flags(i) & CE_ATTR_DIS_INTR)
+		if (ath11k_ce_get_attr_flags(ab, i) & CE_ATTR_DIS_INTR)
 			continue;
 
 		tasklet_kill(&ce_pipe->intr_tq);
@@ -415,7 +415,7 @@ static void ath11k_ahb_sync_ce_irqs(stru
 	int irq_idx;
 
 	for (i = 0; i < CE_COUNT; i++) {
-		if (ath11k_ce_get_attr_flags(i) & CE_ATTR_DIS_INTR)
+		if (ath11k_ce_get_attr_flags(ab, i) & CE_ATTR_DIS_INTR)
 			continue;
 
 		irq_idx = ATH11K_IRQ_CE0_OFFSET + i;
@@ -443,7 +443,7 @@ static void ath11k_ahb_ce_irqs_enable(st
 	int i;
 
 	for (i = 0; i < CE_COUNT; i++) {
-		if (ath11k_ce_get_attr_flags(i) & CE_ATTR_DIS_INTR)
+		if (ath11k_ce_get_attr_flags(ab, i) & CE_ATTR_DIS_INTR)
 			continue;
 		ath11k_ahb_ce_irq_enable(ab, i);
 	}
@@ -454,7 +454,7 @@ static void ath11k_ahb_ce_irqs_disable(s
 	int i;
 
 	for (i = 0; i < CE_COUNT; i++) {
-		if (ath11k_ce_get_attr_flags(i) & CE_ATTR_DIS_INTR)
+		if (ath11k_ce_get_attr_flags(ab, i) & CE_ATTR_DIS_INTR)
 			continue;
 		ath11k_ahb_ce_irq_disable(ab, i);
 	}
@@ -564,7 +564,7 @@ static void ath11k_ahb_free_irq(struct a
 	int i;
 
 	for (i = 0; i < CE_COUNT; i++) {
-		if (ath11k_ce_get_attr_flags(i) & CE_ATTR_DIS_INTR)
+		if (ath11k_ce_get_attr_flags(ab, i) & CE_ATTR_DIS_INTR)
 			continue;
 		irq_idx = ATH11K_IRQ_CE0_OFFSET + i;
 		free_irq(ab->irq_num[irq_idx], &ab->ce.ce_pipe[i]);
@@ -720,7 +720,7 @@ static int ath11k_ahb_config_irq(struct
 	for (i = 0; i < CE_COUNT; i++) {
 		struct ath11k_ce_pipe *ce_pipe = &ab->ce.ce_pipe[i];
 
-		if (ath11k_ce_get_attr_flags(i) & CE_ATTR_DIS_INTR)
+		if (ath11k_ce_get_attr_flags(ab, i) & CE_ATTR_DIS_INTR)
 			continue;
 
 		irq_idx = ATH11K_IRQ_CE0_OFFSET + i;
--- a/drivers/net/wireless/ath/ath11k/ce.c
+++ b/drivers/net/wireless/ath/ath11k/ce.c
@@ -7,7 +7,9 @@
 #include "debug.h"
 #include "hif.h"
 
-static const struct ce_attr host_ce_config_wlan[] = {
+#define host_ce_config_wlan ab->ce.host_ce_config
+
+static const struct ce_attr host_ce_config_wlan_ipq8074[] = {
 	/* CE0: host->target HTC control and raw streams */
 	{
 		.flags = CE_ATTR_FLAGS,
@@ -112,6 +114,84 @@ static const struct ce_attr host_ce_conf
 	},
 };
 
+static const struct ce_attr host_ce_config_wlan_qcn90xx[] = {
+	/* CE0: host->target HTC control and raw streams */
+	{
+		.flags = CE_ATTR_FLAGS,
+		.src_nentries = 16,
+		.src_sz_max = 2048,
+		.dest_nentries = 0,
+	},
+
+	/* CE1: target->host HTT + HTC control */
+	{
+		.flags = CE_ATTR_FLAGS,
+		.src_nentries = 0,
+		.src_sz_max = 2048,
+		.dest_nentries = 512,
+		.recv_cb = ath11k_htc_rx_completion_handler,
+	},
+
+	/* CE2: target->host WMI */
+	{
+		.flags = CE_ATTR_FLAGS,
+		.src_nentries = 0,
+		.src_sz_max = 2048,
+		.dest_nentries = 32,
+		.recv_cb = ath11k_htc_rx_completion_handler,
+	},
+
+	/* CE3: host->target WMI (mac0) */
+	{
+		.flags = CE_ATTR_FLAGS,
+		.src_nentries = 32,
+		.src_sz_max = 2048,
+		.dest_nentries = 0,
+		.send_cb = ath11k_htc_tx_completion_handler,
+	},
+
+	/* CE4: host->target HTT */
+	{
+		.flags = CE_ATTR_FLAGS | CE_ATTR_DIS_INTR,
+		.src_nentries = 2048,
+		.src_sz_max = 256,
+		.dest_nentries = 0,
+	},
+
+	/* CE5: target->host pktlog */
+	{
+		.flags = CE_ATTR_FLAGS,
+		.src_nentries = 0,
+		.src_sz_max = 2048,
+		.dest_nentries = 512,
+		.recv_cb = ath11k_dp_htt_htc_t2h_msg_handler,
+	},
+
+	/* CE6: target autonomous hif_memcpy */
+	{
+		.flags = CE_ATTR_FLAGS,
+		.src_nentries = 0,
+		.src_sz_max = 0,
+		.dest_nentries = 0,
+	},
+
+	/* CE7: host->target WMI (mac1) */
+	{
+		.flags = CE_ATTR_FLAGS,
+		.src_nentries = 32,
+		.src_sz_max = 2048,
+		.dest_nentries = 0,
+	},
+
+	/* CE8: target autonomous hif_memcpy */
+	{
+		.flags = CE_ATTR_FLAGS,
+		.src_nentries = 0,
+		.src_sz_max = 0,
+		.dest_nentries = 0,
+	},
+};
+
 static int ath11k_ce_rx_buf_enqueue_pipe(struct ath11k_ce_pipe *pipe,
 					 struct sk_buff *skb, dma_addr_t paddr)
 {
@@ -374,7 +454,7 @@ static void ath11k_ce_srng_msi_ring_para
 						 struct hal_srng_params *ring_params)
 {
 	u32 msi_data_start;
-	u32 msi_data_count;
+	u32 msi_data_count, msi_data_idx;
 	u32 msi_irq_start;
 	u32 addr_lo;
 	u32 addr_hi;
@@ -388,10 +468,11 @@ static void ath11k_ce_srng_msi_ring_para
 		return;
 
 	ath11k_get_msi_address(ab, &addr_lo, &addr_hi);
+	ath11k_get_ce_msi_idx(ab, ce_id, &msi_data_idx);
 
 	ring_params->msi_addr = addr_lo;
 	ring_params->msi_addr |= (dma_addr_t)(((uint64_t)addr_hi) << 32);
-	ring_params->msi_data = (ce_id % msi_data_count) + msi_data_start;
+	ring_params->msi_data = (msi_data_idx % msi_data_count) + msi_data_start;
 	ring_params->flags |= HAL_SRNG_FLAGS_MSI_INTR;
 }
 
@@ -432,6 +513,9 @@ static int ath11k_ce_init_ring(struct at
 
 	/* TODO: Init other params needed by HAL to init the ring */
 
+	if (!(CE_ATTR_DIS_INTR & host_ce_config_wlan[ce_id].flags))
+		ath11k_ce_srng_msi_ring_params_setup(ab, ce_id, &params);
+
 	ret = ath11k_hal_srng_setup(ab, type, ce_id, 0, &params);
 	if (ret < 0) {
 		ath11k_warn(ab, "failed to setup srng: %d ring_id %d\n",
@@ -439,9 +523,6 @@ static int ath11k_ce_init_ring(struct at
 		return ret;
 	}
 
-	if (!(CE_ATTR_DIS_INTR & host_ce_config_wlan[ce_id].flags))
-		ath11k_ce_srng_msi_ring_params_setup(ab, ce_id, &params);
-
 	ce_ring->hal_ring_id = ret;
 
 	return 0;
@@ -853,7 +934,7 @@ void ath11k_ce_byte_swap(void *mem, u32
 	}
 }
 
-int ath11k_ce_get_attr_flags(int ce_id)
+int ath11k_ce_get_attr_flags(struct ath11k_base *ab, int ce_id)
 {
 	if (ce_id >= CE_COUNT)
 		return -EINVAL;
@@ -861,3 +942,23 @@ int ath11k_ce_get_attr_flags(int ce_id)
 	return host_ce_config_wlan[ce_id].flags;
 }
 EXPORT_SYMBOL(ath11k_ce_get_attr_flags);
+
+int ath11k_ce_attr_attach(struct ath11k_base *ab)
+{
+	switch (ab->hw_rev) {
+	case ATH11K_HW_IPQ8074:
+	case ATH11K_HW_IPQ6018:
+		ab->ce.host_ce_config = host_ce_config_wlan_ipq8074;
+		ab->ce.ce_count = 12;
+		break;
+	case ATH11K_HW_QCN90XX:
+		ab->ce.host_ce_config = host_ce_config_wlan_qcn90xx;
+		ab->ce.ce_count = 6;
+		break;
+	default:
+		ath11k_warn(ab, "unknown hw_rev:%d\n", ab->hw_rev);
+		return -ENOTSUPP;
+	}
+
+	return 0;
+}
--- a/drivers/net/wireless/ath/ath11k/ce.h
+++ b/drivers/net/wireless/ath/ath11k/ce.h
@@ -6,7 +6,8 @@
 #ifndef ATH11K_CE_H
 #define ATH11K_CE_H
 
-#define CE_COUNT 12
+#define MAX_CE_COUNT    12
+#define CE_COUNT	(ab->ce.ce_count)
 
 /* Byte swap data words */
 #define CE_ATTR_BYTE_SWAP_DATA 2
@@ -166,9 +167,11 @@ struct ath11k_ce_pipe {
 };
 
 struct ath11k_ce {
-	struct ath11k_ce_pipe ce_pipe[CE_COUNT];
+	struct ath11k_ce_pipe ce_pipe[MAX_CE_COUNT];
 	/* Protects rings of all ce pipes */
 	spinlock_t ce_lock;
+	const struct ce_attr *host_ce_config;
+	u32 ce_count;
 };
 
 void ath11k_ce_cleanup_pipes(struct ath11k_base *ab);
@@ -180,8 +183,9 @@ void ath11k_ce_rx_post_buf(struct ath11k
 int ath11k_ce_init_pipes(struct ath11k_base *ab);
 int ath11k_ce_alloc_pipes(struct ath11k_base *ab);
 void ath11k_ce_free_pipes(struct ath11k_base *ab);
-int ath11k_ce_get_attr_flags(int ce_id);
+int ath11k_ce_get_attr_flags(struct ath11k_base *ab, int ce_id);
 void ath11k_ce_poll_send_completed(struct ath11k_base *ab, u8 pipe_id);
+int ath11k_ce_attr_attach(struct ath11k_base *ab);
 int ath11k_ce_map_service_to_pipe(struct ath11k_base *ab, u16 service_id,
 				  u8 *ul_pipe, u8 *dl_pipe);
 #endif
--- a/drivers/net/wireless/ath/ath11k/core.c
+++ b/drivers/net/wireless/ath/ath11k/core.c
@@ -904,6 +904,14 @@ static int ath11k_init_hw_params(struct
 
 int ath11k_core_pre_init(struct ath11k_base *ab)
 {
+	int ret;
+
+	ret = ath11k_init_hw_params(ab);
+	if (ret) {
+		ath11k_err(ab, "failed to get hw params %d\n", ret);
+		return ret;
+	}
+
        switch (ab->hw_rev) {
        case ATH11K_HW_IPQ8074:
        case ATH11K_HW_IPQ6018:
@@ -920,7 +928,10 @@ int ath11k_core_pre_init(struct ath11k_b
                           ab->hw_rev);
                return -ENOTSUPP;
        }
-       return 0;
+
+	ret = ath11k_ce_attr_attach(ab);
+
+	return ret;
 }
 EXPORT_SYMBOL(ath11k_core_pre_init);
 
@@ -957,12 +968,6 @@ int ath11k_core_init(struct ath11k_base
 	if(!ab->mhi_support)
 		ath11k_core_get_rproc_hdl(ab);
 
-	ret = ath11k_init_hw_params(ab);
-	if (ret) {
-		ath11k_err(ab, "failed to get hw params %d\n", ret);
-		return ret;
-	}
-
 	ret = ath11k_core_soc_create(ab);
 	if (ret) {
 		ath11k_err(ab, "failed to create soc core: %d\n", ret);
--- a/drivers/net/wireless/ath/ath11k/hal.c
+++ b/drivers/net/wireless/ath/ath11k/hal.c
@@ -931,6 +931,8 @@ int ath11k_hal_srng_setup(struct ath11k_
 				params->intr_batch_cntr_thres_entries;
 	srng->intr_timer_thres_us = params->intr_timer_thres_us;
 	srng->flags = params->flags;
+	srng->msi_addr = params->msi_addr;
+	srng->msi_data = params->msi_data;
 	srng->initialized = 1;
 	spin_lock_init(&srng->lock);
 
@@ -1149,7 +1151,7 @@ void ath11k_hal_dump_srng_stats(struct a
 	for (i = 0; i < CE_COUNT; i++) {
 		ce_pipe = &ab->ce.ce_pipe[i];
 
-		if (ath11k_ce_get_attr_flags(i) & CE_ATTR_DIS_INTR)
+		if (ath11k_ce_get_attr_flags(ab, i) & CE_ATTR_DIS_INTR)
 			continue;
 
 		ath11k_err(ab, "CE_id %d pipe_num %d %ums before\n",
--- a/drivers/net/wireless/ath/ath11k/pci.c
+++ b/drivers/net/wireless/ath/ath11k/pci.c
@@ -8,12 +8,23 @@
 #include <linux/pci.h>
 
 #include "core.h"
-#include "ahb.h"
 #include "hif.h"
 #include "mhi.h"
 #include "pci.h"
 #include "debug.h"
 
+const char *ce_irq_name[ATH11K_MAX_PCI_DOMAINS + 1][MAX_CE_COUNT] = {
+	{
+		ATH11K_PCI_CE_IRQS_NAME(0)
+	},
+	{
+		ATH11K_PCI_CE_IRQS_NAME(1)
+	},
+	{
+		ATH11K_PCI_CE_IRQS_NAME()
+	},
+};
+
 static const struct pci_device_id ath11k_pci_id_table[] = {
 	{ QCA6290_VENDOR_ID, QCA6290_DEVICE_ID, PCI_ANY_ID, PCI_ANY_ID },
 	{ QCA6390_VENDOR_ID, QCA6390_DEVICE_ID, PCI_ANY_ID, PCI_ANY_ID },
@@ -351,7 +362,7 @@ int ath11k_pci_get_msi_irq(struct device
 	return irq_num;
 }
 
-void ath11k_pci_get_msi_address(struct ath11k_base *ab, u32 *msi_addr_lo,
+int ath11k_pci_get_msi_address(struct ath11k_base *ab, u32 *msi_addr_lo,
 				u32 *msi_addr_hi)
 {
 	struct pci_dev *pci_dev = to_pci_dev(ab->dev);
@@ -361,6 +372,7 @@ void ath11k_pci_get_msi_address(struct a
 
 	pci_read_config_dword(pci_dev, pci_dev->msi_cap + PCI_MSI_ADDRESS_HI,
 			      msi_addr_hi);
+	return 0;
 }
 
 int ath11k_pci_get_user_msi_assignment(struct ath11k_pci *ar_pci, char *user_name,
@@ -397,6 +409,23 @@ int ath11k_pci_get_user_msi_assignment(s
 	return -EINVAL;
 }
 
+static void ath11k_pci_get_ce_msi_idx(struct ath11k_base *ab, u32 ce_id,
+				      u32 *msi_idx)
+{
+	u32 i, msi_data_idx;
+
+	for (i = 0, msi_data_idx = 0; i < CE_COUNT; i++) {
+		if (ath11k_ce_get_attr_flags(ab, i) & CE_ATTR_DIS_INTR)
+			continue;
+
+		if (ce_id == i)
+			break;
+
+		msi_data_idx++;
+	}
+	*msi_idx = msi_data_idx;
+}
+
 int ath11k_get_user_msi_assignment(struct ath11k_base *ab, char *user_name,
 				   int *num_vectors, u32 *user_base_data,
 				   u32 *base_vector)
@@ -413,7 +442,7 @@ static void ath11k_pci_free_irq(struct a
 	int i;
 
 	for (i = 0; i < CE_COUNT; i++) {
-		if (ath11k_ce_get_attr_flags(i) & CE_ATTR_DIS_INTR)
+		if (ath11k_ce_get_attr_flags(ab, i) & CE_ATTR_DIS_INTR)
 			continue;
 		irq_idx = ATH11K_IRQ_CE0_OFFSET + i;
 		free_irq(ab->irq_num[irq_idx], &ab->ce.ce_pipe[i]);
@@ -441,7 +470,7 @@ static void ath11k_pci_ce_irqs_disable(s
 	int i;
 
 	for (i = 0; i < CE_COUNT; i++) {
-		if (ath11k_ce_get_attr_flags(i) & CE_ATTR_DIS_INTR)
+		if (ath11k_ce_get_attr_flags(ab, i) & CE_ATTR_DIS_INTR)
 			continue;
 		ath11k_pci_ce_irq_disable(ab, i);
 	}
@@ -453,7 +482,7 @@ static void ath11k_pci_sync_ce_irqs(stru
 	int irq_idx;
 
 	for (i = 0; i < CE_COUNT; i++) {
-		if (ath11k_ce_get_attr_flags(i) & CE_ATTR_DIS_INTR)
+		if (ath11k_ce_get_attr_flags(ab, i) & CE_ATTR_DIS_INTR)
 			continue;
 
 		irq_idx = ATH11K_IRQ_CE0_OFFSET + i;
@@ -484,23 +513,28 @@ static int ath11k_pci_config_irq(struct
 {
 	struct ath11k_ce_pipe *ce_pipe;
 	u32 msi_data_start;
-	u32 msi_data_count;
+	u32 msi_data_count, msi_data_idx;
 	u32 msi_irq_start;
 	unsigned int msi_data;
 	int irq, i, ret, irq_idx;
+	struct ath11k_pci *ar_pci = ath11k_pci_priv(ab);
+	u8 domain_id = pci_domain_nr(ar_pci->pdev->bus);
+
+	if (domain_id > ATH11K_MAX_PCI_DOMAINS)
+		domain_id = ATH11K_MAX_PCI_DOMAINS;
 
 	ret = ath11k_pci_get_user_msi_assignment(ath11k_pci_priv(ab),
 						 "CE", &msi_data_count,
 						 &msi_data_start, &msi_irq_start);
 
 	/* Configure CE irqs */
-	for (i = 0; i < CE_COUNT; i++) {
-		msi_data = (i % msi_data_count) +
-				msi_irq_start;
+	for (i = 0, msi_data_idx = 0; i < CE_COUNT; i++) {
+		msi_data = (msi_data_idx % msi_data_count) + msi_irq_start;
+
 		irq = ath11k_pci_get_msi_irq(ab->dev, msi_data);
 		ce_pipe = &ab->ce.ce_pipe[i];
 
-		if (ath11k_ce_get_attr_flags(i) & CE_ATTR_DIS_INTR)
+		if (ath11k_ce_get_attr_flags(ab, i) & CE_ATTR_DIS_INTR)
 			continue;
 
 		irq_idx = ATH11K_IRQ_CE0_OFFSET + i;
@@ -508,13 +542,15 @@ static int ath11k_pci_config_irq(struct
 		tasklet_init(&ce_pipe->intr_tq, ath11k_pci_ce_tasklet,
 			     (unsigned long)ce_pipe);
 
+		irq_set_status_flags(irq, IRQ_NOAUTOEN);
 		ret = request_irq(irq, ath11k_pci_ce_interrupt_handler,
-				  IRQF_SHARED, irq_name[irq_idx],
+				  IRQF_SHARED, ce_irq_name[domain_id][i],
 				  ce_pipe);
 		if (ret)
 			return ret;
 
 		ab->irq_num[irq_idx] = irq;
+		msi_data_idx++;
 	}
 
 	/* To Do Configure external interrupts */
@@ -546,7 +582,7 @@ static void ath11k_pci_ce_irqs_enable(st
 	int i;
 
 	for (i = 0; i < CE_COUNT; i++) {
-		if (ath11k_ce_get_attr_flags(i) & CE_ATTR_DIS_INTR)
+		if (ath11k_ce_get_attr_flags(ab, i) & CE_ATTR_DIS_INTR)
 			continue;
 		ath11k_pci_ce_irq_enable(ab, i);
 	}
@@ -746,7 +782,7 @@ static void ath11k_pci_kill_tasklets(str
 	for (i = 0; i < CE_COUNT; i++) {
 		struct ath11k_ce_pipe *ce_pipe = &ab->ce.ce_pipe[i];
 
-		if (ath11k_ce_get_attr_flags(i) & CE_ATTR_DIS_INTR)
+		if (ath11k_ce_get_attr_flags(ab, i) & CE_ATTR_DIS_INTR)
 			continue;
 
 		tasklet_kill(&ce_pipe->intr_tq);
@@ -824,6 +860,7 @@ static const struct ath11k_hif_ops ath11
 	.get_msi_address =  ath11k_pci_get_msi_address,
 	.get_user_msi_vector = ath11k_get_user_msi_assignment,
 	.map_service_to_pipe = ath11k_pci_map_service_to_pipe,
+	.get_ce_msi_idx = ath11k_pci_get_ce_msi_idx,
 };
 
 static int ath11k_pci_probe(struct pci_dev *pdev,
@@ -893,16 +930,17 @@ static int ath11k_pci_probe(struct pci_d
 		ath11k_err(ab, "failed to enable  msi: %d\n", ret);
 		goto err_pci_free_region;
 	}
+
+	ret = ath11k_core_pre_init(ab);
+	if (ret)
+		goto err_pci_unregister_mhi;
+
 	ret = ath11k_pci_register_mhi(ar_pci);
 	if (ret) {
 		ath11k_err(ab, "failed to register  mhi: %d\n", ret);
 		goto err_pci_disable_msi;
 	}
 
-	ret = ath11k_core_pre_init(ab);
-	if (ret)
-		goto err_pci_unregister_mhi;
-
 	ret = ath11k_hal_srng_init(ab);
 	if (ret)
 		goto err_pci_unregister_mhi;
--- a/drivers/net/wireless/ath/ath11k/pci.h
+++ b/drivers/net/wireless/ath/ath11k/pci.h
@@ -25,6 +25,25 @@
 #define WINDOW_START MAX_UNWINDOWED_ADDRESS
 #define WINDOW_RANGE_MASK 0x7FFFF
 
+#define ATH11K_IRQ_CE0_OFFSET 3
+#define ATH11K_MAX_PCI_DOMAINS 2
+
+#define STR_CONV(str) #str
+
+#define ATH11K_PCI_CE_IRQS_NAME(x) \
+	STR_CONV(pci##x##_ce0),\
+	STR_CONV(pci##x##_ce1),\
+	STR_CONV(pci##x##_ce2),\
+	STR_CONV(pci##x##_ce3),\
+	STR_CONV(pci##x##_ce4),\
+	STR_CONV(pci##x##_ce5),\
+	STR_CONV(pci##x##_ce6),\
+	STR_CONV(pci##x##_ce7),\
+	STR_CONV(pci##x##_ce8),\
+	STR_CONV(pci##x##_ce9),\
+	STR_CONV(pci##x##_ce10),\
+	STR_CONV(pci##x##_ce11),
+
 struct ath11k_msi_user {
 	char *name;
 	int num_vectors;
--- a/drivers/net/wireless/ath/ath11k/hif.h
+++ b/drivers/net/wireless/ath/ath11k/hif.h
@@ -94,6 +94,7 @@ struct ath11k_hif_ops {
 				   u32 *base_vector);
 	int (*get_msi_address)(struct ath11k_base *ab, u32 *msi_addr_lo,
 				u32 *msi_addr_hi);
+	void (*get_ce_msi_idx)(struct ath11k_base *ab, u32 ce_id, u32 *msi_idx);
 };
 
 static inline int ath11k_hif_start(struct ath11k_base *sc)
@@ -161,4 +162,13 @@ static inline int ath11k_get_msi_address
 
 	return ab->hif.ops->get_msi_address(ab, msi_addr_lo, msi_addr_hi);
 }
+
+static inline void ath11k_get_ce_msi_idx(struct ath11k_base *ab, u32 ce_id,
+					u32 *msi_data_idx)
+{
+	if (ab->hif.ops->get_ce_msi_idx)
+		ab->hif.ops->get_ce_msi_idx(ab, ce_id, msi_data_idx);
+	else
+		*msi_data_idx = ce_id;
+}
 #endif /* _HIF_H_ */
