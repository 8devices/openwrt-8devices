From bce1812b4c76dacc19eb11e4a34ed2acf19e7ea2 Mon Sep 17 00:00:00 2001
From: Anilkumar Kolli <akolli@codeaurora.org>
Date: Mon, 23 Mar 2020 14:58:46 +0530
Subject: [PATCH 159/164] ath11k: Modify QMI handshakes in compatible with
 QCA6x90 chipset

QMI handshakes for QCA6x90 chipset has differences in comparision
to IPQ8074. Modify QMI handshakes in compatible with QCA6x90 chipset.

Signed-off-by: Govind Singh <govinds@codeaurora.org>
Signed-off-by: Anilkumar Kolli <akolli@codeaurora.org>
---
 drivers/net/wireless/ath/ath11k/ahb.c  |   2 +
 drivers/net/wireless/ath/ath11k/core.c |  15 ++-
 drivers/net/wireless/ath/ath11k/core.h |   4 +
 drivers/net/wireless/ath/ath11k/pci.c  |   4 +
 drivers/net/wireless/ath/ath11k/qmi.c  | 196 +++++++++++++++++++++++++++++++--
 drivers/net/wireless/ath/ath11k/qmi.h  |   7 ++
 6 files changed, 216 insertions(+), 12 deletions(-)
 mode change 100644 => 100755 drivers/net/wireless/ath/ath11k/qmi.c

--- a/drivers/net/wireless/ath/ath11k/ahb.c
+++ b/drivers/net/wireless/ath/ath11k/ahb.c
@@ -842,6 +842,8 @@ static int ath11k_ahb_probe(struct platf
 	ab->fw_mode = ATH11K_FIRMWARE_MODE_NORMAL;
 	ab->mem = mem;
 	ab->mem_len = resource_size(mem_res);
+	ab->fixed_bdf_addr= true;
+	ab->fixed_mem_region = true;
 	platform_set_drvdata(pdev, ab);
 
 	ret = ath11k_hal_srng_init(ab);
--- a/drivers/net/wireless/ath/ath11k/core.c
+++ b/drivers/net/wireless/ath/ath11k/core.c
@@ -872,12 +872,11 @@ static int ath11k_init_hw_params(struct
 	return 0;
 }
 
-int ath11k_core_init(struct ath11k_base *ab)
+static int ath11k_core_get_rproc_hdl (struct ath11k_base *ab)
 {
 	struct device *dev = ab->dev;
-	struct rproc *prproc;
 	phandle rproc_phandle;
-	int ret;
+	struct rproc *prproc;
 
 	if (of_property_read_u32(dev->of_node, "qcom,rproc", &rproc_phandle)) {
 		ath11k_err(ab, "failed to get q6_rproc handle\n");
@@ -902,6 +901,16 @@ int ath11k_core_init(struct ath11k_base
 		return ret;
 	}
 
+	return 0;
+}
+
+int ath11k_core_init(struct ath11k_base *ab)
+{
+	int ret;
+
+	if(!ab->mhi_support)
+		ath11k_core_get_rproc_hdl(ab);
+
 	ret = ath11k_core_soc_create(ab);
 	if (ret) {
 		ath11k_err(ab, "failed to create soc core: %d\n", ret);
--- a/drivers/net/wireless/ath/ath11k/core.h
+++ b/drivers/net/wireless/ath/ath11k/core.h
@@ -804,6 +804,10 @@ struct ath11k_base {
 	struct ath11k_dbring_cap *db_caps;
 	u32 num_db_cap;
 
+	bool fixed_bdf_addr;
+	bool m3_fw_support;
+	bool mhi_support;
+	bool fixed_mem_region;
 	/* must be last */
 	u8 drv_priv[0] __aligned(sizeof(void *));
 };
--- a/drivers/net/wireless/ath/ath11k/pci.c
+++ b/drivers/net/wireless/ath/ath11k/pci.c
@@ -602,6 +602,10 @@ static int ath11k_pci_probe(struct pci_d
 	ab->hw_rev = hw_rev;
 	ab->hif.ops = &ath11k_pci_hif_ops;
 	pci_set_drvdata(pdev, ab);
+	ab->fixed_bdf_addr= false;
+	ab->m3_fw_support = true;
+	ab->mhi_support = true;
+	ab->fixed_mem_region = false;
 
 	ret = ath11k_pci_claim(ar_pci, pdev);
 	if (ret) {
--- a/drivers/net/wireless/ath/ath11k/qmi.c
+++ b/drivers/net/wireless/ath/ath11k/qmi.c
@@ -202,6 +202,12 @@ static struct qmi_elem_info qmi_wlanfw_q
 	},
 };
 
+#define BIN_BDF_FILE_NAME		"bdwlan.bin"
+#define BIN_BDF_FILE_NAME_PREFIX	"bdwlan.e"
+#define BDF_FILE_NAME_PREFIX		"bdwlan"
+#define MAX_M3_FILE_NAME_LENGTH		13
+#define DEFAULT_M3_FILE_NAME		"m3.bin"
+
 static struct qmi_elem_info qmi_wlanfw_host_cap_req_msg_v01_ei[] = {
 	{
 		.data_type	= QMI_OPT_FLAG,
@@ -1859,11 +1865,17 @@ static int ath11k_qmi_host_cap_send(stru
 	req.bdf_support_valid = 1;
 	req.bdf_support = 1;
 
-	req.m3_support_valid = 0;
-	req.m3_support = 0;
-
-	req.m3_cache_support_valid = 0;
-	req.m3_cache_support = 0;
+	if (ab->m3_fw_support) {
+		req.m3_support_valid = 1;
+		req.m3_support = 1;
+		req.m3_cache_support_valid = 1;
+		req.m3_cache_support = 1;
+	} else {
+		req.m3_support_valid = 0;
+		req.m3_support = 0;
+		req.m3_cache_support_valid = 0;
+		req.m3_cache_support = 0;
+	}
 
 	req.cal_done_valid = 1;
 	req.cal_done = ab->qmi.cal_done;
@@ -2027,6 +2039,25 @@ static int ath11k_qmi_alloc_target_mem_c
 	int i, idx;
 
 	for (i = 0, idx = 0; i < ab->qmi.mem_seg_count; i++) {
+		ab->qmi.target_mem[i].vaddr = (unsigned long)dma_alloc_coherent(ab->dev, ab->qmi.target_mem[i].size,
+						&ab->qmi.target_mem[i].paddr, GFP_KERNEL);
+		if (!ab->qmi.target_mem[idx].vaddr) {
+			ath11k_err(ab, "failed to allocate memory for FW, size: 0x%x, type: %u\n",
+				    ab->qmi.target_mem[i].size, ab->qmi.target_mem[i].type);
+			return -EINVAL;
+		}
+		ab->qmi.target_mem[i].size = ab->qmi.target_mem[i].size;
+		ab->qmi.target_mem[i].type = ab->qmi.target_mem[i].type;
+	}
+
+	return 0;
+}
+
+static int ath11k_qmi_assign_target_mem_chunk(struct ath11k_base *ab)
+{
+	int i, idx;
+
+	for (i = 0, idx = 0; i < ab->qmi.mem_seg_count; i++) {
 		switch (ab->qmi.target_mem[i].type) {
 		case BDF_MEM_REGION_TYPE:
 			ab->qmi.target_mem[idx].paddr = ab->hw_params.bdf_addr;
@@ -2274,8 +2305,142 @@ out:
 	return ret;
 }
 
+static int ath11k_qmi_load_bdf_target_mem(struct ath11k_base *ab)
+{
+	struct qmi_wlanfw_bdf_download_req_msg_v01 *req;
+	struct qmi_wlanfw_bdf_download_resp_msg_v01 resp;
+	char filename[ATH11K_QMI_MAX_BDF_FILE_NAME_SIZE];
+	const struct firmware *fw_entry;
+	struct device *dev = ab->dev;
+	unsigned int remaining;
+	struct qmi_txn txn = {};
+	int ret;
+	const u8 *temp;
+
+	req = kzalloc(sizeof(*req), GFP_KERNEL);
+	if (!req)
+		return -ENOMEM;
+	memset(&resp, 0, sizeof(resp));
+
+
+	if (ab->qmi.target.board_id == 0xFF)
+		snprintf(filename, sizeof(filename), BIN_BDF_FILE_NAME);
+	else if (ab->qmi.target.board_id < 0xFF)
+		snprintf(filename, sizeof(filename),
+			 BIN_BDF_FILE_NAME_PREFIX "%02x",
+			 ab->qmi.target.board_id);
+	else
+		snprintf(filename, sizeof(filename),
+			 BDF_FILE_NAME_PREFIX "%02x.b%02x",
+			 ab->qmi.target.board_id >> 8 & 0xFF,
+			 ab->qmi.target.board_id & 0xFF);
+
+	ret = request_firmware(&fw_entry, filename, dev);
+	if (ret) {
+		ath11k_warn(ab, "qmi failed to load bdf: %s\n", filename);
+		goto out;
+	}
+
+	temp = fw_entry->data;
+	remaining = fw_entry->size;
+
+	while (remaining) {
+		req->valid = 1;
+		req->file_id_valid = 1;
+		req->file_id = ab->qmi.target.board_id;
+		req->total_size_valid = 1;
+		req->total_size = fw_entry->size;
+		req->seg_id_valid = 1;
+		req->data_valid = 0;
+		req->data_len = ATH11K_QMI_MAX_BDF_FILE_NAME_SIZE;
+		req->bdf_type = 0;
+		req->bdf_type_valid = 0;
+		req->end_valid = 1;
+		req->end = 0;
+
+		if (remaining > QMI_WLANFW_MAX_DATA_SIZE_V01) {
+			req->data_len = QMI_WLANFW_MAX_DATA_SIZE_V01;
+		} else {
+			req->data_len = remaining;
+			req->end = 1;
+		}
+
+		memcpy(req->data, temp, req->data_len);
+
+		ret = qmi_txn_init(&ab->qmi.handle, &txn,
+				   qmi_wlanfw_bdf_download_resp_msg_v01_ei,
+				   &resp);
+		if (ret < 0)
+			goto out_qmi_bdf;
+
+		ret = qmi_send_request(&ab->qmi.handle, NULL, &txn,
+				       QMI_WLANFW_BDF_DOWNLOAD_REQ_V01,
+				       QMI_WLANFW_BDF_DOWNLOAD_REQ_MSG_V01_MAX_LEN,
+				       qmi_wlanfw_bdf_download_req_msg_v01_ei, req);
+		if (ret < 0) {
+			qmi_txn_cancel(&txn);
+			goto out_qmi_bdf;
+		}
+
+		ret = qmi_txn_wait(&txn, msecs_to_jiffies(ATH11K_QMI_WLANFW_TIMEOUT_MS));
+		if (ret < 0)
+			goto out_qmi_bdf;
+
+		if (resp.resp.result != QMI_RESULT_SUCCESS_V01) {
+			ath11k_warn(ab, "qmi BDF download failed, result: %d, err: %d\n",
+				    resp.resp.result, resp.resp.error);
+			ret = resp.resp.result;
+			goto out_qmi_bdf;
+		}
+		remaining -= req->data_len;
+		temp += req->data_len;
+		req->seg_id++;
+	}
+	ath11k_info(ab, "qmi BDF download\n");
+
+out_qmi_bdf:
+	release_firmware(fw_entry);
+out:
+	kfree(req);
+	return ret;
+}
+
+static int ath11k_load_m3_bin(struct ath11k_base *ab)
+{
+	struct m3_mem_region *m3_mem = &ab->qmi.m3_mem;
+	char filename[MAX_M3_FILE_NAME_LENGTH];
+	const struct firmware *fw_entry;
+	int ret;
+
+	snprintf(filename, sizeof(filename), DEFAULT_M3_FILE_NAME);
+	ret = request_firmware(&fw_entry, filename,
+			       ab->dev);
+	if (ret) {
+		ath11k_err(ab, "Failed to load M3 image: %s\n", filename);
+		return ret;
+	}
+
+	m3_mem->vaddr = dma_alloc_coherent(ab->dev,
+					fw_entry->size, &m3_mem->paddr,
+					GFP_KERNEL);
+	if (!m3_mem->vaddr) {
+		ath11k_err(ab, "Failed to allocate memory for M3, size: 0x%zx\n",
+			    fw_entry->size);
+		release_firmware(fw_entry);
+		return -ENOMEM;
+	}
+
+	ath11k_err(ab, " memory for M3, size: 0x%zx\n",
+			    fw_entry->size);
+	memcpy(m3_mem->vaddr, fw_entry->data, fw_entry->size);
+	m3_mem->size = fw_entry->size;
+	release_firmware(fw_entry);
+
+	return 0;
+}
 static int ath11k_qmi_wlanfw_m3_info_send(struct ath11k_base *ab)
 {
+	struct m3_mem_region *m3_mem = &ab->qmi.m3_mem;
 	struct qmi_wlanfw_m3_info_req_msg_v01 req;
 	struct qmi_wlanfw_m3_info_resp_msg_v01 resp;
 	struct qmi_txn txn = {};
@@ -2283,8 +2448,15 @@ static int ath11k_qmi_wlanfw_m3_info_sen
 
 	memset(&req, 0, sizeof(req));
 	memset(&resp, 0, sizeof(resp));
-	req.addr = 0;
-	req.size = 0;
+
+	if (ab->m3_fw_support) {
+		ath11k_load_m3_bin(ab);
+		req.addr = m3_mem->paddr;
+		req.size = m3_mem->size;
+	} else {
+		req.addr = 0;
+		req.size = 0;
+	}
 
 	ret = qmi_txn_init(&ab->qmi.handle, &txn,
 			   qmi_wlanfw_m3_info_resp_msg_v01_ei, &resp);
@@ -2590,7 +2762,10 @@ static void ath11k_qmi_event_load_bdf(st
 		return;
 	}
 
-	ret = ath11k_qmi_load_bdf(ab);
+	if (ab->fixed_bdf_addr)
+		ret = ath11k_qmi_load_bdf(ab);
+	else
+		ret = ath11k_qmi_load_bdf_target_mem(ab);
 	if (ret < 0) {
 		ath11k_warn(ab, "qmi failed to load board data file:%d\n", ret);
 		return;
@@ -2629,7 +2804,10 @@ static void ath11k_qmi_msg_mem_request_c
 			   msg->mem_seg[i].type, msg->mem_seg[i].size);
 	}
 
-	ret = ath11k_qmi_alloc_target_mem_chunk(ab);
+	if (ab->fixed_mem_region)
+		ret = ath11k_qmi_assign_target_mem_chunk(ab);
+	else
+		ret = ath11k_qmi_alloc_target_mem_chunk(ab);
 	if (ret < 0) {
 		ath11k_warn(ab, "qmi failed to alloc target memory:%d\n", ret);
 		return;
--- a/drivers/net/wireless/ath/ath11k/qmi.h
+++ b/drivers/net/wireless/ath/ath11k/qmi.h
@@ -104,6 +104,12 @@ struct target_info {
 	char fw_build_id[ATH11K_QMI_WLANFW_MAX_BUILD_ID_LEN_V01 + 1];
 };
 
+struct m3_mem_region {
+	u32 size;
+	dma_addr_t paddr;
+	void *vaddr;
+};
+
 struct ath11k_qmi {
 	struct ath11k_base *ab;
 	struct qmi_handle handle;
@@ -120,6 +126,7 @@ struct ath11k_qmi {
 	u8 cal_done;
 	struct target_info target;
 	wait_queue_head_t cold_boot_waitq;
+	struct m3_mem_region m3_mem;
 };
 
 #define QMI_WLANFW_QDSS_TRACE_CONFIG_DOWNLOAD_REQ_MSG_V01_MAX_LEN 6167
