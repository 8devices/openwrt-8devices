From 63d07490c3d468a3366fb6f416b86543789cbf2d Mon Sep 17 00:00:00 2001
From: Anilkumar Kolli <akolli@codeaurora.org>
Date: Mon, 23 Mar 2020 18:52:06 +0530
Subject: [PATCH 164/164] ath11k: add qcn9000 support

Verified FW boot and BDF download.
---
 drivers/net/wireless/ath/ath11k/Makefile   |   6 +-
 drivers/net/wireless/ath/ath11k/ahb.c      |   1 +
 drivers/net/wireless/ath/ath11k/core.c     |  33 ++++--
 drivers/net/wireless/ath/ath11k/core.h     |   1 +
 drivers/net/wireless/ath/ath11k/hal_rx.c   |   2 +-
 drivers/net/wireless/ath/ath11k/hif.h      |   3 +-
 drivers/net/wireless/ath/ath11k/hw.h       |   5 +
 drivers/net/wireless/ath/ath11k/mhi.c      | 162 +++++++++--------------------
 drivers/net/wireless/ath/ath11k/mhi.h      |   2 +-
 drivers/net/wireless/ath/ath11k/pci.c      |  94 +++++++++++++----
 drivers/net/wireless/ath/ath11k/pci.h      |   2 +
 drivers/net/wireless/ath/ath11k/qmi.c      |  45 ++++----
 drivers/net/wireless/ath/ath11k/qmi.h      |  28 ++++-
 drivers/net/wireless/ath/ath11k/testmode.c |   9 +-
 drivers/net/wireless/ath/ath11k/testmode.h |   1 -
 15 files changed, 216 insertions(+), 178 deletions(-)

--- a/drivers/net/wireless/ath/ath11k/core.c
+++ b/drivers/net/wireless/ath/ath11k/core.c
@@ -39,6 +39,8 @@ static const struct ath11k_hw_params ath
 		.spectral_fft_sz = 2,
 		.max_radios = 3,
 		.bdf_addr = 0x4B0C0000,
+		.bdf_sz = ATH11K_QMI_BDF_MAX_SIZE,
+		.caldb_sz = ATH11K_QMI_CALDB_SIZE_IPQ807X,
 		.hw_ops = &qca8074_ops,
 		.credit_flow = false,
 	},
@@ -53,9 +55,25 @@ static const struct ath11k_hw_params ath
 		.spectral_fft_sz = 4,
 		.max_radios = 2,
 		.bdf_addr = 0x4ABC0000,
+		.bdf_sz = ATH11K_QMI_BDF_MAX_SIZE,
+		.caldb_sz = ATH11K_QMI_CALDB_SIZE_IPQ807X,
 		.hw_ops = &qca6018_ops,
 		.credit_flow = false,
 	},
+	{
+		.dev_id = ATH11K_HW_QCN90XX,
+		.name = "qcn9000",
+		.fw = {
+			.dir = QCN90XX_FW_DIR,
+			.board_size = QCN90XX_MAX_BOARD_DATA_SZ,
+			.cal_size = QCN90XX_MAX_CAL_DATA_SZ,
+		},
+		.max_radios = 1,
+		.bdf_addr = 0x54800000,
+		.bdf_sz = ATH11K_QMI_HOST_FWADDR_SZ_QCN9000,
+		.caldb_sz = ATH11K_QMI_CALDB_SIZE_QCN9000,
+		.credit_flow = false,
+	},
 };
 
 /* Map from pdev index to hw mac index */
@@ -74,7 +92,6 @@ static u8 ath11k_qca8074_hw_mac_from_pde
 		return ATH11K_INVALID_HW_MAC_ID;
 	}
 }
-EXPORT_SYMBOL(ath11k_core_get_hw_mac_id);
 
 static u8 ath11k_qca6018_hw_mac_from_pdev_id(struct ath11k_base *ab,
 						    int pdev_idx)
@@ -895,12 +912,6 @@ static int ath11k_core_get_rproc_hdl (st
 		return -EINVAL;
 	}
 
-	ret = ath11k_init_hw_params(ab);
-	if (ret) {
-		ath11k_err(ab, "failed to get hw params %d\n", ret);
-		return ret;
-	}
-
 	return 0;
 }
 
@@ -911,6 +922,12 @@ int ath11k_core_init(struct ath11k_base
 	if(!ab->mhi_support)
 		ath11k_core_get_rproc_hdl(ab);
 
+	ret = ath11k_init_hw_params(ab);
+	if (ret) {
+		ath11k_err(ab, "failed to get hw params %d\n", ret);
+		return ret;
+	}
+
 	ret = ath11k_core_soc_create(ab);
 	if (ret) {
 		ath11k_err(ab, "failed to create soc core: %d\n", ret);
--- a/drivers/net/wireless/ath/ath11k/core.h
+++ b/drivers/net/wireless/ath/ath11k/core.h
@@ -106,6 +106,7 @@ struct ath11k_skb_rxcb {
 enum ath11k_hw_rev {
 	ATH11K_HW_IPQ8074,
 	ATH11K_HW_IPQ6018,
+	ATH11K_HW_QCN90XX,
 	ATH11K_HW_QCA6290,
 	ATH11K_HW_QCA6390,
 };
--- a/drivers/net/wireless/ath/ath11k/hif.h
+++ b/drivers/net/wireless/ath/ath11k/hif.h
@@ -78,7 +78,6 @@ static const u8 ath11k_host2rxdma_ring_m
 	ATH11K_HOST2RXDMA_RING_MASK_2,
 };
 
-
 struct ath11k_hif_ops {
 	u32 (*read32)(struct ath11k_base *sc, u32 address);
 	void (*write32)(struct ath11k_base *sc, u32 address, u32 data);
--- a/drivers/net/wireless/ath/ath11k/hw.h
+++ b/drivers/net/wireless/ath/ath11k/hw.h
@@ -78,6 +78,10 @@
 #define IPQ6018_MAX_BOARD_DATA_SZ	(256 * 1024)
 #define IPQ6018_MAX_CAL_DATA_SZ		IPQ6018_MAX_BOARD_DATA_SZ
 
+/* QCN90XX definitions */
+#define QCN90XX_FW_DIR			ATH11K_FW_DIR "/qcn9000/hw1.0"
+#define QCN90XX_MAX_BOARD_DATA_SZ	(256 * 1024)
+#define QCN90XX_MAX_CAL_DATA_SZ		QCN90XX_MAX_BOARD_DATA_SZ
 
 #define ATH11K_BOARD_MAGIC		"QCA-ATH11K-BOARD"
 #define ATH11K_BOARD_API2_FILE		"board-2.bin"
@@ -119,6 +123,8 @@ struct ath11k_hw_params {
 	u16 dev_id;
 	u8 max_radios;
 	u32 bdf_addr;
+	u32 bdf_sz;
+	u32 caldb_sz;
 	struct {
 		const char *dir;
 		size_t board_size;
--- a/drivers/net/wireless/ath/ath11k/mhi.c
+++ b/drivers/net/wireless/ath/ath11k/mhi.c
@@ -3,12 +3,14 @@
 
 #include <linux/msi.h>
 #include <linux/pci.h>
+#include <linux/of.h>
 
 #include "debug.h"
 #include "mhi.h"
 
 #define MHI_TIMEOUT_DEFAULT_MS	90000
 
+#ifdef UPSTREAM_MHI
 static struct mhi_channel_config ath11k_mhi_channels[] = {
 	{
 		.num = 0,
@@ -109,6 +111,7 @@ static struct mhi_controller_config ath1
 	.num_events = ARRAY_SIZE(ath11k_mhi_events),
 	.event_cfg = ath11k_mhi_events,
 };
+#endif
 
 static int ath11k_pci_get_mhi_msi(struct ath11k_pci *ar_pci)
 {
@@ -135,7 +138,7 @@ static int ath11k_pci_get_mhi_msi(struct
 						base_vector + i);
 
 	ar_pci->mhi_ctrl->irq = irq;
-	ar_pci->mhi_ctrl->nr_irqs = num_vectors;
+	ar_pci->mhi_ctrl->msi_allocated = num_vectors;
 
 	return 0;
 }
@@ -146,8 +149,9 @@ static int ath11k_mhi_link_status(struct
 }
 
 static void ath11k_mhi_notify_status(struct mhi_controller *mhi_ctrl, void *priv,
-				     enum mhi_callback reason)
+				     enum MHI_CB reason)
 {
+
 }
 
 static int ath11k_mhi_pm_runtime_get(struct mhi_controller *mhi_ctrl, void *priv)
@@ -165,30 +169,66 @@ int ath11k_pci_register_mhi(struct ath11
 	struct pci_dev *pci_dev = ar_pci->pdev;
 	struct ath11k_base *ab = ar_pci->ab;
 	struct mhi_controller *mhi_ctrl;
-	int ret;
-
-	mhi_ctrl = kzalloc(sizeof(*mhi_ctrl), GFP_KERNEL);
-	if (!mhi_ctrl)
-		return PTR_ERR(mhi_ctrl);
+	struct device_node *np;
+	int ret, len, sw, aw;
+	unsigned int *reg, *reg_end;
+	unsigned long start, size;
+	bool no_dt_entry = 0;
+
+	mhi_ctrl = mhi_alloc_controller(0);
+	if (!mhi_ctrl) {
+		ath11k_err(ab, "invalid mhi controller context\n");
+		return -EINVAL;
+	}
 
 	ar_pci->mhi_ctrl = mhi_ctrl;
 
 	mhi_ctrl->priv_data = ar_pci;
 	mhi_ctrl->dev = &pci_dev->dev;
+	mhi_ctrl->of_node = ab->dev->of_node;
+	mhi_ctrl->dev_id = ar_pci->dev_id;
+	mhi_ctrl->domain = pci_domain_nr(pci_dev->bus);
+	mhi_ctrl->bus = pci_dev->bus->number;
+	mhi_ctrl->slot = PCI_SLOT(pci_dev->devfn);
 
 	mhi_ctrl->fw_image = ATH11K_PCI_FW_FILE_NAME;
-
 	mhi_ctrl->regs = ar_pci->mem;
 
 	ret = ath11k_pci_get_mhi_msi(ar_pci);
 	if (ret) {
 		ath11k_err(ab, "failed to get msi for mhi\n");
-		kfree(mhi_ctrl);
 		return ret;
 	}
 
-	mhi_ctrl->iova_start = 0;
-	mhi_ctrl->iova_stop = 0xffffffff;
+	np = of_find_node_by_type(NULL, "memory");
+	if (!np)
+		no_dt_entry = 1;
+
+	aw = of_n_addr_cells(np);
+	sw = of_n_size_cells(np);
+
+	reg = (unsigned int *)of_get_property(np, "reg", &len);
+	if (!reg)
+		no_dt_entry = 1;
+
+	reg_end = reg + len/4;
+	do {
+		start = of_read_number(reg, aw);
+		reg += aw;
+		size = of_read_number(reg, sw);
+		reg += sw;
+	} while (reg < reg_end);
+
+	if (no_dt_entry) {
+        	mhi_ctrl->iova_start = 0;
+        	mhi_ctrl->iova_stop = 0xFFFFFFFF;
+	} else {
+        	mhi_ctrl->iova_start = (dma_addr_t)(start + 0x1000000);
+        	mhi_ctrl->iova_stop = (dma_addr_t)(start + size);
+	}
+
+	ath11k_info(ab, "mhi_ctrl start addr 0x%llx end addr 0x%llx\n",
+			(u64)mhi_ctrl->iova_start, (u64)mhi_ctrl->iova_stop);
 
 	mhi_ctrl->link_status = ath11k_mhi_link_status;
 	mhi_ctrl->status_cb = ath11k_mhi_notify_status;
@@ -199,10 +239,9 @@ int ath11k_pci_register_mhi(struct ath11
 	mhi_ctrl->seg_len = SZ_512K;
 	mhi_ctrl->fbc_download = true;
 
-	ret = mhi_register_controller(mhi_ctrl, &ath11k_mhi_config);
+	ret = of_register_mhi_controller(mhi_ctrl);
 	if (ret) {
 		ath11k_err(ab, "failed to register to mhi bus, err = %d\n", ret);
-		kfree(mhi_ctrl);
 		return ret;
 	}
 
@@ -213,7 +252,7 @@ void ath11k_pci_unregister_mhi(struct at
 {
 	struct mhi_controller *mhi_ctrl = ar_pci->mhi_ctrl;
 
-	mhi_unregister_controller(mhi_ctrl);
+	mhi_unregister_mhi_controller(mhi_ctrl);
 	kfree(mhi_ctrl->irq);
 }
 
@@ -352,7 +391,7 @@ int ath11k_pci_set_mhi_state(struct ath1
 		ret = 0;
 		break;
 	case ATH11K_MHI_POWER_ON:
-		ret = mhi_async_power_up(ar_pci->mhi_ctrl);
+		ret = mhi_sync_power_up(ar_pci->mhi_ctrl);
 		break;
 	case ATH11K_MHI_POWER_OFF:
 		mhi_power_down(ar_pci->mhi_ctrl, true);
--- a/drivers/net/wireless/ath/ath11k/mhi.h
+++ b/drivers/net/wireless/ath/ath11k/mhi.h
@@ -6,7 +6,7 @@
 #define _ATH11K_MHI_H
 
 #include "pci.h"
-#define ATH11K_PCI_FW_FILE_NAME		"amss.bin"
+#define ATH11K_PCI_FW_FILE_NAME		"ath11k/qcn9000/hw1.0/amss.bin"
 
 enum ath11k_mhi_state {
 	ATH11K_MHI_INIT,
--- a/drivers/net/wireless/ath/ath11k/pci.c
+++ b/drivers/net/wireless/ath/ath11k/pci.c
@@ -7,8 +7,8 @@
 #include <linux/msi.h>
 #include <linux/pci.h>
 
-#include "ahb.h"
 #include "core.h"
+#include "ahb.h"
 #include "hif.h"
 #include "mhi.h"
 #include "pci.h"
@@ -17,12 +17,13 @@
 static const struct pci_device_id ath11k_pci_id_table[] = {
 	{ QCA6290_VENDOR_ID, QCA6290_DEVICE_ID, PCI_ANY_ID, PCI_ANY_ID },
 	{ QCA6390_VENDOR_ID, QCA6390_DEVICE_ID, PCI_ANY_ID, PCI_ANY_ID },
+	{ QCN90XX_VENDOR_ID, QCN90XX_DEVICE_ID, PCI_ANY_ID, PCI_ANY_ID },
 	{ 0 }
 };
 
 MODULE_DEVICE_TABLE(pci, ath11k_pci_id_table);
 
-static struct ath11k_msi_config msi_config = {
+static struct ath11k_msi_config msi_config_6x90 = {
 	.total_vectors = 32,
 	.total_users = 4,
 	.users = (struct ath11k_msi_user[]) {
@@ -33,6 +34,17 @@ static struct ath11k_msi_config msi_conf
 	},
 };
 
+static struct ath11k_msi_config msi_config_90xx = {
+	.total_vectors = 16,
+	.total_users = 3,
+	.users = (struct ath11k_msi_user[]) {
+		{ .name = "MHI", .num_vectors = 3, .base_vector = 0 },
+		{ .name = "CE", .num_vectors = 5, .base_vector = 3 },
+		{ .name = "DP", .num_vectors = 8, .base_vector = 8 },
+	},
+};
+
+
 /* Target firmware's Copy Engine configuration. */
 static const struct ce_pipe_config target_ce_config_wlan[] = {
 	/* CE0: host->target HTC control and raw streams */
@@ -108,10 +120,10 @@ static const struct ce_pipe_config targe
 	/* CE7 used only by Host */
 	{
 		.pipenum = __cpu_to_le32(7),
-		.pipedir = __cpu_to_le32(PIPEDIR_INOUT_H2H),
-		.nentries = __cpu_to_le32(0),
-		.nbytes_max = __cpu_to_le32(0),
-		.flags = __cpu_to_le32(CE_ATTR_FLAGS | CE_ATTR_DIS_INTR),
+		.pipedir = __cpu_to_le32(PIPEDIR_OUT),
+		.nentries = __cpu_to_le32(32),
+		.nbytes_max = __cpu_to_le32(2048),
+		.flags = __cpu_to_le32(0x2000),
 		.reserved = __cpu_to_le32(0),
 	},
 
@@ -191,10 +203,22 @@ static const struct service_to_pipe targ
 	{
 		__cpu_to_le32(ATH11K_HTC_SVC_ID_RSVD_CTRL),
 		__cpu_to_le32(PIPEDIR_IN),	/* in = DL = target -> host */
-		__cpu_to_le32(2),
+		__cpu_to_le32(1),
 	},
 
 	{
+		__cpu_to_le32(ATH11K_HTC_SVC_ID_TEST_RAW_STREAMS),
+		__cpu_to_le32(PIPEDIR_OUT),	/* out = UL = host -> target */
+		__cpu_to_le32(0),
+	},
+	{
+		__cpu_to_le32(ATH11K_HTC_SVC_ID_TEST_RAW_STREAMS),
+		__cpu_to_le32(PIPEDIR_IN),	/* in = DL = target -> host */
+		__cpu_to_le32(1),
+	},
+
+
+	{
 		__cpu_to_le32(ATH11K_HTC_SVC_ID_HTT_DATA_MSG),
 		__cpu_to_le32(PIPEDIR_OUT),	/* out = UL = host -> target */
 		__cpu_to_le32(4),
@@ -204,14 +228,21 @@ static const struct service_to_pipe targ
 		__cpu_to_le32(PIPEDIR_IN),	/* in = DL = target -> host */
 		__cpu_to_le32(1),
 	},
+	{
+		__cpu_to_le32(ATH11K_HTC_SVC_ID_PKT_LOG),
+		__cpu_to_le32(PIPEDIR_IN),	/* in = DL = target -> host */
+		__cpu_to_le32(5),
+	},
+
+       /* (Additions here) */
+
+       { /* must be last */
+               __cpu_to_le32(0),
+               __cpu_to_le32(0),
+               __cpu_to_le32(0),
+       },
 
-	/* (Additions here) */
 
-	{ /* must be last */
-		__cpu_to_le32(0),
-		__cpu_to_le32(0),
-		__cpu_to_le32(0),
-	},
 };
 
 static inline void ath11k_pci_select_window(struct ath11k_pci *ar_pci, u32 offset)
@@ -446,13 +477,20 @@ static int ath11k_pci_config_irq(struct
 static void ath11k_pci_init_qmi_ce_config(struct ath11k_base *ab)
 {
 	struct ath11k_qmi_ce_cfg *cfg = &ab->qmi.ce_cfg;
+	u32 node_id;
 
 	cfg->tgt_ce = target_ce_config_wlan;
-	cfg->tgt_ce_len = sizeof(target_ce_config_wlan);
+	cfg->tgt_ce_len = ARRAY_SIZE(target_ce_config_wlan);
 
 	cfg->svc_to_ce_map = target_service_to_ce_map_wlan;
-	cfg->svc_to_ce_map_len = sizeof(target_service_to_ce_map_wlan);
-	ab->qmi.service_ins_id = ATH11K_QMI_WLFW_SERVICE_INS_ID_V01_QCA6x90;
+	cfg->svc_to_ce_map_len = ARRAY_SIZE(target_service_to_ce_map_wlan);
+
+	if (of_property_read_u32(ab->dev->of_node, "qrtr_node_id",
+				&node_id)) {
+		ath11k_err(ab, "Error: no qrtr_node_id in device_tree\n");
+	}
+
+	ab->qmi.service_ins_id = node_id + FW_ID_BASE;
 }
 
 static void ath11k_pci_ce_irqs_enable(struct ath11k_base *ab)
@@ -478,7 +516,12 @@ void ath11k_pci_qca6x90_powerdown(struct
 
 static int ath11k_pci_get_msi_assignment(struct ath11k_pci *ar_pci)
 {
-	ar_pci->msi_config = &msi_config;
+	struct ath11k_base *ab = ar_pci->ab;
+
+	if (ab->hw_rev == ATH11K_HW_QCN90XX)
+		ar_pci->msi_config = &msi_config_90xx;
+	else
+		ar_pci->msi_config = &msi_config_6x90;
 
 	return 0;
 }
@@ -507,7 +550,7 @@ static int ath11k_pci_enable_msi(struct
 	num_vectors = pci_alloc_irq_vectors(ar_pci->pdev,
 					    msi_config->total_vectors,
 					    msi_config->total_vectors,
-					    PCI_IRQ_MSI);
+					    PCI_IRQ_NOMSIX);
 	if (num_vectors != msi_config->total_vectors) {
 		ath11k_err(ab, "failed to get enough MSI vectors (%d), available vectors = %d",
 			   msi_config->total_vectors, num_vectors);
@@ -544,7 +587,7 @@ static void ath11k_pci_disable_msi(struc
 
 static int ath11k_pci_claim(struct ath11k_pci *ar_pci, struct pci_dev *pdev)
 {
-	u32 pci_dma_mask = PCI_DMA_MASK_32_BIT;
+	u32 pci_dma_mask = PCI_DMA_MASK_64_BIT;
 	struct ath11k_base *ab = ar_pci->ab;
 	u16 device_id;
 	int ret = 0;
@@ -746,6 +789,9 @@ static int ath11k_pci_probe(struct pci_d
 	case QCA6390_DEVICE_ID:
 		hw_rev = ATH11K_HW_QCA6390;
 		break;
+	case QCN90XX_DEVICE_ID:
+		hw_rev = ATH11K_HW_QCN90XX;
+		break;
 	default:
 		dev_err(&pdev->dev, "Unknown PCI device found: 0x%x\n",
 			pci_dev->device);
@@ -768,14 +814,18 @@ static int ath11k_pci_probe(struct pci_d
 	ar_pci->dev = &pdev->dev;
 	ar_pci->pdev = pdev;
 	ab->dev = &pdev->dev;
-	ab->hw_rev = hw_rev;
 	ab->hif.ops = &ath11k_pci_hif_ops;
 	pci_set_drvdata(pdev, ab);
 	ab->fixed_bdf_addr= false;
 	ab->m3_fw_support = true;
 	ab->mhi_support = true;
-	ab->fixed_mem_region = false;
 	ab->use_register_windowing = true;
+	if (ab->hw_rev == ATH11K_HW_QCN90XX) {
+		ab->fixed_mem_region = true;
+	} else {
+		ab->fixed_mem_region = false;
+	}
+
 	spin_lock_init(&ar_pci->window_lock);
 
 	ret = ath11k_pci_claim(ar_pci, pdev);
@@ -808,11 +858,13 @@ static int ath11k_pci_probe(struct pci_d
 	}
 
 	ath11k_pci_init_qmi_ce_config(ab);
+
 	ath11k_pci_config_irq(ab);
 	if (ret) {
 		ath11k_err(ab, "failed to config irq: %d\n", ret);
 		goto err_ce_free;
 	}
+
 	ret = ath11k_core_init(ab);
 	if (ret) {
 		ath11k_err(ab, "failed to init core: %d\n", ret);
--- a/drivers/net/wireless/ath/ath11k/pci.h
+++ b/drivers/net/wireless/ath/ath11k/pci.h
@@ -11,6 +11,8 @@
 #define QCA6290_DEVICE_ID		0x1100
 #define QCA6390_VENDOR_ID		0x17CB
 #define QCA6390_DEVICE_ID		0x1101
+#define QCN90XX_VENDOR_ID		0x17CB
+#define QCN90XX_DEVICE_ID		0x1104
 #define PCI_BAR_NUM			0
 #define PCI_DMA_MASK_64_BIT		64
 #define PCI_DMA_MASK_32_BIT		32
--- a/drivers/net/wireless/ath/ath11k/qmi.c
+++ b/drivers/net/wireless/ath/ath11k/qmi.c
@@ -10,11 +10,12 @@
 #include <linux/firmware.h>
 
 /* set the default max assoc sta to max supported by driver */
-bool enable_cold_boot_cal = 1;
+bool enable_cold_boot_cal = 0;
+EXPORT_SYMBOL(enable_cold_boot_cal);
 module_param(enable_cold_boot_cal, bool, 0644);
 MODULE_PARM_DESC(enable_cold_boot_cal, "cold boot calibration enable:1 disable:0");
 
-unsigned int enable_qdss_trace = 1;
+unsigned int enable_qdss_trace = 0;
 module_param(enable_qdss_trace, uint, 0644);
 MODULE_PARM_DESC(enable_qdss_trace, "qdss trace enable:1 disable:0");
 
@@ -203,9 +204,9 @@ static struct qmi_elem_info qmi_wlanfw_q
 };
 
 #define BIN_BDF_FILE_NAME		"bdwlan.bin"
-#define BIN_BDF_FILE_NAME_PREFIX	"bdwlan.e"
+#define BIN_BDF_FILE_NAME_PREFIX	"bdwlan.b"
 #define BDF_FILE_NAME_PREFIX		"bdwlan"
-#define MAX_M3_FILE_NAME_LENGTH		13
+#define MAX_M3_FILE_NAME_LENGTH		32
 #define DEFAULT_M3_FILE_NAME		"m3.bin"
 
 static struct qmi_elem_info qmi_wlanfw_host_cap_req_msg_v01_ei[] = {
@@ -2037,7 +2038,6 @@ out:
 static int ath11k_qmi_alloc_target_mem_chunk(struct ath11k_base *ab)
 {
 	int i, idx;
-	u32 caldb_location[2] = {0, 0};
 
 	for (i = 0, idx = 0; i < ab->qmi.mem_seg_count; i++) {
 		ab->qmi.target_mem[i].vaddr = (unsigned long)dma_alloc_coherent(ab->dev, ab->qmi.target_mem[i].size,
@@ -2056,10 +2056,26 @@ static int ath11k_qmi_alloc_target_mem_c
 
 static int ath11k_qmi_assign_target_mem_chunk(struct ath11k_base *ab)
 {
+	struct device *dev = ab->dev;
 	int i, idx;
+	u32 addr = 0;
 
 	for (i = 0, idx = 0; i < ab->qmi.mem_seg_count; i++) {
 		switch (ab->qmi.target_mem[i].type) {
+		case HOST_DDR_REGION_TYPE:
+			if (of_property_read_u32(dev->of_node, "base-addr", &addr)) {
+				ath11k_warn(ab, "qmi fail to get base-addr in dt\n");
+				return -EINVAL;
+			}
+
+			ab->qmi.target_mem[idx].paddr = (phys_addr_t)addr;
+			ab->qmi.target_mem[idx].vaddr =
+				(u32)ioremap(ab->qmi.target_mem[idx].paddr,
+					ab->qmi.target_mem[i].size);
+			ab->qmi.target_mem[idx].size = ab->qmi.target_mem[i].size;
+			ab->qmi.target_mem[idx].type = ab->qmi.target_mem[i].type;
+			idx++;
+			break;
 		case BDF_MEM_REGION_TYPE:
 			ab->qmi.target_mem[idx].paddr = ab->hw_params.bdf_addr;
 			ab->qmi.target_mem[idx].vaddr = ab->hw_params.bdf_addr;
@@ -2068,24 +2084,16 @@ static int ath11k_qmi_assign_target_mem_
 			idx++;
 			break;
 		case CALDB_MEM_REGION_TYPE:
-			if (ab->qmi.target_mem[i].size > ATH11K_QMI_CALDB_SIZE) {
+			if (ab->qmi.target_mem[i].size > ab->hw_params.caldb_sz)
 				ath11k_warn(ab, "qmi mem size is low to load caldata\n");
-				return -EINVAL;
-			}
 
-			if (of_property_read_u32_array(ab->dev->of_node, "qcom,caldb-addr",
-						       &caldb_location[0],
-						       ARRAY_SIZE(caldb_location))) {
-				ath11k_warn(ab, "qmi no bdf_addr in device_tree\n");
-			}
+			if (of_property_read_u32(dev->of_node, "qcom,caldb-addr", &addr))
+				ath11k_warn(ab, "qmi fail to get caldb-addr in dt\n");
 
-			if (enable_cold_boot_cal) {
-				ab->qmi.target_mem[idx].paddr = caldb_location[ab->qmi.target_mem_mode];
-				ab->qmi.target_mem[idx].vaddr = caldb_location[ab->qmi.target_mem_mode];
-			} else {
-				ab->qmi.target_mem[idx].paddr = 0;
-				ab->qmi.target_mem[idx].vaddr = 0;
-			}
+			ab->qmi.target_mem[idx].paddr = (phys_addr_t)addr;
+
+			ab->qmi.target_mem[idx].vaddr = (u32)ioremap(ab->qmi.target_mem[idx].paddr,
+								ab->qmi.target_mem[i].size);
 			ab->qmi.target_mem[idx].size = ab->qmi.target_mem[i].size;
 			ab->qmi.target_mem[idx].type = ab->qmi.target_mem[i].type;
 			idx++;
@@ -2333,8 +2341,8 @@ static int ath11k_qmi_load_bdf_target_me
 	if (ab->qmi.target.board_id == 0xFF)
 		snprintf(filename, sizeof(filename), BIN_BDF_FILE_NAME);
 	else if (ab->qmi.target.board_id < 0xFF)
-		snprintf(filename, sizeof(filename),
-			 BIN_BDF_FILE_NAME_PREFIX "%02x",
+		snprintf(filename, sizeof(filename), "%s/%s%02x", ab->hw_params.fw.dir,
+			 BIN_BDF_FILE_NAME_PREFIX,
 			 ab->qmi.target.board_id);
 	else
 		snprintf(filename, sizeof(filename),
@@ -2358,10 +2366,10 @@ static int ath11k_qmi_load_bdf_target_me
 		req->total_size_valid = 1;
 		req->total_size = fw_entry->size;
 		req->seg_id_valid = 1;
-		req->data_valid = 0;
+		req->data_valid = 1;
 		req->data_len = ATH11K_QMI_MAX_BDF_FILE_NAME_SIZE;
-		req->bdf_type = 0;
-		req->bdf_type_valid = 0;
+		req->bdf_type = 1;
+		req->bdf_type_valid = 1;
 		req->end_valid = 1;
 		req->end = 0;
 
@@ -2419,7 +2427,7 @@ static int ath11k_load_m3_bin(struct ath
 	const struct firmware *fw_entry;
 	int ret;
 
-	snprintf(filename, sizeof(filename), DEFAULT_M3_FILE_NAME);
+	snprintf(filename, sizeof(filename), "%s/%s", ab->hw_params.fw.dir, DEFAULT_M3_FILE_NAME);
 	ret = request_firmware(&fw_entry, filename,
 			       ab->dev);
 	if (ret) {
--- a/drivers/net/wireless/ath/ath11k/qmi.h
+++ b/drivers/net/wireless/ath/ath11k/qmi.h
@@ -12,7 +12,7 @@
 #include <linux/remoteproc/qcom_rproc.h>
 
 #define ATH11K_HOST_VERSION_STRING		"WIN"
-#define ATH11K_QMI_WLANFW_TIMEOUT_MS		5000
+#define ATH11K_QMI_WLANFW_TIMEOUT_MS		10000
 #define ATH11K_QMI_MAX_BDF_FILE_NAME_SIZE	64
 #define ATH11K_QMI_BDF_ADDRESS			0x4B0C0000
 #define ATH11K_QMI_BDF_MAX_SIZE			(256 * 1024)
@@ -26,10 +26,14 @@
 #define ATH11K_QMI_WLANFW_MAX_TIMESTAMP_LEN_V01	32
 #define ATH11K_QMI_RESP_LEN_MAX			8192
 #define ATH11K_QMI_WLANFW_MAX_NUM_MEM_SEG_V01	32
-#define ATH11K_QMI_CALDB_SIZE			0x480000
+#define ATH11K_QMI_CALDB_SIZE_IPQ807X			0x480000
+#define ATH11K_QMI_HOST_FWADDR_SZ_QCN9000		0x2F00000
+#define ATH11K_QMI_CALDB_SIZE_QCN9000		0x800000
 #define ATH11K_QMI_DEFAULT_CAL_FILE_NAME	"caldata.bin"
 #define ATH11K_QMI_MAX_QDSS_CONFIG_FILE_NAME_SIZE 64
 #define ATH11K_QMI_DEFAULT_QDSS_CONFIG_FILE_NAME "qdss_trace_config.bin"
+#define NODE_ID_BASE 0x27
+#define FW_ID_BASE 7
 
 #define QMI_WLFW_REQUEST_MEM_IND_V01		0x0035
 #define QMI_WLFW_FW_MEM_READY_IND_V01		0x0037
@@ -221,7 +225,7 @@ struct qmi_wlanfw_host_cap_resp_msg_v01
 	struct qmi_response_type_v01 resp;
 };
 
-#define QMI_WLANFW_IND_REGISTER_REQ_MSG_V01_MAX_LEN		66
+#define QMI_WLANFW_IND_REGISTER_REQ_MSG_V01_MAX_LEN		74
 #define QMI_WLANFW_IND_REGISTER_REQ_V01				0x0020
 #define QMI_WLANFW_IND_REGISTER_RESP_MSG_V01_MAX_LEN		18
 #define QMI_WLANFW_IND_REGISTER_RESP_V01			0x0020
@@ -258,6 +262,10 @@ struct qmi_wlanfw_ind_register_req_msg_v
 	u8 qdss_trace_save_enable;
 	u8 qdss_trace_free_enable_valid;
 	u8 qdss_trace_free_enable;
+        u8 respond_get_info_enable_valid;
+        u8 respond_get_info_enable;
+        u8 m3_dump_upload_req_enable_valid;
+        u8 m3_dump_upload_req_enable;
 };
 
 struct qmi_wlanfw_ind_register_resp_msg_v01 {
@@ -456,7 +464,7 @@ struct qmi_wlanfw_m3_info_resp_msg_v01 {
 
 #define QMI_WLANFW_WLAN_MODE_REQ_MSG_V01_MAX_LEN	11
 #define QMI_WLANFW_WLAN_MODE_RESP_MSG_V01_MAX_LEN	7
-#define QMI_WLANFW_WLAN_CFG_REQ_MSG_V01_MAX_LEN		803
+#define QMI_WLANFW_WLAN_CFG_REQ_MSG_V01_MAX_LEN		866
 #define QMI_WLANFW_WLAN_CFG_RESP_MSG_V01_MAX_LEN	7
 #define QMI_WLANFW_WLAN_MODE_REQ_V01			0x0022
 #define QMI_WLANFW_WLAN_MODE_RESP_V01			0x0022
@@ -478,6 +486,16 @@ struct qmi_wlanfw_wlan_mode_resp_msg_v01
 	struct qmi_response_type_v01 resp;
 };
 
+struct qmi_wlanfw_rri_over_ddr_cfg_s_v01 {
+	u32 base_addr_low;
+	u32 base_addr_high;
+};
+
+struct qmi_wlanfw_msi_cfg_s_v01 {
+	u16 ce_id;
+	u16 msi_vector;
+};
+
 struct qmi_wlanfw_wlan_cfg_req_msg_v01 {
 	u8 host_version_valid;
 	char host_version[QMI_WLANFW_MAX_STR_LEN_V01 + 1];
@@ -497,6 +515,12 @@ struct qmi_wlanfw_wlan_cfg_req_msg_v01 {
 	u32 shadow_reg_v2_len;
 	struct qmi_wlanfw_shadow_reg_v2_cfg_s_v01
 		shadow_reg_v2[QMI_WLANFW_MAX_NUM_SHADOW_REG_V2_V01];
+	u8 rri_over_ddr_cfg_valid;
+	struct qmi_wlanfw_rri_over_ddr_cfg_s_v01 rri_over_ddr_cfg;
+	u8 msi_cfg_valid;
+	u32 msi_cfg_len;
+	struct qmi_wlanfw_msi_cfg_s_v01 msi_cfg[QMI_WLANFW_MAX_NUM_CE_V01];
+
 };
 
 struct qmi_wlanfw_wlan_cfg_resp_msg_v01 {
--- a/drivers/net/wireless/ath/ath11k/testmode.c
+++ b/drivers/net/wireless/ath/ath11k/testmode.c
@@ -8,6 +8,7 @@
 #include "debug.h"
 #include "wmi.h"
 #include "hw.h"
+#include "hif.h"
 #include "core.h"
 #include "testmode_i.h"
 
@@ -208,8 +209,8 @@ static int ath11k_tm_cmd_testmode_start(
 	init_completion(&ar->fw_mode_reset);
 
 	set_bit(ATH11K_FLAG_FW_RESTART_FOR_HOST, &ar->ab->dev_flags);
-	ath11k_ahb_power_down(ar->ab);
-	ath11k_ahb_power_up(ar->ab);
+	ath11k_hif_power_down(ar->ab);
+	ath11k_hif_power_up(ar->ab);
 
 	if (!wait_for_completion_timeout(&ar->fw_mode_reset,
 					 FTM_MODE_RESET_TIMEOUT_HZ)) {
@@ -251,8 +252,8 @@ static int ath11k_tm_cmd_testmode_stop(s
 	init_completion(&ar->fw_mode_reset);
 
 	set_bit(ATH11K_FLAG_FW_RESTART_FOR_HOST, &ar->ab->dev_flags);
-	ath11k_ahb_power_down(ar->ab);
-	ath11k_ahb_power_up(ar->ab);
+	ath11k_hif_power_down(ar->ab);
+	ath11k_hif_power_up(ar->ab);
 
 	if (!wait_for_completion_timeout(&ar->fw_mode_reset,
 					 FTM_MODE_RESET_TIMEOUT_HZ)) {
--- a/drivers/net/wireless/ath/ath11k/testmode.h
+++ b/drivers/net/wireless/ath/ath11k/testmode.h
@@ -4,7 +4,6 @@
  */
 
 #include "core.h"
-#include "ahb.h"
 
 #define MAX_WMI_UTF_LEN 252
 #define WMI_TLV_HDR_SIZE 4
--- a/local-symbols
+++ b/local-symbols
@@ -137,3 +137,5 @@ ATH11K_DEBUGFS=
 ATH11K_TRACING=
 ATH11K_SPECTRAL=
 ATH11K_PKTLOG=
+ATH11K_AHB=
+ATH11K_PCI=
