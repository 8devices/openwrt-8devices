From b847da38a22fb10e175f51825a4f46ad419e5c22 Mon Sep 17 00:00:00 2001
From: Hari Chandrakanthan <quic_haric@quicinc.com>
Date: Wed, 16 Mar 2022 23:58:40 +0530
Subject: [PATCH] ath11k: fix scheduling while atomic in tbtt offset handling

ath11k_wmi_bcn_tmpl is called from ath11k wmi event handler
ath11k_wmi_tlv_op_rx while handling tbtt offset wmi event.

ath11k_wmi_bcn_tmpl api can go to sleep and wmi event handler
is atomic.

So put the tbtt offset handling in a workqueue to avoid the
scheduling while atomic issue.

Signed-off-by: Hari Chandrakanthan <quic_haric@quicinc.com>
---
 drivers/net/wireless/ath/ath11k/core.h |  1 +
 drivers/net/wireless/ath/ath11k/mac.c  | 17 +++++++++++++++++
 drivers/net/wireless/ath/ath11k/wmi.c  | 26 ++------------------------
 3 files changed, 20 insertions(+), 24 deletions(-)

--- a/drivers/net/wireless/ath/ath11k/core.h
+++ b/drivers/net/wireless/ath/ath11k/core.h
@@ -410,6 +410,7 @@ struct ath11k_vif {
 	u32 tids_rst;
 	u64 tbtt_offset;
 	u8 nontransmitting_vif_count;
+	struct work_struct update_bcn_template_work;
 	DECLARE_BITMAP(free_groupidx_map, ATH11K_GROUP_KEYS_NUM_MAX);
 };
 
--- a/drivers/net/wireless/ath/ath11k/mac.c
+++ b/drivers/net/wireless/ath/ath11k/mac.c
@@ -7541,6 +7541,21 @@ err:
 	return ret;
 }
 
+static void ath11k_update_bcn_template_work(struct work_struct *work)
+{
+	struct ath11k_vif *arvif = container_of(work, struct ath11k_vif,
+						update_bcn_template_work);
+	struct ath11k *ar = arvif->ar;
+	int ret;
+
+	mutex_lock(&ar->conf_mutex);
+	ret = ath11k_mac_setup_bcn_tmpl(arvif);
+	mutex_unlock(&ar->conf_mutex);
+	if (ret)
+		ath11k_warn(ar->ab, "failed to submit beacon template for vdev_id : %d ret : %d\n",
+			    arvif->vdev_id, ret);
+}
+
 static void ath11k_mac_op_stop(struct ieee80211_hw *hw)
 {
 	struct ath11k *ar = hw->priv;
@@ -7811,6 +7826,7 @@ static int ath11k_mac_op_add_interface(s
 
 	INIT_DELAYED_WORK(&arvif->connection_loss_work,
 			  ath11k_mac_vif_sta_connection_loss_work);
+	INIT_WORK(&arvif->update_bcn_template_work, ath11k_update_bcn_template_work);
 
 	for (i = 0; i < ARRAY_SIZE(arvif->bitrate_mask.control); i++) {
 		arvif->bitrate_mask.control[i].legacy = 0xffffffff;
@@ -8121,6 +8137,7 @@ static void ath11k_mac_op_remove_interfa
 	}
 
 	cancel_delayed_work_sync(&arvif->connection_loss_work);
+	cancel_work_sync(&arvif->update_bcn_template_work);
 
 	ath11k_dbg(ab, ATH11K_DBG_MAC, "mac remove interface (vdev %d)\n",
 		   arvif->vdev_id);
--- a/drivers/net/wireless/ath/ath11k/wmi.c
+++ b/drivers/net/wireless/ath/ath11k/wmi.c
@@ -10222,16 +10222,12 @@ static int ath11k_wmi_tbtt_offset_subtlv
 						u16 len, const void *ptr,
 						void *data)
 {
-	int ret;
+	int ret = 0;
 	struct ath11k *ar;
 	u64 tx_delay = 0;
-	struct sk_buff *bcn;
-	u64 adjusted_tsf;
-	struct ieee80211_mgmt *mgmt;
 	struct wmi_tbtt_offset_info *tbtt_offset_info;
 	struct ieee80211_chanctx_conf *conf;
 	struct ath11k_vif *arvif;
-	struct ieee80211_mutable_offsets offs = {};
 
 	tbtt_offset_info = (struct wmi_tbtt_offset_info *)ptr;
 
@@ -10276,25 +10272,7 @@ static int ath11k_wmi_tbtt_offset_subtlv
 	}
 	arvif->tbtt_offset -= tx_delay;
 
-	/* Make the TSF offset negative so beacons in the same
-	 * staggered batch have the same TSF.
-	 */
-	adjusted_tsf = cpu_to_le64(0ULL - arvif->tbtt_offset);
-	bcn = ieee80211_beacon_get_template(ar->hw, arvif->vif, &offs);
-	if (!bcn) {
-		ath11k_warn(ab, "failed to get beacon template from mac80211\n");
-		ret = -EINVAL;
-		goto exit;
-	}
-
-	mgmt = (void *)bcn->data;
-	memcpy(&mgmt->u.beacon.timestamp, &adjusted_tsf, sizeof(adjusted_tsf));
-	ret = ath11k_wmi_bcn_tmpl(ar, arvif->vdev_id, &offs, bcn, 0);
-	kfree_skb(bcn);
-
-	if (ret)
-		ath11k_warn(ab, "failed to submit beacon template command: %d\n",
-			    ret);
+	ieee80211_queue_work(ar->hw, &arvif->update_bcn_template_work);
 exit:
 	rcu_read_unlock();
 	return ret;
