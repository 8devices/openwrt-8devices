From 60d0527f61e67556caff6b2670e3c1ff60056fc4 Mon Sep 17 00:00:00 2001
From: Thiraviyam Mariyappan <quic_tmariyap@quicinc.com>
Date: Thu, 21 Oct 2021 15:04:19 +0530
Subject: [PATCH] ath11k: Add cbf support for pktlog

CBF is compressed Beamforming report. This change will set up monitor mode
status/buffer ring filters to enable CBF logging and will get the CBF frame
from the destination ring. These CBF frames are sent to the pktlog for post
processing.

Additionally two modes are added in pktlog
CBF + lite_mode = mode 3
CBF + full_mode = mode 4

Below is the command to enable the cbf pktlog filter
echo "0x10F <mode>"  > /sys/kernel/debug/ath11k/ipq8074\ hw2.0/mac0/pktlog_filter

Signed-off-by: Thiraviyam Mariyappan <quic_tmariyap@quicinc.com>
---
 drivers/net/wireless/ath/ath11k/debugfs.c | 47 ++++++++++++++++++++----
 drivers/net/wireless/ath/ath11k/debugfs.h | 23 +++++++++++-
 drivers/net/wireless/ath/ath11k/dp.h      | 32 +++++++++++++++++
 drivers/net/wireless/ath/ath11k/dp_rx.c   | 59 +++++++++++++++++++++++++++++--
 drivers/net/wireless/ath/ath11k/pktlog.c  | 40 +++++++++++++++++++++
 5 files changed, 190 insertions(+), 11 deletions(-)

--- a/drivers/net/wireless/ath/ath11k/debugfs.c
+++ b/drivers/net/wireless/ath/ath11k/debugfs.c
@@ -2044,11 +2044,14 @@ static ssize_t ath11k_write_pktlog_filte
 {
 	struct ath11k *ar = file->private_data;
 	struct ath11k_base *ab = ar->ab;
-	struct htt_rx_ring_tlv_filter tlv_filter = {0};
+	struct htt_rx_ring_tlv_filter tlv_filter = {0}, cbf_tlv_filter = {0};
 	u32 rx_filter = 0, ring_id, filter, mode;
 	u8 buf[128] = {0};
 	int i, ret, rx_buf_sz = 0;
 	ssize_t rc;
+	char *pktlog_mode[ATH11K_PKTLOG_MODE_CBF_FULL] = {"lite", "full",
+							  "cbf lite",
+							  "cbf full"};
 
 	mutex_lock(&ar->conf_mutex);
 	if (ar->state != ATH11K_STATE_ON) {
@@ -2064,7 +2067,7 @@ static ssize_t ath11k_write_pktlog_filte
 	buf[rc] = '\0';
 
 	ret = sscanf(buf, "0x%x %u", &filter, &mode);
-	if (ret != 2) {
+	if (ret != 2 || !mode || mode >= ATH11K_PKTLOG_MODE_MAX) {
 		ret = -EINVAL;
 		goto out;
 	}
@@ -2089,6 +2092,16 @@ static ssize_t ath11k_write_pktlog_filte
 	tlv_filter.offset_valid = false;
 	for (i = 0; i < ab->hw_params.num_rxmda_per_pdev; i++) {
 		ring_id = ar->dp.rx_mon_status_refill_ring[i].refill_buf_ring.ring_id;
+		if (mode == ATH11K_PKTLOG_MODE_CBF_LITE ||
+		    mode == ATH11K_PKTLOG_MODE_CBF_FULL) {
+			ret = ath11k_dp_tx_htt_rx_filter_setup(ab, ring_id, ar->dp.mac_id,
+							       HAL_RXDMA_MONITOR_BUF,
+							       rx_buf_sz, &cbf_tlv_filter);
+			if (ret) {
+				ath11k_warn(ab, "failed to set rx filter for monitor buffer ring\n");
+				goto out;
+			}
+		}
 		ret = ath11k_dp_tx_htt_rx_filter_setup(ar->ab, ring_id, ar->dp.mac_id,
 						       HAL_RXDMA_MONITOR_STATUS,
 						       rx_buf_sz, &tlv_filter);
@@ -2097,6 +2110,15 @@ static ssize_t ath11k_write_pktlog_filte
 			goto out;
 		}
 	}
+	if (mode == ATH11K_PKTLOG_MODE_CBF_LITE ||
+	    mode == ATH11K_PKTLOG_MODE_CBF_FULL) {
+		cbf_tlv_filter.pkt_filter_flags0 = 0;
+		cbf_tlv_filter.pkt_filter_flags1 = HTT_RX_FP_MGMT_PKT_FILTER_TLV_FLAGS1_ACTION_NOACK;
+		cbf_tlv_filter.pkt_filter_flags2 = 0;
+		cbf_tlv_filter.pkt_filter_flags3 = 0;
+		cbf_tlv_filter.rx_filter = HTT_RX_RXDMA_FILTER_TLV_FLAGS_BUF_RING;
+	}
+
 #define HTT_RX_FILTER_TLV_LITE_MODE \
 			(HTT_RX_FILTER_TLV_FLAGS_PPDU_START | \
 			HTT_RX_FILTER_TLV_FLAGS_PPDU_END | \
@@ -2105,7 +2127,8 @@ static ssize_t ath11k_write_pktlog_filte
 			HTT_RX_FILTER_TLV_FLAGS_PPDU_END_STATUS_DONE | \
 			HTT_RX_FILTER_TLV_FLAGS_MPDU_START)
 
-	if (mode == ATH11K_PKTLOG_MODE_FULL) {
+	if (mode == ATH11K_PKTLOG_MODE_FULL ||
+	    mode == ATH11K_PKTLOG_MODE_CBF_FULL) {
 		rx_filter = HTT_RX_FILTER_TLV_LITE_MODE |
 			    HTT_RX_FILTER_TLV_FLAGS_MSDU_START |
 			    HTT_RX_FILTER_TLV_FLAGS_MSDU_END |
@@ -2113,7 +2136,8 @@ static ssize_t ath11k_write_pktlog_filte
 			    HTT_RX_FILTER_TLV_FLAGS_PACKET_HEADER |
 			    HTT_RX_FILTER_TLV_FLAGS_ATTENTION;
 		rx_buf_sz = DP_RX_BUFFER_SIZE;
-	} else if (mode == ATH11K_PKTLOG_MODE_LITE) {
+	} else if (mode == ATH11K_PKTLOG_MODE_LITE ||
+		   mode == ATH11K_PKTLOG_MODE_CBF_LITE) {
 		ret = ath11k_dp_tx_htt_h2t_ppdu_stats_req(ar,
 							  HTT_PPDU_STATS_TAG_PKTLOG);
 		if (ret) {
@@ -2148,6 +2172,18 @@ static ssize_t ath11k_write_pktlog_filte
 
 	for (i = 0; i < ab->hw_params.num_rxmda_per_pdev; i++) {
 		ring_id = ar->dp.rx_mon_status_refill_ring[i].refill_buf_ring.ring_id;
+		if (mode == ATH11K_PKTLOG_MODE_CBF_LITE ||
+		    mode == ATH11K_PKTLOG_MODE_CBF_FULL) {
+			ret = ath11k_dp_tx_htt_rx_filter_setup(ab, ring_id,
+							       ar->dp.mac_id + i,
+							       HAL_RXDMA_MONITOR_BUF,
+							       rx_buf_sz, &cbf_tlv_filter);
+			if (ret) {
+				ath11k_warn(ab, "failed to set rx filter for monitor buffer ring\n");
+				goto out;
+			}
+		}
+
 		ret = ath11k_dp_tx_htt_rx_filter_setup(ab, ring_id,
 						       ar->dp.mac_id + i,
 						       HAL_RXDMA_MONITOR_STATUS,
@@ -2159,8 +2195,7 @@ static ssize_t ath11k_write_pktlog_filte
 		}
 	}
 
-	ath11k_info(ab, "pktlog mode %s\n",
-		    ((mode == ATH11K_PKTLOG_MODE_FULL) ? "full" : "lite"));
+	ath11k_info(ar->ab, "pktlog mode %s\n", pktlog_mode[mode - 1]);
 
 	ar->debug.pktlog_filter = filter;
 	ar->debug.pktlog_mode = mode;
--- a/drivers/net/wireless/ath/ath11k/debugfs.h
+++ b/drivers/net/wireless/ath/ath11k/debugfs.h
@@ -158,6 +158,9 @@ enum ath11k_pktlog_filter {
 enum ath11k_pktlog_mode {
 	ATH11K_PKTLOG_MODE_LITE = 1,
 	ATH11K_PKTLOG_MODE_FULL = 2,
+	ATH11K_PKTLOG_MODE_CBF_LITE = 3,
+	ATH11K_PKTLOG_MODE_CBF_FULL = 4,
+	ATH11K_PKTLOG_MODE_MAX = 5,
 };
 
 enum ath11k_pktlog_enum {
@@ -245,7 +248,12 @@ void ath11k_dbring_add_debug_entry(struc
 
 static inline bool ath11k_debugfs_is_pktlog_lite_mode_enabled(struct ath11k *ar)
 {
-	return (ar->debug.pktlog_mode == ATH11K_PKTLOG_MODE_LITE);
+	return ((ar->debug.pktlog_mode == ATH11K_PKTLOG_MODE_LITE) || (ar->debug.pktlog_mode == ATH11K_PKTLOG_MODE_CBF_LITE));
+}
+
+static inline bool ath11k_debug_is_pktlog_cbf_mode_enabled(struct ath11k *ar)
+{
+	return (ar->debug.pktlog_mode >= ATH11K_PKTLOG_MODE_CBF_LITE);
 }
 
 static inline bool ath11k_debugfs_is_pktlog_rx_stats_enabled(struct ath11k *ar)
@@ -346,6 +354,11 @@ static inline bool ath11k_debugfs_is_pkt
 	return false;
 }
 
+static inline bool ath11k_debug_is_pktlog_cbf_mode_enabled(struct ath11k *ar)
+{
+	return false;
+}
+
 static inline bool ath11k_debugfs_is_pktlog_rx_stats_enabled(struct ath11k *ar)
 {
 	return false;
@@ -383,6 +396,9 @@ void ath11k_deinit_pktlog(struct ath11k
 void ath11k_htt_pktlog_process(struct ath11k *ar, u8 *data);
 void ath11k_htt_ppdu_pktlog_process(struct ath11k *ar, u8 *data, u32 len);
 void ath11k_rx_stats_buf_pktlog_process(struct ath11k *ar, u8 *data, u16 log_type, u32 len);
+void ath11k_cbf_pktlog_process(struct ath11k *ar, u8 *data, u32 len,
+			       struct htt_t2h_ppdu_stats_ind_hdr *ind_hdr,
+			       struct htt_ppdu_stats_rx_mgmtctrl_payload_tlv *tlv_hdr);
 
 #else /* CPTCFG_ATH11K_PKTLOG */
 static inline void ath11k_init_pktlog(struct ath11k *ar)
@@ -410,5 +426,10 @@ static inline void ath11k_rx_stats_buf_p
 						       u8 *data, u16 log_type, u32 len)
 {
 }
+void ath11k_cbf_pktlog_process(struct ath11k *ar, u8 *data, u32 len,
+			       struct htt_t2h_ppdu_stats_ind_hdr *ind_hdr,
+			       struct htt_ppdu_stats_rx_mgmtctrl_payload_tlv *tlv_hdr)
+{
+}
 #endif /* CONFIG_ATH11K_PKTLOG */
 #endif /* _ATH11K_DEBUGFS_H_ */
--- a/drivers/net/wireless/ath/ath11k/dp.h
+++ b/drivers/net/wireless/ath/ath11k/dp.h
@@ -582,6 +582,7 @@ enum htt_ppdu_stats_tag_type {
 	HTT_PPDU_STATS_TAG_USR_COMMON_ARRAY,
 	HTT_PPDU_STATS_TAG_INFO,
 	HTT_PPDU_STATS_TAG_TX_MGMTCTRL_PAYLOAD,
+	HTT_PPDU_STATS_TAG_RX_MGMTCTRL_PAYLOAD = 17,
 
 	/* New TLV's are added above to this line */
 	HTT_PPDU_STATS_TAG_MAX,
@@ -1920,6 +1921,37 @@ static inline void ath11k_dp_get_mac_add
 	memcpy(addr + 4, &addr_h16, ETH_ALEN - 4);
 }
 
+#define IEEE80211_STYPE_ACTION_NO_ACK	0xE0
+#define PPDU_STATS_IND_MAC_ID_SHIFT	8
+#define PPDU_STATS_IND_PDEV_ID_SHIFT	10
+#define PKTLOG_ALIGN	4
+#define PPDU_STATS_PAYLOAD_LEN_SHIFT	16
+#define MGMT_STATS_PAYLOAD_LEN_SHIFT	12
+
+struct htt_t2h_ppdu_stats_ind_hdr {
+	/* bits[7:0] = msg_type
+	 * bits[9:8] = mac_id
+	 * bits[11:10] = pdev_id
+	 * bits[15:12] = rsvd
+	 * bits 31:16 = payload_size */
+	u32 header;
+	u32 ppdu_id;
+	u32 timestamp_us;
+	u32 rsvd;
+};
+
+struct htt_ppdu_stats_rx_mgmtctrl_payload_tlv {
+	u32 header;
+	/*
+	 * BIT [ 15 :   0]   :- frame_length (in bytes)
+	 * BIT [ 31 :  16]   :- reserved1
+	 */
+	u32 frame_length;
+	u32 rsvd1; /* set to 0x0 */
+	u32 rsvd2; /* set to 0x0 */
+	u8 payload[];
+};
+
 int ath11k_dp_service_srng(struct ath11k_base *ab,
 			   struct ath11k_ext_irq_grp *irq_grp,
 			   int budget);
--- a/drivers/net/wireless/ath/ath11k/dp_rx.c
+++ b/drivers/net/wireless/ath/ath11k/dp_rx.c
@@ -5970,6 +5970,47 @@ static void ath11k_update_radiotap(struc
 	rxs->mactime = ppduinfo->tsft;
 }
 
+void ath11k_dp_rx_cbf_pktlog_process(struct ath11k *ar, struct sk_buff *mon_skb,
+				     u32 mac_id,
+				     struct hal_rx_mon_ppdu_info *ppduinfo) {
+	uint32_t skb_len, len_align;
+	void *skb_data;
+	uint8_t  type, subtype;
+	struct ieee80211_hdr *data_hdr;
+	struct htt_t2h_ppdu_stats_ind_hdr ppdu_stats_ind_hdr;
+	struct htt_ppdu_stats_rx_mgmtctrl_payload_tlv mgmtctrl_pld_tlv;
+
+	skb_data = mon_skb->data;
+	data_hdr = (struct ieee80211_hdr *)skb_data;
+	type = data_hdr->frame_control & IEEE80211_FCTL_FTYPE;
+	subtype = data_hdr->frame_control & IEEE80211_FCTL_STYPE;
+
+	if (type != IEEE80211_FTYPE_MGMT || subtype != IEEE80211_STYPE_ACTION_NO_ACK)
+		return;
+
+	skb_len = mon_skb->len;
+	len_align = ALIGN(skb_len +
+			   sizeof(struct htt_ppdu_stats_rx_mgmtctrl_payload_tlv), PKTLOG_ALIGN);
+	ppdu_stats_ind_hdr.header = HTT_T2H_MSG_TYPE_PPDU_STATS_IND |
+				    (mac_id << PPDU_STATS_IND_MAC_ID_SHIFT) |
+				    (ar->pdev->pdev_id << PPDU_STATS_IND_PDEV_ID_SHIFT) |
+				    len_align << PPDU_STATS_PAYLOAD_LEN_SHIFT;
+	ppdu_stats_ind_hdr.ppdu_id = ppduinfo->ppdu_id;
+	ppdu_stats_ind_hdr.timestamp_us = (uint32_t)ppduinfo->tsft;
+	ppdu_stats_ind_hdr.rsvd = 0;
+
+	len_align = ALIGN(skb_len - sizeof(mgmtctrl_pld_tlv.header) +
+		     	   sizeof(struct htt_ppdu_stats_rx_mgmtctrl_payload_tlv), PKTLOG_ALIGN);
+	mgmtctrl_pld_tlv.header = HTT_PPDU_STATS_TAG_RX_MGMTCTRL_PAYLOAD
+				  | len_align << MGMT_STATS_PAYLOAD_LEN_SHIFT;
+	mgmtctrl_pld_tlv.frame_length = mon_skb->len;
+	mgmtctrl_pld_tlv.rsvd1 = 0;
+	mgmtctrl_pld_tlv.rsvd2 = 0;
+
+	ath11k_cbf_pktlog_process(ar, skb_data, skb_len, &ppdu_stats_ind_hdr,
+					  &mgmtctrl_pld_tlv);
+}
+
 static int ath11k_dp_rx_mon_deliver(struct ath11k *ar, u32 mac_id,
 				    struct sk_buff *head_msdu,
 				    struct hal_rx_mon_ppdu_info *ppduinfo,
@@ -5987,6 +6028,12 @@ static int ath11k_dp_rx_mon_deliver(stru
 	if (!mon_skb)
 		goto mon_deliver_fail;
 
+	if (ath11k_debug_is_pktlog_cbf_mode_enabled(ar)) {
+		ath11k_dp_rx_cbf_pktlog_process(ar, mon_skb, mac_id, ppduinfo);
+		dev_kfree_skb_any(mon_skb);
+		return 0;
+	}
+
 	header = mon_skb;
 
 	rxs->flag = 0;
@@ -6193,12 +6240,18 @@ int ath11k_dp_rx_process_mon_rings(struc
 	struct ath11k *ar = ath11k_ab_to_ar(ab, mac_id);
 	int ret = 0;
 
-	if (!test_bit(ATH11K_FLAG_MONITOR_STARTED, &ar->monitor_flags))
+	if (!test_bit(ATH11K_FLAG_MONITOR_STARTED, &ar->monitor_flags)) {
 		ret = ath11k_dp_rx_process_mon_status(ab, mac_id, napi, budget);
-	else if (!ab->hw_params.full_monitor_mode)
+
+		if (ath11k_debug_is_pktlog_cbf_mode_enabled(ar))
+			ret = ath11k_dp_mon_process_rx(ab, mac_id, napi, budget);
+	}
+	else if (!ab->hw_params.full_monitor_mode) {
 		ret = ath11k_dp_mon_process_rx(ab, mac_id, napi, budget);
-	else
+	}
+	else {
 		ret = ath11k_dp_full_mon_process_rx(ab, mac_id, napi, budget);
+	}
 
 	return ret;
 }
--- a/drivers/net/wireless/ath/ath11k/pktlog.c
+++ b/drivers/net/wireless/ath/ath11k/pktlog.c
@@ -543,3 +543,43 @@ void ath11k_rx_stats_buf_pktlog_process(
 
 	ath_pktlog_write_buf(pl_info, &hdr_arg);
 }
+
+void ath11k_cbf_pktlog_process(struct ath11k *ar, u8 *data, u32 len,
+			       struct htt_t2h_ppdu_stats_ind_hdr *ind_hdr,
+			       struct htt_ppdu_stats_rx_mgmtctrl_payload_tlv *tlv_hdr)
+{
+	struct ath_pktlog *pl_info = &ar->debug.pktlog;
+	struct ath_pktlog_hdr hdr;
+	struct ath_pktlog_hdr_arg hdr_arg;
+	uint32_t hdr_size;
+	char *log_data;
+
+	if  (!ar->debug.is_pkt_logging)
+	        return;
+
+	hdr_size = sizeof(struct htt_t2h_ppdu_stats_ind_hdr) +
+			  sizeof(struct htt_ppdu_stats_rx_mgmtctrl_payload_tlv);
+	hdr.flags = (1 << PKTLOG_FLG_FRM_TYPE_REMOTE_S);
+	hdr.missed_cnt = 0;
+	hdr.log_type = ATH11K_PKTLOG_TYPE_PPDU_STATS;
+	hdr.timestamp = 0;
+	hdr.size = ALIGN(len + hdr_size, PKTLOG_ALIGN);
+
+	hdr_arg.log_type = hdr.log_type;
+	hdr_arg.payload_size = hdr.size;
+	hdr_arg.payload = data;
+	hdr_arg.pktlog_hdr = (u8 *)&hdr;
+
+	log_data = ath_pktlog_getbuf(pl_info, &hdr_arg);
+	if (!log_data)
+	        return;
+
+	memcpy(log_data, ind_hdr, sizeof(struct htt_t2h_ppdu_stats_ind_hdr));
+
+	log_data += sizeof(struct htt_t2h_ppdu_stats_ind_hdr);
+	memcpy(log_data, tlv_hdr,
+	       sizeof(struct htt_ppdu_stats_rx_mgmtctrl_payload_tlv));
+
+	log_data += sizeof(struct htt_ppdu_stats_rx_mgmtctrl_payload_tlv);
+	memcpy(log_data, data, len);
+}
