From 2415378b306301707b850d8c543ea3ef159fb462 Mon Sep 17 00:00:00 2001
From: Aloka Dixit <quic_alokad@quicinc.com>
Date: Tue, 18 Jan 2022 17:38:42 -0800
Subject: [PATCH 12/14] mac80211: add RNR for EMA AP

Generate EMA beacons by adding RNR elements along with MBSSID elements.

Signed-off-by: Aloka Dixit <quic_alokad@quicinc.com>
---
 net/mac80211/cfg.c         | 118 +++++++++++++++++++++++++++++++++----
 net/mac80211/ieee80211_i.h |   1 +
 net/mac80211/tx.c          |  48 ++++++++++++++-
 3 files changed, 151 insertions(+), 16 deletions(-)

diff --git a/net/mac80211/cfg.c b/net/mac80211/cfg.c
index 75f174111832..72a2a4b9fb26 100644
--- a/net/mac80211/cfg.c
+++ b/net/mac80211/cfg.c
@@ -1023,13 +1023,46 @@ static u8 *ieee80211_copy_mbssid_beacon(u8 *pos,
 	return pos;
 }
 
+static int ieee80211_get_rnr_beacon_len(struct cfg80211_rnr_elems *elems)
+{
+	int i, len = 0;
+
+	if (!elems)
+		return 0;
+
+	for (i = 0; i < elems->cnt; i++)
+		len += elems->elem[i].len;
+
+	return len;
+}
+
+static u8 *ieee80211_copy_rnr_beacon(u8 *pos,
+				     struct cfg80211_rnr_elems *dest,
+				     struct cfg80211_rnr_elems *src)
+{
+	int i;
+
+	if (!dest || !src)
+		return pos;
+
+	dest->cnt = src->cnt;
+	for (i = 0; i < dest->cnt; i++) {
+		dest->elem[i].len = src->elem[i].len;
+		memcpy(pos, src->elem[i].data, dest->elem[i].len);
+		dest->elem[i].data = pos;
+		pos += dest->elem[i].len;
+	}
+
+	return pos;
+}
+
 static int ieee80211_assign_beacon(struct ieee80211_sub_if_data *sdata,
 				   struct cfg80211_beacon_data *params,
 				   const struct ieee80211_csa_settings *csa,
 				   const struct ieee80211_color_change_settings *cca)
 {
 	struct beacon_data *new, *old;
-	int new_head_len, new_tail_len, new_mbssid_len = 0;
+	int new_head_len, new_tail_len, new_mbssid_len = 0, new_rnr_len = 0;
 	const u8 *cap, *pos;
 	struct ieee80211_he_operation *he_oper = NULL;
 	int size, err;
@@ -1055,12 +1088,16 @@ static int ieee80211_assign_beacon(struct ieee80211_sub_if_data *sdata,
 	else
 		new_tail_len = old->tail_len;
 
-	if (params->mbssid_ies)
+	if (params->mbssid_ies) {
 		new_mbssid_len = ieee80211_get_mbssid_beacon_len(params->mbssid_ies);
-	else if (old && old->mbssid_ies)
+		new_rnr_len = ieee80211_get_rnr_beacon_len(params->rnr_ies);
+	} else if (old) {
 		new_mbssid_len = ieee80211_get_mbssid_beacon_len(old->mbssid_ies);
+		new_rnr_len = ieee80211_get_rnr_beacon_len(old->rnr_ies);
+	}
 
-	size = sizeof(*new) + new_head_len + new_tail_len + new_mbssid_len;
+	size = sizeof(*new) + new_head_len + new_tail_len + new_mbssid_len +
+	       new_rnr_len;
 
 	new = kzalloc(size, GFP_KERNEL);
 	if (!new)
@@ -1082,6 +1119,23 @@ static int ieee80211_assign_beacon(struct ieee80211_sub_if_data *sdata,
 			err = -ENOMEM;
 			goto error;
 		}
+
+		if (new_rnr_len) {
+			if (params->rnr_ies)
+				new->rnr_ies = kzalloc(struct_size(new->rnr_ies,
+								   elem,
+								   params->rnr_ies->cnt),
+						       GFP_KERNEL);
+			else if (old && old->rnr_ies)
+				new->rnr_ies = kzalloc(struct_size(new->rnr_ies,
+								   elem,
+								   old->rnr_ies->cnt),
+						       GFP_KERNEL);
+			if (!new->rnr_ies) {
+				err = -ENOMEM;
+				goto error;
+			}
+		}
 	}
 
 	/* start filling the new info now */
@@ -1095,14 +1149,19 @@ static int ieee80211_assign_beacon(struct ieee80211_sub_if_data *sdata,
 	new->head_len = new_head_len;
 	new->tail_len = new_tail_len;
 
-	if (params->mbssid_ies)
+	if (params->mbssid_ies) {
 		pos = ieee80211_copy_mbssid_beacon(new->tail + new_tail_len,
 						   new->mbssid_ies,
 						   params->mbssid_ies);
-	else if (old)
+		pos = ieee80211_copy_rnr_beacon(pos, new->rnr_ies,
+						params->rnr_ies);
+	} else if (old) {
 		pos = ieee80211_copy_mbssid_beacon(new->tail + new_tail_len,
 						   new->mbssid_ies,
 						   old->mbssid_ies);
+		pos = ieee80211_copy_rnr_beacon(pos, new->rnr_ies,
+						old->rnr_ies);
+	}
 
 	if (csa) {
 		new->cntdwn_current_counter = csa->count;
@@ -1172,6 +1231,7 @@ static int ieee80211_assign_beacon(struct ieee80211_sub_if_data *sdata,
 
 	if (old) {
 		kfree(old->mbssid_ies);
+		kfree(old->rnr_ies);
 		kfree_rcu(old, rcu_head);
 	}
 
@@ -1180,6 +1240,7 @@ static int ieee80211_assign_beacon(struct ieee80211_sub_if_data *sdata,
 error:
 	if (new) {
 		kfree(new->mbssid_ies);
+		kfree(new->rnr_ies);
 		kfree(new);
 	}
 	return err;
@@ -1349,6 +1410,7 @@ static int ieee80211_start_ap(struct wiphy *wiphy, struct net_device *dev,
 
 		if (old) {
 			kfree(old->mbssid_ies);
+			kfree(old->rnr_ies);
 			kfree_rcu(old, rcu_head);
 		}
 		RCU_INIT_POINTER(sdata->u.ap.beacon, NULL);
@@ -1432,6 +1494,7 @@ static int ieee80211_stop_ap(struct wiphy *wiphy, struct net_device *dev)
 
 	if (sdata->u.ap.next_beacon) {
 		kfree(sdata->u.ap.next_beacon->mbssid_ies);
+		kfree(sdata->u.ap.next_beacon->rnr_ies);
 		kfree(sdata->u.ap.next_beacon);
 		sdata->u.ap.next_beacon = NULL;
 	}
@@ -1447,6 +1510,7 @@ static int ieee80211_stop_ap(struct wiphy *wiphy, struct net_device *dev)
 	RCU_INIT_POINTER(sdata->u.ap.fils_discovery, NULL);
 	RCU_INIT_POINTER(sdata->u.ap.unsol_bcast_probe_resp, NULL);
 	kfree(old_beacon->mbssid_ies);
+	kfree(old_beacon->rnr_ies);
 	kfree_rcu(old_beacon, rcu_head);
 	if (old_probe_resp)
 		kfree_rcu(old_probe_resp, rcu_head);
@@ -3262,13 +3326,16 @@ cfg80211_beacon_dup(struct cfg80211_beacon_data *beacon)
 {
 	struct cfg80211_beacon_data *new_beacon;
 	u8 *pos;
-	int len;
-	int mbssid_len = ieee80211_get_mbssid_beacon_len(beacon->mbssid_ies);
+	int len, mbssid_len = 0, rnr_len = 0;
+
+	mbssid_len = ieee80211_get_mbssid_beacon_len(beacon->mbssid_ies);
+	if (mbssid_len)
+		rnr_len = ieee80211_get_rnr_beacon_len(beacon->rnr_ies);
 
 	len = beacon->head_len + beacon->tail_len + beacon->beacon_ies_len +
 	      beacon->proberesp_ies_len + beacon->assocresp_ies_len +
 	      beacon->probe_resp_len + beacon->lci_len + beacon->civicloc_len +
-	      mbssid_len;
+	      mbssid_len + rnr_len;
 
 	new_beacon = kzalloc(sizeof(*new_beacon) + len, GFP_KERNEL);
 	if (!new_beacon)
@@ -3279,9 +3346,16 @@ cfg80211_beacon_dup(struct cfg80211_beacon_data *beacon)
 							     elem,
 							     beacon->mbssid_ies->cnt),
 						 GFP_KERNEL);
-		if (!new_beacon->mbssid_ies) {
-			kfree(new_beacon);
-			return NULL;
+		if (!new_beacon->mbssid_ies)
+			goto error;
+
+		if (rnr_len) {
+			new_beacon->rnr_ies = kzalloc(struct_size(new_beacon->rnr_ies,
+								  elem,
+								  beacon->rnr_ies->cnt),
+						      GFP_KERNEL);
+			if (!new_beacon->rnr_ies)
+				goto error;
 		}
 	}
 
@@ -3323,9 +3397,14 @@ cfg80211_beacon_dup(struct cfg80211_beacon_data *beacon)
 		memcpy(pos, beacon->probe_resp, beacon->probe_resp_len);
 		pos += beacon->probe_resp_len;
 	}
-	if (mbssid_len)
+	if (mbssid_len) {
 		pos = ieee80211_copy_mbssid_beacon(pos, new_beacon->mbssid_ies,
 						   beacon->mbssid_ies);
+		if (rnr_len)
+			pos = ieee80211_copy_rnr_beacon(pos,
+							new_beacon->rnr_ies,
+							beacon->rnr_ies);
+	}
 
 	/* might copy -1, meaning no changes requested */
 	new_beacon->ftm_responder = beacon->ftm_responder;
@@ -3343,6 +3422,14 @@ cfg80211_beacon_dup(struct cfg80211_beacon_data *beacon)
 	}
 
 	return new_beacon;
+
+error:
+	if (new_beacon) {
+		kfree(new_beacon->mbssid_ies);
+		kfree(new_beacon->rnr_ies);
+		kfree(new_beacon);
+	}
+	return NULL;
 }
 
 void ieee80211_csa_finish(struct ieee80211_vif *vif)
@@ -3377,6 +3464,7 @@ static int ieee80211_set_after_csa_beacon(struct ieee80211_sub_if_data *sdata,
 					      NULL, NULL);
 		if (sdata->u.ap.next_beacon) {
 			kfree(sdata->u.ap.next_beacon->mbssid_ies);
+			kfree(sdata->u.ap.next_beacon->rnr_ies);
 			kfree(sdata->u.ap.next_beacon);
 			sdata->u.ap.next_beacon = NULL;
 		}
@@ -3634,6 +3722,7 @@ static int ieee80211_set_csa_beacon(struct ieee80211_sub_if_data *sdata,
 error:
 	if (sdata->vif.type == NL80211_IFTYPE_AP && sdata->u.ap.next_beacon) {
 		kfree(sdata->u.ap.next_beacon->mbssid_ies);
+		kfree(sdata->u.ap.next_beacon->rnr_ies);
 		kfree(sdata->u.ap.next_beacon);
 		sdata->u.ap.next_beacon = NULL;
 	}
@@ -3645,6 +3734,7 @@ static void ieee80211_color_change_abort(struct ieee80211_sub_if_data  *sdata)
 	sdata->vif.color_change_active = false;
 	if (sdata->u.ap.next_beacon) {
 		kfree(sdata->u.ap.next_beacon->mbssid_ies);
+		kfree(sdata->u.ap.next_beacon->rnr_ies);
 		kfree(sdata->u.ap.next_beacon);
 		sdata->u.ap.next_beacon = NULL;
 	}
@@ -4388,6 +4478,7 @@ ieee80211_set_after_color_change_beacon(struct ieee80211_sub_if_data *sdata,
 					      NULL, NULL);
 		if (sdata->u.ap.next_beacon) {
 			kfree(sdata->u.ap.next_beacon->mbssid_ies);
+			kfree(sdata->u.ap.next_beacon->rnr_ies);
 			kfree(sdata->u.ap.next_beacon);
 			sdata->u.ap.next_beacon = NULL;
 		}
@@ -4435,6 +4526,7 @@ ieee80211_set_color_change_beacon(struct ieee80211_sub_if_data *sdata,
 		if (err < 0) {
 			if (sdata->u.ap.next_beacon) {
 				kfree(sdata->u.ap.next_beacon->mbssid_ies);
+				kfree(sdata->u.ap.next_beacon->rnr_ies);
 				kfree(sdata->u.ap.next_beacon);
 				sdata->u.ap.next_beacon = NULL;
 			}
diff --git a/net/mac80211/ieee80211_i.h b/net/mac80211/ieee80211_i.h
index 4d5728353b22..67c147363cb7 100644
--- a/net/mac80211/ieee80211_i.h
+++ b/net/mac80211/ieee80211_i.h
@@ -266,6 +266,7 @@ struct beacon_data {
 	u16 cntdwn_counter_offsets[IEEE80211_MAX_CNTDWN_COUNTERS_NUM];
 	u8 cntdwn_current_counter;
 	struct cfg80211_mbssid_elems *mbssid_ies;
+	struct cfg80211_rnr_elems *rnr_ies;
 	struct rcu_head rcu_head;
 };
 
diff --git a/net/mac80211/tx.c b/net/mac80211/tx.c
index 13d7fc842ab2..6f51297f7fc6 100644
--- a/net/mac80211/tx.c
+++ b/net/mac80211/tx.c
@@ -5378,6 +5378,41 @@ static void ieee80211_beacon_add_mbssid(struct beacon_data *beacon, int index,
 			     beacon->mbssid_ies->elem[index].len);
 }
 
+static int ieee80211_beacon_rnr_len(struct beacon_data *beacon, int index)
+{
+	int len = 0;
+
+	if (!beacon->mbssid_ies || !beacon->rnr_ies ||
+	    index == IEEE80211_BCN_EMA_DISABLED ||
+	    index >= beacon->rnr_ies->cnt)
+		return 0;
+
+	len = beacon->rnr_ies->elem[index].len;
+
+	for (index = beacon->mbssid_ies->cnt; index < beacon->rnr_ies->cnt;
+	     index++)
+		len += beacon->rnr_ies->elem[index].len;
+
+	return len;
+}
+
+static void ieee80211_beacon_add_rnr(struct beacon_data *beacon, int index,
+				     struct sk_buff *skb)
+{
+	if (!beacon->mbssid_ies || !beacon->rnr_ies || !beacon->rnr_ies->cnt ||
+	    index == IEEE80211_BCN_EMA_DISABLED ||
+	    index >= beacon->rnr_ies->cnt)
+		return;
+
+	skb_put_data(skb, beacon->rnr_ies->elem[index].data,
+		     beacon->rnr_ies->elem[index].len);
+
+	for (index = beacon->mbssid_ies->cnt; index < beacon->rnr_ies->cnt;
+	     index++)
+		skb_put_data(skb, beacon->rnr_ies->elem[index].data,
+			     beacon->rnr_ies->elem[index].len);
+}
+
 static struct sk_buff *
 ieee80211_beacon_get_ap(struct ieee80211_hw *hw,
 			struct ieee80211_vif *vif,
@@ -5392,7 +5427,7 @@ ieee80211_beacon_get_ap(struct ieee80211_hw *hw,
 	struct ieee80211_if_ap *ap = &sdata->u.ap;
 	struct sk_buff *skb = NULL;
 	u16 csa_off_base = 0;
-	int mbssid_len = 0;
+	int mbssid_len = 0, rnr_len = 0;
 
 	if (beacon->cntdwn_counter_offsets[0]) {
 		if (!is_template)
@@ -5404,13 +5439,16 @@ ieee80211_beacon_get_ap(struct ieee80211_hw *hw,
 	mbssid_len = ieee80211_beacon_mbssid_len(beacon, ema_index);
 	if (mbssid_len == -1)
 		return NULL;
+	else if (mbssid_len > 0)
+		rnr_len = ieee80211_beacon_rnr_len(beacon, ema_index);
 
 	/* headroom, head length,
 	 * tail length, maximum TIM length and multiple BSSID length
 	 */
 	skb = dev_alloc_skb(local->tx_headroom + beacon->head_len +
 			    beacon->tail_len + 256 +
-			    local->hw.extra_beacon_tailroom + mbssid_len);
+			    local->hw.extra_beacon_tailroom + mbssid_len +
+			    rnr_len);
 	if (!skb)
 		return NULL;
 
@@ -5430,8 +5468,12 @@ ieee80211_beacon_get_ap(struct ieee80211_hw *hw,
 
 	if (mbssid_len) {
 		ieee80211_beacon_add_mbssid(beacon, ema_index, skb);
+
+		if (rnr_len)
+			ieee80211_beacon_add_rnr(beacon, ema_index, skb);
+
 		if (offs) {
-			offs->mbssid_off = skb->len - mbssid_len;
+			offs->mbssid_off = skb->len - (mbssid_len + rnr_len);
 			csa_off_base = skb->len;
 		}
 	}
-- 
2.31.1

