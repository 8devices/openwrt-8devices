From f7cc8c318aaf15b8e2fc513d2b5106194ad6b1c8 Mon Sep 17 00:00:00 2001
From: Karthikeyan Periyasamy <periyasa@codeaurora.org>
Date: Fri, 26 Jun 2020 15:29:08 +0530
Subject: [PATCH 15/15] ath11k: add 64bit check before reading msi high addr

Read msi high addr if 64-bit addresses allowed on MSI.

Tested-On: QCN9000 hw1.0 PCI WLAN.HK.2.4.0.1.r1-00026-QCAHKSWPL_SILICONZ-2

Signed-off-by: Anilkumar Kolli <akolli@codeaurora.org>
Signed-off-by: Karthikeyan Periyasamy <periyasa@codeaurora.org>
---
 drivers/net/wireless/ath/ath11k/pci.c | 10 ++++++++--
 drivers/net/wireless/ath/ath11k/pci.h |  1 +
 2 files changed, 9 insertions(+), 2 deletions(-)

--- a/drivers/net/wireless/ath/ath11k/pci.c
+++ b/drivers/net/wireless/ath/ath11k/pci.c
@@ -295,13 +295,18 @@ int ath11k_pci_get_msi_irq(struct device
 static void ath11k_pci_get_msi_address(struct ath11k_base *ab, u32 *msi_addr_lo,
 				       u32 *msi_addr_hi)
 {
+	struct ath11k_pci *ar_pci = ath11k_pci_priv(ab);
 	struct pci_dev *pci_dev = to_pci_dev(ab->dev);
 
 	pci_read_config_dword(pci_dev, pci_dev->msi_cap + PCI_MSI_ADDRESS_LO,
 			      msi_addr_lo);
 
-	pci_read_config_dword(pci_dev, pci_dev->msi_cap + PCI_MSI_ADDRESS_HI,
-			      msi_addr_hi);
+	if (ar_pci->is_msi_64) {
+		pci_read_config_dword(pci_dev, pci_dev->msi_cap + PCI_MSI_ADDRESS_HI,
+				      msi_addr_hi);
+	} else {
+		*msi_addr_hi = 0;
+	}
 }
 
 int ath11k_pci_get_user_msi_assignment(struct ath11k_pci *ab_pci, char *user_name,
@@ -722,6 +727,7 @@ static int ath11k_pci_enable_msi(struct
 	}
 
 	ab_pci->msi_ep_base_data = msi_desc->msg.data;
+	ab_pci->is_msi_64 = msi_desc->msi_attrib.is_64;
 
 	ath11k_dbg(ab, ATH11K_DBG_PCI, "msi base data is %d\n", ab_pci->msi_ep_base_data);
 
--- a/drivers/net/wireless/ath/ath11k/pci.h
+++ b/drivers/net/wireless/ath/ath11k/pci.h
@@ -46,6 +46,7 @@ struct ath11k_pci {
 	u16 dev_id;
 	char amss_path[100];
 	u32 msi_ep_base_data;
+	bool is_msi_64;
 	struct mhi_controller *mhi_ctrl;
 	const struct ath11k_msi_config *msi_config;
 	unsigned long mhi_state;
