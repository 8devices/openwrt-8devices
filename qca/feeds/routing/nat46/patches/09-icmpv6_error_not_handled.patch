diff -Nur a/nat46/modules/nat46-core.c nat46-6/nat46/modules/nat46-core.c
--- a/nat46/modules/nat46-core.c	2019-04-16 17:49:59.807038535 -0700
+++ nat46-6/nat46/modules/nat46-core.c	2019-04-16 17:57:15.975049519 -0700
@@ -1672,16 +1672,18 @@
   return ret;
 }
 
-int pairs_xlate_v6_to_v4_outer(nat46_instance_t *nat46, nat46_xlate_rulepair_t *apair,
+int pairs_xlate_v6_to_v4_outer(nat46_instance_t *nat46, nat46_xlate_rulepair_t **papair,
 					struct ipv6hdr *ip6h, uint16_t proto, __u32 *pv4saddr, __u32 *pv4daddr) {
   int ipair = 0;
   int xlate_src = -1;
   int xlate_dst = -1;
+  nat46_xlate_rulepair_t *apair;
 
   apair = nat46_lpm(nat46, NAT46_IPV6_REMOTE, &ip6h->saddr);
   if (!apair)
 	  return 0;
 
+  *papair = apair;
   if (xlate_v6_to_v4(nat46, &apair->local, &ip6h->daddr, pv4daddr)) {
 	  nat46debug(5, "Dst addr %pI6 to %pI4 \n", &ip6h->daddr, pv4daddr);
 	  xlate_dst = ipair;
@@ -1708,14 +1710,14 @@
 }
 
 int xlate_6_to_4(struct net_device *dev, struct ipv6hdr *ip6h, uint16_t proto, __u32 *pv4saddr, __u32 *pv4daddr) {
-	nat46_xlate_rulepair_t apair;
+	nat46_xlate_rulepair_t *apair;
 	return pairs_xlate_v6_to_v4_outer(netdev_nat46_instance(dev), &apair, ip6h, proto, pv4saddr, pv4daddr);
 }
 EXPORT_SYMBOL(xlate_6_to_4);
 
 void nat46_ipv6_input(struct sk_buff *old_skb) {
   struct ipv6hdr *ip6h = ipv6_hdr(old_skb);
-  nat46_xlate_rulepair_t apair;
+  nat46_xlate_rulepair_t *apair;
   nat46_instance_t *nat46 = get_nat46_instance(old_skb);
   uint16_t proto;
   uint16_t frag_off;
@@ -1778,8 +1780,35 @@
 
 
   if(!pairs_xlate_v6_to_v4_outer(nat46, &apair, ip6h, proto, &v4saddr, &v4daddr)) {
-    nat46debug(0, "[nat46] Could not translate v6->v4");
-    goto done;
+    if (proto == NEXTHDR_ICMP) {
+      struct icmp6hdr *icmp6h = add_offset(ip6h, v6packet_l3size);
+      struct ipv6hdr *ip6h_inner = (struct ipv6hdr *) (icmp6h + 1);
+      struct ipv6hdr hdr6;
+      switch(icmp6h->icmp6_type) {
+        case ICMPV6_DEST_UNREACH:
+        case ICMPV6_PKT_TOOBIG:
+        case ICMPV6_TIME_EXCEED:
+        case ICMPV6_PARAMPROB:
+	  /* For icmpv6 error message, using the original message
+	  * address to  locate the apair one more time according
+	  * to the RFC 2473, and use the ipv4 address of the
+	  * tunnel as SRC ipv4 address */
+          memcpy(&hdr6.saddr, &ip6h_inner->daddr, 16);
+	  memcpy(&hdr6.daddr, &ip6h_inner->saddr, 16);
+	  if(!pairs_xlate_v6_to_v4_outer(nat46, &apair, &hdr6, proto, &v4saddr, &v4daddr)) {
+            nat46debug(0, "[nat46] Could not translate v6->v4");
+	    goto done;
+	  }
+	  v4saddr = apair->local.v4_pref;
+	  break;
+        default:
+	  nat46debug(0, "[nat46] Could not translate v6->v4");
+	  goto done;
+      }
+    } else {
+      nat46debug(0, "[nat46] Could not translate v6->v4");
+      goto done;
+    }
   }
 
   if (do_l4_translate) {
