 ap.c | 58 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 57 insertions(+), 1 deletion(-)

--- a/ap.c
+++ b/ap.c
@@ -13325,6 +13325,53 @@ static int mac80211_vht_chnum_band(struc
 	return 0;
 }
 
+static int mac80211_he_txBandwidth(struct sigma_dut *dut, const char *ifname,
+				   const char *val, const char *type)
+{
+	char *token, *result;
+	int chwidth = 80, center_freq_idx, center_freq, channel_freq;
+	int sec_channel_offset = 0;
+	char buf[256];
+	char *saveptr;
+	int res;
+
+	/* Extract the channel width info */
+	token = strdup(val);
+	if (!token)
+		return -1;
+	result = strtok_r(token, ";", &saveptr);
+	if (result)
+		chwidth = atoi(result);
+	chwidth = atoi(val);
+
+	center_freq_idx = get_oper_centr_freq_seq_idx(chwidth, dut->ap_channel);
+	if (center_freq_idx < 0) {
+		free(token);
+		return -1;
+	}
+
+	center_freq = get_5g_channel_freq(center_freq_idx);
+	channel_freq = get_5g_channel_freq(dut->ap_channel);
+
+	if (channel_freq > center_freq)
+		sec_channel_offset = -1;
+	else if (channel_freq < center_freq)
+		sec_channel_offset = 1;
+
+	res = snprintf(buf, sizeof(buf),
+			" -i %s chan_switch 10 %d sec_channel_offset=%d"
+			" center_freq1=%d bandwidth=%d blocktx %s", ifname,
+			channel_freq, sec_channel_offset, center_freq, chwidth,
+			type);
+	if (res < 0 || res >= sizeof(buf) || run_hostapd_cli(dut, buf) != 0) {
+		sigma_dut_print(dut, DUT_MSG_ERROR, "hostapd_cli chan_switch failed");
+	}
+
+	free(token);
+	return 0;
+}
+
+
 static void mac80211_prepare_nr_buf(struct sigma_dut *dut, char *nr_buf,
 				    uint8_t *mac_addr, int ap_ne_class,
 				    int ap_ne_ch, int ap_ne_pref)
@@ -13509,8 +13556,8 @@ static int mac80211_ap_set_rfeature(stru
 				    struct sigma_conn *conn,
 				    struct sigma_cmd *cmd)
 {
-	const char *val;
-	const char *ifname;
+	const char *val, *ifname;
+	char *type = "he";
 
 	ifname = get_main_ifname(dut);
 
@@ -13518,6 +13565,19 @@ static int mac80211_ap_set_rfeature(stru
 	if (val)
 		mac80211_config_rts_force(dut, ifname, val);
 
+	/* Currently 'mode' is used only with txBandwidth with HE as default */
+	val = get_param(cmd, "type");
+	if (val) {
+		if (strcasecmp(val, "VHT") == 0)
+			type = "vht";
+		else if (strcasecmp(val, "HT") == 0)
+			type = "ht";
+	}
+
+	val = get_param(cmd, "txBandwidth");
+	if (val && mac80211_he_txBandwidth(dut, ifname, val, type) < 0)
+		return -1;
+
 	val = get_param(cmd, "chnum_band");
 	if (val && mac80211_vht_chnum_band(dut, ifname, val) < 0)
 		return -1;
