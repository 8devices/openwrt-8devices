--- a/ap.c
+++ b/ap.c
@@ -1793,7 +1793,7 @@ static int ath_ap_send_addba_req(struct
 }
 
 
-static int ath10k_debug_enable_addba_req(struct sigma_dut *dut, int tid,
+static int mac80211_debug_enable_addba_req(struct sigma_dut *dut, int tid,
 					 const char *sta_mac,
 					 const char *dir_path)
 {
@@ -1801,6 +1801,7 @@ static int ath10k_debug_enable_addba_req
 	struct dirent *entry;
 	char buf[128], path[128];
 	int ret = 0, res;
+	struct stat s;
 
 	dir = opendir(dir_path);
 	if (!dir)
@@ -1820,24 +1821,35 @@ static int ath10k_debug_enable_addba_req
 
 		if (strcmp(entry->d_name, sta_mac) == 0) {
 			res = snprintf(buf, sizeof(buf),
+				       "%s/aggr_mode", path);
+			if (res < 0 || res >= sizeof(buf) || stat(buf, &s) != 0)
+				continue;
+
+			res = snprintf(buf, sizeof(buf),
+				       "%s/addba", path);
+			if (res < 0 || res >= sizeof(buf) || stat(buf, &s) != 0)
+				continue;
+
+			res = snprintf(buf, sizeof(buf),
 				       "echo 1 > %s/aggr_mode", path);
+
 			if (res < 0 || res >= sizeof(buf) || system(buf) != 0) {
 				sigma_dut_print(dut, DUT_MSG_ERROR,
-						"Failed to set aggr mode for ath10k");
+						"Failed to set aggr mode for %s\n", sta_mac);
 			}
 
 			res = snprintf(buf, sizeof(buf),
 				       "echo %d 32 > %s/addba", tid, path);
 			if (res < 0 || res >= sizeof(buf) || system(buf) != 0) {
 				sigma_dut_print(dut, DUT_MSG_ERROR,
-						"Failed to set addbareq for ath10k");
+						"Failed to set addbareq for %s\n", sta_mac);
 			}
 
 			break;
 		}
 
 		/* Recursively search subdirectories */
-		ath10k_debug_enable_addba_req(dut, tid, sta_mac, path);
+		mac80211_debug_enable_addba_req(dut, tid, sta_mac, path);
 	}
 
 	closedir(dir);
@@ -1846,7 +1858,7 @@ static int ath10k_debug_enable_addba_req
 }
 
 
-static int ath10k_ap_send_addba_req(struct sigma_dut *dut,
+static int mac80211_ap_send_addba_req(struct sigma_dut *dut,
 				    struct sigma_cmd *cmd)
 {
 	const char *val;
@@ -1863,7 +1875,7 @@ static int ath10k_ap_send_addba_req(stru
 		return 0;
 	}
 
-	return ath10k_debug_enable_addba_req(dut, tid, val,
+	return mac80211_debug_enable_addba_req(dut, tid, val,
 					     "/sys/kernel/debug/ieee80211");
 }
 
@@ -1874,7 +1886,6 @@ static enum sigma_cmd_result cmd_ap_send
 {
 	/* const char *name = get_param(cmd, "NAME"); */
 	/* const char *ifname = get_param(cmd, "INTERFACE"); */
-	struct stat s;
 
 	switch (get_driver_type()) {
 	case DRIVER_ATHEROS:
@@ -1899,8 +1910,7 @@ static enum sigma_cmd_result cmd_ap_send
 				"ap_send_addba_req command ignored");
 		return 1;
 	case DRIVER_MAC80211:
-		if (stat("/sys/module/ath10k_core", &s) == 0)
-			return ath10k_ap_send_addba_req(dut, cmd);
+			return mac80211_ap_send_addba_req(dut, cmd);
 		/* fall through */
 	default:
 		send_resp(dut, conn, SIGMA_ERROR,
