--- a/station.c
+++ b/station.c
@@ -321,9 +321,10 @@ static int print_sta_handler(struct nl_m
 		[NL80211_STA_INFO_TID_STATS] = { .type = NLA_NESTED },
 		[NL80211_STA_INFO_BSS_PARAM] = { .type = NLA_NESTED },
 		[NL80211_STA_INFO_RX_DURATION] = { .type = NLA_U64 },
-		[NL80211_STA_INFO_TX_DURATION] = { .type = NLA_U64 },
 		[NL80211_STA_INFO_ACK_SIGNAL] = {.type = NLA_U8 },
 		[NL80211_STA_INFO_ACK_SIGNAL_AVG] = { .type = NLA_U8 },
+		[NL80211_STA_INFO_TX_DURATION] = {.type = NLA_U64},
+		[NL80211_STA_INFO_AIRTIME_WEIGHT] = {.type = NLA_U16},
 	};
 	char *chain;
 
@@ -414,10 +415,6 @@ static int print_sta_handler(struct nl_m
 		printf("\n\ttx bitrate:\t%s", buf);
 	}
 
-	if (sinfo[NL80211_STA_INFO_TX_DURATION])
-		printf("\n\ttx duration:\t%lld us",
-		       (unsigned long long)nla_get_u64(sinfo[NL80211_STA_INFO_TX_DURATION]));
-
 	if (sinfo[NL80211_STA_INFO_RX_BITRATE]) {
 		char buf[100];
 
@@ -437,6 +434,10 @@ static int print_sta_handler(struct nl_m
 		printf("\n\tavg ack signal:\t%d dBm",
 			(int8_t)nla_get_u8(sinfo[NL80211_STA_INFO_ACK_SIGNAL_AVG]));
 
+	if (sinfo[NL80211_STA_INFO_TX_DURATION])
+		printf("\n\ttx duration:\t%lld us",
+		       (unsigned long long)nla_get_u64(sinfo[NL80211_STA_INFO_TX_DURATION]));
+
 	if (sinfo[NL80211_STA_INFO_AIRTIME_WEIGHT]) {
 		printf("\n\tairtime weight: %d", nla_get_u16(sinfo[NL80211_STA_INFO_AIRTIME_WEIGHT]));
 	}
@@ -671,6 +672,7 @@ COMMAND(station, del, "<MAC address> [su
 
 static const struct cmd *station_set_plink;
 static const struct cmd *station_set_vlan;
+static const struct cmd *station_set_airtime;
 static const struct cmd *station_set_mesh_power_mode;
 static const struct cmd *station_set_airtime_weight;
 static const struct cmd *station_set_txpwr;
@@ -683,6 +685,8 @@ static const struct cmd *select_station_
 		return station_set_plink;
 	if (strcmp(argv[1], "vlan") == 0)
 		return station_set_vlan;
+	if (strcmp(argv[1], "airtime") == 0)
+		return station_set_airtime;
 	if (strcmp(argv[1], "mesh_power_mode") == 0)
 		return station_set_mesh_power_mode;
 	if (strcmp(argv[1], "airtime_weight") == 0)
@@ -788,6 +792,53 @@ COMMAND_ALIAS(station, set, "<MAC addres
 	"Set an AP VLAN for this station.",
 	select_station_cmd, station_set_vlan);
 
+static int handle_station_set_airtime(struct nl80211_state *state,
+				   struct nl_msg *msg,
+				   int argc, char **argv,
+				   enum id_input id)
+{
+	unsigned char mac_addr[ETH_ALEN];
+	unsigned long airtime_weight = 0;
+	char *err = NULL;
+
+	if (argc < 3)
+		return 1;
+
+	if (mac_addr_a2n(mac_addr, argv[0])) {
+		fprintf(stderr, "invalid mac address\n");
+		return 2;
+	}
+	argc--;
+	argv++;
+
+	if (strcmp("airtime", argv[0]) != 0)
+		return 1;
+	argc--;
+	argv++;
+
+	airtime_weight = strtoul(argv[0], &err, 0);
+	if ((err && *err) || airtime_weight <= 0) {
+		fprintf(stderr, "invalid airtime weight\n");
+		return 2;
+	}
+	argc--;
+	argv++;
+
+	if (argc)
+		return 1;
+
+	NLA_PUT(msg, NL80211_ATTR_MAC, ETH_ALEN, mac_addr);
+	NLA_PUT_U32(msg, NL80211_ATTR_AIRTIME_WEIGHT, airtime_weight);
+
+	return 0;
+ nla_put_failure:
+	return -ENOBUFS;
+}
+COMMAND_ALIAS(station, set, "<MAC address> airtime <airtime in usecs>",
+	NL80211_CMD_SET_STATION, 0, CIB_NETDEV, handle_station_set_airtime,
+	"Set airtime weight for this station.",
+	select_station_cmd, station_set_airtime);
+
 static int handle_station_set_mesh_power_mode(struct nl80211_state *state,
 					      struct nl_msg *msg,
 					      int argc, char **argv,
