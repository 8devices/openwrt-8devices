From c7f259503d81d3772b21969289f6540d123fa12f Mon Sep 17 00:00:00 2001
From: Muna Sinada <quic_msinada@quicinc.com>
Date: Fri, 24 Sep 2021 16:21:13 -0700
Subject: [PATCH 2/2] iw: Support EHT rate configuration

Allow EHT-MCS, EHT-GI, EHT-LTF setting.

Signed-off-by: Muna Sinada <quic_msinada@quicinc.com>
---
 bitrate.c | 186 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++----
 1 file changed, 176 insertions(+), 10 deletions(-)

--- a/bitrate.c
+++ b/bitrate.c
@@ -7,12 +7,15 @@
 static int parse_rate_chunk(const char *arg, __u8 *nss, __u16 *mcs, unsigned int mode)
 {
 	unsigned int count, i;
-	unsigned int inss, mcs_start, mcs_end, tab[12];
+	unsigned int inss, mcs_start, mcs_end, tab[14];
 	unsigned int max_mcs = 0, max_nss = 0;
 
 	*nss = 0; *mcs = 0;
 
-	if (mode == NL80211_TXRATE_HE) {
+	if (mode == NL80211_TXRATE_EHT) {
+		max_mcs = 13;
+		max_nss = NL80211_EHT_NSS_MAX;
+	} else if (mode == NL80211_TXRATE_HE) {
 		max_mcs = 11;
 		max_nss = NL80211_HE_NSS_MAX;
 	} else {
@@ -42,7 +45,12 @@ static int parse_rate_chunk(const char *
 
 	} else {
 		/* Format: NSS:MCSx,MCSy,... */
-		if (mode == NL80211_TXRATE_HE) {
+		if (mode == NL80211_TXRATE_EHT) {
+			count = sscanf(arg, "%u:%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u",
+				       &inss, &tab[0], &tab[1], &tab[2], &tab[3],
+				       &tab[4], &tab[5], &tab[6], &tab[7], &tab[8],
+				       &tab[9], &tab[10], &tab[11], &tab[12], &tab[13]);
+		} else if (mode == NL80211_TXRATE_HE) {
 			count = sscanf(arg, "%u:%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u",
 				       &inss, &tab[0], &tab[1], &tab[2], &tab[3],
 				       &tab[4], &tab[5], &tab[6], &tab[7], &tab[8],
@@ -80,6 +88,11 @@ static int parse_he_chunk(const char *ar
 	return parse_rate_chunk(arg, nss, mcs, NL80211_TXRATE_HE);
 }
 
+static int parse_eht_chunk(const char *arg, __u8 *nss, __u16 *mcs)
+{
+	return parse_rate_chunk(arg, nss, mcs, NL80211_TXRATE_EHT);
+}
+
 static int setup_vht(struct nl80211_txrate_vht *txrate_vht,
 		     int argc, char **argv)
 {
@@ -120,6 +133,26 @@ static int setup_he(struct nl80211_txrat
 	return 1;
 }
 
+static int setup_eht(struct nl80211_txrate_eht *txrate_eht,
+		    int argc, char **argv)
+{
+	__u8 nss;
+	__u16 mcs;
+	int i;
+
+	memset(txrate_eht, 0, sizeof(*txrate_eht));
+
+	for (i = 0; i < argc; i++) {
+		if (!parse_eht_chunk(argv[i], &nss, &mcs))
+			return 0;
+
+		nss--;
+		txrate_eht->mcs[nss] |= mcs;
+	}
+
+	return 1;
+}
+
 #define HE_GI_STR_MAX	16
 #define HE_GI_08_STR "0.8"
 #define HE_GI_16_STR "1.6"
@@ -139,6 +172,26 @@ int parse_he_gi(char *he_gi)
 	return -1;
 }
 
+#define EHT_GI_STR_MAX	16
+#define EHT_GI_08_STR "0.8"
+#define EHT_GI_16_STR "1.6"
+#define EHT_GI_32_STR "3.2"
+static int parse_eht_gi(char *eht_gi)
+{
+	if (eht_gi == NULL)
+		return 0;
+
+	if (!strncmp(eht_gi, EHT_GI_08_STR, sizeof(EHT_GI_08_STR)))
+		return NL80211_RATE_INFO_EHT_GI_0_8;
+	if (!strncmp(eht_gi, EHT_GI_16_STR, sizeof(EHT_GI_16_STR)))
+		return NL80211_RATE_INFO_EHT_GI_1_6;
+	if (!strncmp(eht_gi, EHT_GI_32_STR, sizeof(EHT_GI_32_STR)))
+		return NL80211_RATE_INFO_EHT_GI_3_2;
+
+	return -1;
+}
+
+
 #define VHT_ARGC_MAX	100
 
 int set_bitrates(struct nl_msg *msg,
@@ -157,6 +210,8 @@ int set_bitrates(struct nl_msg *msg,
 	bool have_he_mcs_24 = false, have_he_mcs_5 = false;
 	bool have_he_ul_mcs_24 = false, have_he_ul_mcs_5 = false;
 	bool have_he_mcs_6 = false;
+	bool have_eht_mcs_24 = false, have_eht_mcs_5 = false;
+	bool have_eht_mcs_6 = false;
 	uint8_t ht_mcs_24[77], ht_mcs_5[77];
 	int n_ht_mcs_24 = 0, n_ht_mcs_5 = 0;
 	struct nl80211_txrate_vht txrate_vht_24 = {};
@@ -166,23 +221,35 @@ int set_bitrates(struct nl_msg *msg,
 	struct nl80211_txrate_he txrate_he_6 = {};
 	struct nl80211_txrate_he txrate_he_ul_24 = {};
 	struct nl80211_txrate_he txrate_he_ul_5 = {};
+	struct nl80211_txrate_eht txrate_eht_24 = {};
+	struct nl80211_txrate_eht txrate_eht_5 = {};
+	struct nl80211_txrate_eht txrate_eht_6 = {};
 	uint8_t *mcs = NULL;
 	int *n_mcs = NULL;
 	char *vht_argv_5[VHT_ARGC_MAX] = {}; char *vht_argv_24[VHT_ARGC_MAX] = {};
 	char *he_argv_5[VHT_ARGC_MAX] = {}; char *he_argv_24[VHT_ARGC_MAX] = {};
 	char *he_argv_6[VHT_ARGC_MAX] = {};
 	char *he_ul_argv_5[VHT_ARGC_MAX] = {}; char *he_ul_argv_24[VHT_ARGC_MAX] = {};
+	char *eht_argv_5[VHT_ARGC_MAX] = {}; char *eht_argv_24[VHT_ARGC_MAX] = {};
+	char *eht_argv_6[VHT_ARGC_MAX] = {};
 	char **vht_argv = NULL, **he_argv = NULL, **he_ul_argv = NULL;
+	char **eht_argv = NULL;
 	int vht_argc_5 = 0; int vht_argc_24 = 0;
 	int he_argc_5 = 0; int he_argc_24 = 0;
 	int he_argc_6 = 0;
 	int he_ul_argc_5 = 0; int he_ul_argc_24 = 0;
+	int eht_argc_5 = 0; int eht_argc_24 = 0; int eht_argc_6 = 0;
 	int *vht_argc = NULL, *he_argc = NULL, *he_ul_argc = NULL;
+	int *eht_argc = NULL;
 	int sgi_24 = 0, sgi_5 = 0, lgi_24 = 0, lgi_5 = 0;
 	int has_he_gi_24 = 0, has_he_gi_5 = 0, has_he_ltf_24 = 0, has_he_ltf_5 = 0;
 	int has_he_gi_6 = 0, has_he_ltf_6 = 0;
 	int he_gi = 0, he_ltf = 0;
 	char *he_gi_argv = NULL;
+	int has_eht_gi_24 = 0, has_eht_gi_5 = 0, has_eht_ltf_24 = 0, has_eht_ltf_5 = 0;
+	int has_eht_gi_6 = 0, has_eht_ltf_6 = 0;
+	int eht_gi = 0, eht_ltf = 0;
+	char *eht_gi_argv = NULL;
 
 	enum {
 		S_NONE,
@@ -194,6 +261,9 @@ int set_bitrates(struct nl_msg *msg,
 		S_HE_GI,
 		S_HE_LTF,
 		S_HE_UL,
+		S_EHT,
+		S_EHT_GI,
+		S_EHT_LTF,
 	} parser_state = S_NONE;
 
 	for (i = 0; i < argc; i++) {
@@ -265,6 +335,27 @@ int set_bitrates(struct nl_msg *msg,
 			he_argv = he_argv_6;
 			he_argc = &he_argc_6;
 			have_he_mcs_6 = true;
+		} else if (strcmp(argv[i], "eht-mcs-2.4") == 0) {
+			if (have_eht_mcs_24)
+				return 1;
+			parser_state = S_EHT;
+			eht_argv = eht_argv_24;
+			eht_argc = &eht_argc_24;
+			have_eht_mcs_24 = true;
+		} else if (strcmp(argv[i], "eht-mcs-5") == 0) {
+			if (have_eht_mcs_5)
+				return 1;
+			parser_state = S_EHT;
+			eht_argv = eht_argv_5;
+			eht_argc = &eht_argc_5;
+			have_eht_mcs_5 = true;
+		} else if (strcmp(argv[i], "eht-mcs-6") == 0) {
+			if (have_eht_mcs_6)
+				return 1;
+			parser_state = S_EHT;
+			eht_argv = eht_argv_6;
+			eht_argc = &eht_argc_6;
+			have_eht_mcs_6 = true;
 		} else if (strcmp(argv[i], "sgi-2.4") == 0) {
 			sgi_24 = 1;
 			parser_state = S_GI;
@@ -295,6 +386,24 @@ int set_bitrates(struct nl_msg *msg,
 		} else if (strcmp(argv[i], "he-ltf-6") == 0) {
 			has_he_ltf_6 = 1;
 			parser_state = S_HE_LTF;
+		} else if (strcmp(argv[i], "eht-gi-2.4") == 0) {
+			has_eht_gi_24 = 1;
+			parser_state = S_EHT_GI;
+		} else if (strcmp(argv[i], "eht-gi-5") == 0) {
+			has_eht_gi_5 = 1;
+			parser_state = S_EHT_GI;
+		} else if (strcmp(argv[i], "eht-gi-6") == 0) {
+			has_eht_gi_6 = 1;
+			parser_state = S_EHT_GI;
+		} else if (strcmp(argv[i], "eht-ltf-2.4") == 0) {
+			has_eht_ltf_24 = 1;
+			parser_state = S_EHT_LTF;
+		} else if (strcmp(argv[i], "eht-ltf-5") == 0) {
+			has_eht_ltf_5 = 1;
+			parser_state = S_EHT_LTF;
+		} else if (strcmp(argv[i], "eht-ltf-6") == 0) {
+			has_eht_ltf_6 = 1;
+			parser_state = S_EHT_LTF;
 		} else if (strcmp(argv[i], "he-ul-mcs-2.4") == 0) {
                          if (have_he_ul_mcs_24)
                                 return 1;
@@ -354,6 +463,22 @@ int set_bitrates(struct nl_msg *msg,
 				return 1;
 			he_ul_argv[(*he_ul_argc)++] = argv [i];
 			break;
+		case S_EHT:
+			if (*eht_argc >= VHT_ARGC_MAX)
+				return 1;
+			eht_argv[(*eht_argc)++] = argv[i];
+			break;
+		case S_EHT_GI:
+			eht_gi_argv = argv[i];
+			break;
+		case S_EHT_LTF:
+			eht_ltf = strtol(argv[i], &end, 0);
+			if (*end != '\0')
+				return 1;
+			if (eht_ltf < 0 || eht_ltf > 4)
+				return 1;
+			eht_ltf = eht_ltf >> 1;
+			break;
 		default:
 			if (attr != NL80211_ATTR_TX_RATES)
 				goto next;
@@ -385,6 +510,18 @@ next:
 		if (!setup_he(&txrate_he_6, he_argc_6, he_argv_6))
 			return -EINVAL;
 
+	if (have_eht_mcs_24)
+		if (!setup_eht(&txrate_eht_24, eht_argc_24, eht_argv_24))
+			return -EINVAL;
+
+	if (have_eht_mcs_5)
+		if (!setup_eht(&txrate_eht_5, eht_argc_5, eht_argv_5))
+			return -EINVAL;
+
+	if (have_eht_mcs_6)
+		if (!setup_eht(&txrate_eht_6, eht_argc_6, eht_argv_6))
+			return -EINVAL;
+
 	if (sgi_5 && lgi_5)
 		return 1;
 
@@ -397,6 +534,12 @@ next:
 			return 1;
 	}
 
+	if (eht_gi_argv) {
+		eht_gi = parse_eht_gi(eht_gi_argv);
+		if (eht_gi < 0)
+			return 1;
+	}
+
 	if (have_he_ul_mcs_24)
                 if (!setup_he(&txrate_he_ul_24, he_ul_argc_24, he_ul_argv_24))
                         return -EINVAL;
@@ -410,7 +553,8 @@ next:
 		goto nla_put_failure;
 
 	if (have_legacy_24 || have_ht_mcs_24 || have_vht_mcs_24 || have_he_mcs_24 ||
-	    sgi_24 || lgi_24 || has_he_gi_24 || has_he_ltf_24 || have_he_ul_mcs_24) {
+	    sgi_24 || lgi_24 || has_he_gi_24 || has_he_ltf_24 || have_he_ul_mcs_24 ||
+	    have_eht_mcs_24 || has_eht_gi_24 || has_eht_ltf_24) {
 		nl_band = nla_nest_start(msg, NL80211_BAND_2GHZ);
 		if (!nl_band)
 			goto nla_put_failure;
@@ -431,6 +575,13 @@ next:
 			nla_put_u8(msg, NL80211_TXRATE_HE_GI, he_gi);
 		if (has_he_ltf_24)
 			nla_put_u8(msg, NL80211_TXRATE_HE_LTF, he_ltf);
+		if (have_eht_mcs_24)
+			nla_put(msg, NL80211_TXRATE_EHT, sizeof(txrate_eht_24),
+				&txrate_eht_24);
+		if (has_eht_gi_24)
+			nla_put_u8(msg, NL80211_TXRATE_EHT_GI, eht_gi);
+		if (has_eht_ltf_24)
+			nla_put_u8(msg, NL80211_TXRATE_EHT_LTF, eht_ltf);
 		if (have_he_ul_mcs_24)
                         nla_put(msg, NL80211_TXRATE_HE_UL, sizeof(txrate_he_ul_24),
                                 &txrate_he_ul_24);
@@ -438,7 +589,8 @@ next:
 	}
 
 	if (have_legacy_5 || have_ht_mcs_5 || have_vht_mcs_5 || have_he_mcs_5 ||
-	    sgi_5 || lgi_5 || has_he_gi_5 || has_he_ltf_5 || have_he_ul_mcs_5) {
+	    sgi_5 || lgi_5 || has_he_gi_5 || has_he_ltf_5 || have_he_ul_mcs_5 ||
+	    have_eht_mcs_5 || has_eht_gi_5 || has_eht_ltf_5) {
 		nl_band = nla_nest_start(msg, NL80211_BAND_5GHZ);
 		if (!nl_band)
 			goto nla_put_failure;
@@ -459,13 +611,21 @@ next:
 			nla_put_u8(msg, NL80211_TXRATE_HE_GI, he_gi);
 		if (has_he_ltf_5)
 			nla_put_u8(msg, NL80211_TXRATE_HE_LTF, he_ltf);
+		if (have_eht_mcs_5)
+			nla_put(msg, NL80211_TXRATE_EHT, sizeof(txrate_eht_5),
+				&txrate_eht_5);
+		if (has_eht_gi_5)
+        		nla_put_u8(msg, NL80211_TXRATE_EHT_GI, eht_gi);
+		if (has_eht_ltf_5)
+			nla_put_u8(msg, NL80211_TXRATE_EHT_LTF, eht_ltf);
 		if (have_he_ul_mcs_5)
                         nla_put(msg, NL80211_TXRATE_HE_UL, sizeof(txrate_he_ul_5),
                                 &txrate_he_ul_5);
 		nla_nest_end(msg, nl_band);
 	}
 
-	if (have_he_mcs_6 || has_he_gi_6 || has_he_ltf_6) {
+	if (have_he_mcs_6 || has_he_gi_6 || has_he_ltf_6 || have_eht_mcs_6 ||
+	    has_eht_gi_6 || has_eht_ltf_6) {
 		nl_band = nla_nest_start(msg, NL80211_BAND_6GHZ);
 		if (!nl_band)
 			goto nla_put_failure;
@@ -476,6 +636,13 @@ next:
 			nla_put_u8(msg, NL80211_TXRATE_HE_GI, he_gi);
 		if (has_he_ltf_6)
 			nla_put_u8(msg, NL80211_TXRATE_HE_LTF, he_ltf);
+		if (have_eht_mcs_6)
+			nla_put(msg, NL80211_TXRATE_EHT, sizeof(txrate_eht_6),
+				&txrate_eht_6);
+		if (has_eht_gi_6)
+			nla_put_u8(msg, NL80211_TXRATE_EHT_GI, eht_gi);
+		if (has_eht_ltf_6)
+			nla_put_u8(msg, NL80211_TXRATE_EHT_LTF, eht_ltf);
 		nla_nest_end(msg, nl_band);
 	}
 
@@ -495,9 +662,9 @@ static int handle_bitrates(struct nl8021
 }
 
 #define DESCR_LEGACY "[legacy-<2.4|5> <legacy rate in Mbps>*]"
-#define DESCR DESCR_LEGACY " [ht-mcs-<2.4|5> <MCS index>*] [vht-mcs-<2.4|5>  [he-mcs-<2.4|5|6> <NSS:MCSx,MCSy... | NSS:MCSx-MCSy>*] [sgi-2.4|lgi-2.4] [sgi-5|lgi-5] [he-ul-mcs-<2.4|5> <NSS:MCS>]"
+#define DESCR DESCR_LEGACY " [ht-mcs-<2.4|5> <MCS index>*] [vht-mcs-<2.4|5>  [he-mcs-<2.4|5|6> <NSS:MCSx,MCSy... | NSS:MCSx-MCSy>*] [sgi-2.4|lgi-2.4] [sgi-5|lgi-5] [he-ul-mcs-<2.4|5> <NSS:MCS>] [eht-mcs-<2.4|5|6> <NSS:MCSx,MCSy... | NSS:MCSx-MCSy>*] [eht-gi-<2.4|5|6> <0.8|1.6|3.2>] [eht-ltf-<2.4|5|6> <1|2|4>]"
 
-COMMAND(set, bitrates, "[legacy-<2.4|5> <legacy rate in Mbps>*] [ht-mcs-<2.4|5> <MCS index>*] [vht-mcs-<2.4|5> [he-mcs-<2.4|5|6> <NSS:MCSx,MCSy... | NSS:MCSx-MCSy>*] [sgi-2.4|lgi-2.4] [sgi-5|lgi-5] [he-gi-<2.4|5|6> <0.8|1.6|3.2>] [he-ltf-<2.4|5|6> <1|2|4>] [he-ul-mcs-<2.4|5> <NSS:MCS>]",
+COMMAND(set, bitrates, "[legacy-<2.4|5> <legacy rate in Mbps>*] [ht-mcs-<2.4|5> <MCS index>*] [vht-mcs-<2.4|5> [he-mcs-<2.4|5|6> <NSS:MCSx,MCSy... | NSS:MCSx-MCSy>*] [sgi-2.4|lgi-2.4] [sgi-5|lgi-5] [he-gi-<2.4|5|6> <0.8|1.6|3.2>] [he-ltf-<2.4|5|6> <1|2|4>] [he-ul-mcs-<2.4|5> <NSS:MCS>] [eht-mcs-<2.4|5|6> <NSS:MCSx,MCSy... | NSS:MCSx-MCSy>*] [eht-gi-<2.4|5|6> <0.8|1.6|3.2>] [eht-ltf-<2.4|5|6> <1|2|4>]",
 	NL80211_CMD_SET_TX_BITRATE_MASK, 0, CIB_NETDEV, handle_bitrates,
 	"Sets up the specified rate masks.\n"
 	"Not passing any arguments would clear the existing mask (if any).");
