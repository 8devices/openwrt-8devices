From 7f24d44812413a9f05c1ed0fd4059f7461789d4a Mon Sep 17 00:00:00 2001
From: Aloka Dixit <quic_alokad@quicinc.com>
Date: Fri, 10 Sep 2021 15:24:49 -0700
Subject: [PATCH 12/15] mbssid: process known BSSID element

Process the known BSSID elements if included by non-AP stations.
The format is described in IEEE Std 802.11ax-2021 9.4.2.261.

Non-AP stations may include this element in directed probe requests
to indicate which of the multiple BSSIDs they have already discovered.
AP should exclude these profiles from the probe response.

Signed-off-by: Aloka Dixit <quic_alokad@quicinc.com>
---
 src/ap/beacon.c                | 21 ++++++++++-------
 src/ap/ieee802_11.c            | 42 ++++++++++++++++++++++++++++------
 src/ap/ieee802_11.h            |  6 +++--
 src/common/ieee802_11_common.c |  4 ++++
 src/common/ieee802_11_common.h |  2 ++
 src/common/ieee802_11_defs.h   |  1 +
 6 files changed, 59 insertions(+), 17 deletions(-)

--- a/src/ap/beacon.c
+++ b/src/ap/beacon.c
@@ -487,7 +487,8 @@ static u8 * hostapd_set_mbssid_beacon(st
 	params->mbssid_index = hostapd_mbssid_get_bss_index(hapd);
 	params->mbssid_count = iface->num_bss;
 
-	len = hostapd_eid_mbssid_len(tx_bss, WLAN_FC_STYPE_BEACON, &num_mbssid);
+	len = hostapd_eid_mbssid_len(tx_bss, WLAN_FC_STYPE_BEACON, &num_mbssid,
+				     NULL, 0);
 	if (hapd->iconf->ema) {
 		if (!iface->ema_max_periodicity) {
 			wpa_printf(MSG_WARNING, "MBSSID: Driver doesn't support"
@@ -528,7 +529,7 @@ static u8 * hostapd_set_mbssid_beacon(st
 				 params->mbssid_elem + len,
 				 WLAN_FC_STYPE_BEACON,
 				 params->mbssid_elem_count,
-				 params->mbssid_elem_offset);
+				 params->mbssid_elem_offset, NULL, 0);
 	params->mbssid_elem_len = end - params->mbssid_elem;
 
         if (hapd->iconf->ema) {
@@ -573,7 +574,8 @@ static u8 * hostapd_ext_capab_mbssid(str
 
 static u8 * hostapd_gen_probe_resp(struct hostapd_data *hapd,
 				   const struct ieee80211_mgmt *req,
-				   int is_p2p, size_t *resp_len)
+				   int is_p2p, size_t *resp_len,
+				   const u8 *known_bss, u8 known_bss_len)
 {
 	struct ieee80211_mgmt *resp;
 	u8 *pos, *epos, *csa_pos, *ext_cap_pos;
@@ -622,7 +624,7 @@ static u8 * hostapd_gen_probe_resp(struc
 #endif /* CONFIG_IEEE80211AX */
 
 	buflen += hostapd_eid_mbssid_len(hapd_probed, WLAN_FC_STYPE_PROBE_RESP,
-					 NULL);
+					 NULL, known_bss, known_bss_len);
 	buflen += hostapd_eid_rnr_len(hapd, WLAN_FC_STYPE_PROBE_RESP);
 	buflen += hostapd_mbo_ie_len(hapd);
 	buflen += hostapd_eid_owe_trans_len(hapd);
@@ -703,7 +705,8 @@ static u8 * hostapd_gen_probe_resp(struc
 	pos = hostapd_eid_ht_capabilities(hapd, pos);
 	pos = hostapd_eid_ht_operation(hapd, pos);
 	pos = hostapd_eid_mbssid(hapd_probed, pos, epos,
-				 WLAN_FC_STYPE_PROBE_RESP, 0, NULL);
+				 WLAN_FC_STYPE_PROBE_RESP, 0, NULL,
+				 known_bss, known_bss_len);
 
 	ext_cap_pos = pos;
 	pos = hostapd_eid_ext_capab(hapd, pos);
@@ -1268,7 +1271,8 @@ void handle_probe_req(struct hostapd_dat
 		     " signal=%d", MAC2STR(mgmt->sa), ssi_signal);
 
 	resp = hostapd_gen_probe_resp(hapd, mgmt, elems.p2p != NULL,
-				      &resp_len);
+				      &resp_len, elems.mbssid_known_bss,
+				      elems.mbssid_known_bss_len);
 	if (resp == NULL)
 		return;
 
@@ -1338,7 +1342,7 @@ static u8 * hostapd_probe_resp_offloads(
 			   "this");
 
 	/* Generate a Probe Response template for the non-P2P case */
-	return hostapd_gen_probe_resp(hapd, NULL, 0, resp_len);
+	return hostapd_gen_probe_resp(hapd, NULL, 0, resp_len, NULL, 0);
 }
 #endif /* NEED_AP_MLME */
 
@@ -1355,7 +1359,8 @@ static u8 * hostapd_unsol_bcast_probe_re
 		hapd->conf->unsol_bcast_probe_resp_interval;
 
 	return hostapd_gen_probe_resp(hapd, NULL, 0,
-				      &params->unsol_bcast_probe_resp_tmpl_len);
+				      &params->unsol_bcast_probe_resp_tmpl_len,
+				      NULL, 0);
 }
 #endif /* CONFIG_IEEE80211AX */
 
--- a/src/ap/ieee802_11.c
+++ b/src/ap/ieee802_11.c
@@ -7689,7 +7689,9 @@ u8 * hostapd_eid_rnr(struct hostapd_data
 
 
 static size_t hostapd_eid_mbssid_elem_len(struct hostapd_data *hapd,
-					  u32 frame_type, size_t *bss_index)
+					  u32 frame_type, size_t *bss_index,
+					  const u8 *known_bss,
+					  size_t known_bss_len)
 {
 	struct hostapd_data *tx_bss = hostapd_mbssid_get_tx_bss(hapd);
 	size_t len = 3, i;
@@ -7700,6 +7702,12 @@ static size_t hostapd_eid_mbssid_elem_le
 		size_t nontx_profile_len, auth_len;
 		u8 ie_count = 0;
 
+		if (known_bss && (known_bss_len > (i / 8))) {
+			known_bss = &known_bss[i / 8];
+			if (*known_bss & (u8)(BIT(i % 8)))
+				continue;
+		}
+
 		if (!bss || !bss->conf || !bss->started)
 			continue;
 
@@ -7751,7 +7759,8 @@ mbssid_too_big:
 
 
 size_t hostapd_eid_mbssid_len(struct hostapd_data *hapd, u32 frame_type,
-			      u8 *elem_count)
+			      u8 *elem_count, const u8 *known_bss,
+			      size_t known_bss_len)
 {
 	size_t len = 0, bss_index = 1;
 
@@ -7771,7 +7780,8 @@ size_t hostapd_eid_mbssid_len(struct hos
 
 	while (bss_index < hapd->iface->num_bss) {
 		len += hostapd_eid_mbssid_elem_len(hapd, frame_type,
-						   &bss_index);
+						   &bss_index, known_bss,
+						   known_bss_len);
 
 		if (frame_type == WLAN_FC_STYPE_BEACON)
 			*elem_count += 1;
@@ -7782,7 +7792,8 @@ size_t hostapd_eid_mbssid_len(struct hos
 
 static u8 * hostapd_eid_mbssid_elem(struct hostapd_data *hapd, u8 *eid, u8 *end,
 				    u32 frame_type, u8 max_bssid_indicator,
-				    size_t *bss_index, u8 elem_count)
+				    size_t *bss_index, u8 elem_count,
+				    const u8 *known_bss, size_t known_bss_len)
 {
 	struct hostapd_data *tx_bss = hostapd_mbssid_get_tx_bss(hapd);
 	size_t i;
@@ -7801,6 +7812,12 @@ static u8 * hostapd_eid_mbssid_elem(stru
 		size_t auth_len = 0;
 		u16 capab_info;
 
+		if (known_bss && (known_bss_len > (i / 8))) {
+			known_bss = &known_bss[i / 8];
+			if (*known_bss & (u8)(BIT(i % 8)))
+				continue;
+		}
+
 		if (!bss || !bss->conf || !bss->started)
 			continue;
 		conf = bss->conf;
@@ -7892,10 +7909,12 @@ mbssid_too_big:
 
 
 u8 * hostapd_eid_mbssid(struct hostapd_data *hapd, u8 *eid, u8 *end,
-			u32 frame_type, u8 elem_count, u8 **elem_offset)
+			u32 frame_type, u8 elem_count, u8 **elem_offset,
+			const u8 *known_bss, size_t known_bss_len)
 {
 	size_t bss_index = 1;
 	u8 elem_index = 0;
+	u8 max_bssid_indicator = hostapd_max_bssid_indicator(hapd);
 
 	if (!hapd->iconf->mbssid || hapd->iface->num_bss <= 1 ||
 	    (frame_type != WLAN_FC_STYPE_BEACON &&
@@ -7919,8 +7938,9 @@ u8 * hostapd_eid_mbssid(struct hostapd_d
 			elem_index = elem_index + 1;
 		}
 		eid = hostapd_eid_mbssid_elem(hapd, eid, end, frame_type,
-					      hostapd_max_bssid_indicator(hapd),
-					      &bss_index, elem_count);
+					      max_bssid_indicator, &bss_index,
+					      elem_count, known_bss,
+					      known_bss_len);
 	}
 	return eid;
 }
--- a/src/ap/ieee802_11.h
+++ b/src/ap/ieee802_11.h
@@ -131,9 +131,11 @@ void hostapd_client_poll_ok(struct hosta
 u8 * hostapd_eid_bss_max_idle_period(struct hostapd_data *hapd, u8 *eid);
 int auth_sae_init_committed(struct hostapd_data *hapd, struct sta_info *sta);
 size_t hostapd_eid_mbssid_len(struct hostapd_data *hapd, u32 frame_type,
-			      u8 *elem_count);
+			      u8 *elem_count, const u8 *known_bss,
+			      size_t known_bss_len);
 u8 * hostapd_eid_mbssid(struct hostapd_data *hapd, u8 *eid, u8 *end,
-			u32 frame_type, u8 elem_count, u8 **elem_offset);
+			u32 frame_type, u8 elem_count, u8 **elem_offset,
+			const u8 *known_bss, size_t known_bss_len);
 #ifdef CONFIG_SAE
 void sae_clear_retransmit_timer(struct hostapd_data *hapd,
 				struct sta_info *sta);
--- a/src/common/ieee802_11_common.c
+++ b/src/common/ieee802_11_common.c
@@ -307,6 +307,10 @@ static int ieee802_11_parse_extension(co
 		elems->pasn_params = pos;
 		elems->pasn_params_len = elen;
 		break;
+	case WLAN_EID_EXT_KNOWN_BSSID:
+		elems->mbssid_known_bss = pos;
+		elems->mbssid_known_bss_len = elen;
+		break;
 	default:
 		if (show_errors) {
 			wpa_printf(MSG_MSGDUMP,
--- a/src/common/ieee802_11_common.h
+++ b/src/common/ieee802_11_common.h
@@ -118,6 +118,7 @@ struct ieee802_11_elems {
 	const u8 *sae_pk;
 	const u8 *s1g_capab;
 	const u8 *pasn_params;
+	const u8 *mbssid_known_bss;
 
 	u8 ssid_len;
 	u8 supp_rates_len;
@@ -172,6 +173,7 @@ struct ieee802_11_elems {
 	u8 short_ssid_list_len;
 	u8 sae_pk_len;
 	u8 pasn_params_len;
+	u8 mbssid_known_bss_len;
 
 	struct mb_ies_info mb_ies;
 	struct frag_ies_info frag_ies;
--- a/src/common/ieee802_11_defs.h
+++ b/src/common/ieee802_11_defs.h
@@ -483,6 +483,7 @@
 #define WLAN_EID_EXT_OCV_OCI 54
 #define WLAN_EID_EXT_MULTIPLE_BSSID_CONFIGURATION 55
 #define WLAN_EID_EXT_NON_INHERITANCE 56
+#define WLAN_EID_EXT_KNOWN_BSSID 57
 #define WLAN_EID_EXT_SHORT_SSID_LIST 58
 #define WLAN_EID_EXT_HE_6GHZ_BAND_CAP 59
 #define WLAN_EID_EXT_EDMG_CAPABILITIES 61
