From 0fb1ecdb420b94319f56542d3deb5c61f6ae27ee Mon Sep 17 00:00:00 2001
From: Aloka Dixit <alokad@codeaurora.org>
Date: Tue, 8 Sep 2020 16:36:32 -0700
Subject: [PATCH] AP: Add 6GHz security constraints

Add security constraints in 6GHz band as given in IEEE P802.11ax/D6.1,
section 12.13.2 (Security constraints in the 6 GHz band).

Additionally this commit also adds checks for following:
(1) Make management frame protection mandatory in 6GHz.
(2) For WPA3-SAE, only H2E mechanism is allowed.

Signed-off-by: Aloka Dixit <alokad@codeaurora.org>
---
 src/ap/beacon.c              |   2 +
 src/drivers/driver.h         |  14 ++++
 src/drivers/driver_nl80211.c | 135 +++++++++++++++++++++++++++++++----
 wpa_supplicant/ap.c          |   1 +
 4 files changed, 140 insertions(+), 12 deletions(-)

--- a/src/ap/beacon.c
+++ b/src/ap/beacon.c
@@ -1695,6 +1695,8 @@ int ieee802_11_build_ap_params(struct ho
 	params->auth_algs = hapd->conf->auth_algs;
 	params->wpa_version = hapd->conf->wpa;
 	params->privacy = hapd->conf->wpa;
+	params->ieee80211w = hapd->conf->ieee80211w;
+	params->sae_pwe = hapd->conf->sae_pwe;
 #ifdef CONFIG_WEP
 	params->privacy |= hapd->conf->ssid.wep.keys_set ||
 		(hapd->conf->ieee802_1x &&
--- a/src/drivers/driver.h
+++ b/src/drivers/driver.h
@@ -1195,6 +1195,10 @@ struct wpa_driver_associate_params {
 	 * fils_erp_rrk_len - Length of fils_erp_rrk in bytes
 	 */
 	size_t fils_erp_rrk_len;
+	/**
+	 * PWE derivation mechanism for SAE
+	 */
+	int sae_pwe;
 };
 
 enum hide_ssid {
@@ -1586,6 +1590,16 @@ struct wpa_driver_ap_params {
 	 * multiple_bssid_ie_count - The the number of offsets inside multiple_bssid_ie_offsets
 	 */
 	int multiple_bssid_ie_count;
+
+	/**
+	 * Management frame protection
+	 */
+	enum mfp_options ieee80211w;
+
+	/**
+	 * PWE derivation mechanism for SAE
+	 */
+	int sae_pwe;
 };
 
 struct wpa_driver_mesh_bss_params {
--- a/src/drivers/driver_nl80211.c
+++ b/src/drivers/driver_nl80211.c
@@ -4408,6 +4408,46 @@ error:
 }
 #endif /* CONFIG_IEEE80211AX */
 
+
+static bool wpa_driver_6g_crypto_validity(int n_suite, u32 *suite,
+					  u32 suite_type, int sae_pwe)
+{
+	int i;
+	switch (suite_type) {
+	case NL80211_ATTR_AKM_SUITES:
+		for (i = 0; i < n_suite; i++) {
+			if (suite[i] == RSN_AUTH_KEY_MGMT_PSK_OVER_802_1X ||
+			    suite[i] == RSN_AUTH_KEY_MGMT_FT_PSK ||
+			    suite[i] == RSN_AUTH_KEY_MGMT_PSK_SHA256) {
+				wpa_printf(MSG_DEBUG,
+					   "nl80211: Invalid AKM suite\n");
+				return false;
+			}
+			if (suite[i] == RSN_AUTH_KEY_MGMT_SAE && sae_pwe != 1) {
+				wpa_printf(MSG_DEBUG,
+					   "nl80211: Only H2E allowed for SAE in 6GHz\n");
+				return false;
+			}
+		}
+		break;
+	case NL80211_ATTR_CIPHER_SUITES_PAIRWISE:
+	case NL80211_ATTR_CIPHER_SUITE_GROUP:
+		for (i = 0; i < n_suite; i++) {
+			if (suite[i] == RSN_CIPHER_SUITE_NONE ||
+			    suite[i] == RSN_CIPHER_SUITE_WEP40 ||
+			    suite[i] == WPA_CIPHER_WEP104 ||
+			    suite[i] == RSN_CIPHER_SUITE_TKIP) {
+				wpa_printf(MSG_DEBUG,
+					   "nl80211: Invalid cipher suite\n");
+				return false;
+			}
+		}
+		break;
+	}
+	return true;
+}
+
+
 static int wpa_driver_nl80211_set_ap(void *priv,
 				     struct wpa_driver_ap_params *params)
 {
@@ -4420,6 +4460,7 @@ static int wpa_driver_nl80211_set_ap(voi
 	int num_suites;
 	u32 suites[20], suite;
 	u32 ver;
+	int is_6ghz = 0;
 #ifdef CONFIG_MESH
 	struct wpa_driver_mesh_bss_params mesh_params;
 #endif /* CONFIG_MESH */
@@ -4506,6 +4547,17 @@ static int wpa_driver_nl80211_set_ap(voi
 		ver |= NL80211_WPA_VERSION_1;
 	if (params->wpa_version & WPA_PROTO_RSN)
 		ver |= NL80211_WPA_VERSION_2;
+
+	is_6ghz = is_6ghz_freq(params->freq->freq);
+	if (is_6ghz) {
+		if (ver != NL80211_WPA_VERSION_2) {
+			wpa_printf(MSG_DEBUG, "nl80211: Only WPA3 allowed in 6GHz\n");
+			goto fail;
+		} else if (params->ieee80211w != MGMT_FRAME_PROTECTION_REQUIRED) {
+			wpa_printf(MSG_DEBUG, "nl80211: Management frame protection is required in 6GHz\n");
+			goto fail;
+		}
+	}
 	if (ver &&
 	    nla_put_u32(msg, NL80211_ATTR_WPA_VERSIONS, ver))
 		goto fail;
@@ -4518,10 +4570,17 @@ static int wpa_driver_nl80211_set_ap(voi
 		wpa_printf(MSG_DEBUG,
 			   "nl80211: Not enough room for all AKM suites (num_suites=%d > NL80211_MAX_NR_AKM_SUITES)",
 			   num_suites);
-	else if (num_suites &&
-		 nla_put(msg, NL80211_ATTR_AKM_SUITES, num_suites * sizeof(u32),
-			 suites))
-		goto fail;
+	else if (num_suites) {
+		if (is_6ghz &&
+		    !wpa_driver_6g_crypto_validity(num_suites, suites,
+						   NL80211_ATTR_AKM_SUITES,
+						   params->sae_pwe))
+			goto fail;
+
+		if (nla_put(msg, NL80211_ATTR_AKM_SUITES,
+			    num_suites * sizeof(u32), suites))
+			goto fail;
+	}
 
 	if (params->key_mgmt_suites & WPA_KEY_MGMT_IEEE8021X_NO_WPA &&
 	    (!params->pairwise_ciphers ||
@@ -4539,17 +4598,31 @@ static int wpa_driver_nl80211_set_ap(voi
 		   params->pairwise_ciphers);
 	num_suites = wpa_cipher_to_cipher_suites(params->pairwise_ciphers,
 						 suites, ARRAY_SIZE(suites));
-	if (num_suites &&
-	    nla_put(msg, NL80211_ATTR_CIPHER_SUITES_PAIRWISE,
-		    num_suites * sizeof(u32), suites))
+	if (num_suites) {
+		if (is_6ghz &&
+		    !wpa_driver_6g_crypto_validity(num_suites, suites,
+						   NL80211_ATTR_CIPHER_SUITES_PAIRWISE,
+						   params->sae_pwe))
+			goto fail;
+
+		if (nla_put(msg, NL80211_ATTR_CIPHER_SUITES_PAIRWISE,
+			    num_suites * sizeof(u32), suites))
 		goto fail;
+	}
 
 	wpa_printf(MSG_DEBUG, "nl80211: group_cipher=0x%x",
 		   params->group_cipher);
 	suite = wpa_cipher_to_cipher_suite(params->group_cipher);
-	if (suite &&
-	    nla_put_u32(msg, NL80211_ATTR_CIPHER_SUITE_GROUP, suite))
-		goto fail;
+	if (suite) {
+		if (is_6ghz &&
+		    !wpa_driver_6g_crypto_validity(num_suites, suites,
+						   NL80211_ATTR_CIPHER_SUITE_GROUP,
+						   params->sae_pwe))
+			goto fail;
+
+		if (nla_put_u32(msg, NL80211_ATTR_CIPHER_SUITE_GROUP, suite))
+			goto fail;
+	}
 
 	if (params->beacon_ies) {
 		wpa_hexdump_buf(MSG_DEBUG, "nl80211: beacon_ies",
@@ -6014,6 +6087,8 @@ static int nl80211_connect_common(struct
 				  struct wpa_driver_associate_params *params,
 				  struct nl_msg *msg)
 {
+	int is_6ghz = 0;
+
 	if (nla_put_flag(msg, NL80211_ATTR_IFACE_SOCKET_OWNER))
 		return -1;
 
@@ -6038,6 +6113,8 @@ static int nl80211_connect_common(struct
 				params->freq.freq))
 			return -1;
 		drv->assoc_freq = params->freq.freq;
+
+		is_6ghz = is_6ghz_freq(params->freq.freq);
 	} else
 		drv->assoc_freq = 0;
 
@@ -6085,6 +6162,19 @@ static int nl80211_connect_common(struct
 	    nla_put(msg, NL80211_ATTR_IE, params->wpa_ie_len, params->wpa_ie))
 		return -1;
 
+	if (is_6ghz) {
+		if (params->wpa_proto != NL80211_WPA_VERSION_2) {
+			wpa_printf(MSG_DEBUG,
+				   "nl80211: Only WPA3 allowed in 6GHz\n");
+			return -1;
+		} else if (params->mgmt_frame_protection !=
+			   MGMT_FRAME_PROTECTION_REQUIRED) {
+			wpa_printf(MSG_DEBUG,
+				   "nl80211: Management frame protection is required in 6GHz\n");
+			return -1;
+		}
+	}
+
 	if (params->wpa_proto) {
 		enum nl80211_wpa_versions ver = 0;
 
@@ -6101,6 +6191,13 @@ static int nl80211_connect_common(struct
 	if (params->pairwise_suite != WPA_CIPHER_NONE) {
 		u32 cipher = wpa_cipher_to_cipher_suite(params->pairwise_suite);
 		wpa_printf(MSG_DEBUG, "  * pairwise=0x%x", cipher);
+
+		if (is_6ghz &&
+		    !wpa_driver_6g_crypto_validity(1, &cipher,
+						   NL80211_ATTR_CIPHER_SUITES_PAIRWISE,
+						   params->sae_pwe))
+			return -1;
+
 		if (nla_put_u32(msg, NL80211_ATTR_CIPHER_SUITES_PAIRWISE,
 				cipher))
 			return -1;
@@ -6113,10 +6210,17 @@ static int nl80211_connect_common(struct
 		 * advertise support for operations without GTK.
 		 */
 		wpa_printf(MSG_DEBUG, "  * skip group cipher configuration for GTK_NOT_USED due to missing driver support advertisement");
-	} else if (params->group_suite != WPA_CIPHER_NONE) {
+	} else {
 		u32 cipher = wpa_cipher_to_cipher_suite(params->group_suite);
 		wpa_printf(MSG_DEBUG, "  * group=0x%x", cipher);
-		if (nla_put_u32(msg, NL80211_ATTR_CIPHER_SUITE_GROUP, cipher))
+
+		if (is_6ghz &&
+		    !wpa_driver_6g_crypto_validity(1, &cipher,
+						   NL80211_ATTR_CIPHER_SUITE_GROUP,
+						   params->sae_pwe))
+			return -1;
+		if (params->group_suite != WPA_CIPHER_NONE &&
+		    nla_put_u32(msg, NL80211_ATTR_CIPHER_SUITE_GROUP, cipher))
 			return -1;
 	}
 
@@ -6202,6 +6306,13 @@ static int nl80211_connect_common(struct
 			break;
 		}
 		wpa_printf(MSG_DEBUG, "  * akm=0x%x", mgmt);
+
+		if (is_6ghz &&
+		    !wpa_driver_6g_crypto_validity(1, &mgmt,
+						   NL80211_ATTR_AKM_SUITES,
+						   params->sae_pwe))
+			return -1;
+
 		if (nla_put_u32(msg, NL80211_ATTR_AKM_SUITES, mgmt))
 			return -1;
 	}
--- a/wpa_supplicant/ap.c
+++ b/wpa_supplicant/ap.c
@@ -810,6 +810,7 @@ int wpa_supplicant_create_ap(struct wpa_
 	}
 	params.pairwise_suite = wpa_s->pairwise_cipher;
 	params.group_suite = params.pairwise_suite;
+	params.sae_pwe = wpa_s->conf->sae_pwe;
 
 #ifdef CONFIG_P2P
 	if (ssid->mode == WPAS_MODE_P2P_GO ||
