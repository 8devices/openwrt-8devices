From 3a85b0c1a23fcf4dde9285c1b39b91ba0fb99048 Mon Sep 17 00:00:00 2001
From: Aloka Dixit <alokad@codeaurora.org>
Date: Mon, 16 Nov 2020 19:16:22 -0800
Subject: [PATCH] hostapd: FILS discovery and unsolicited bcast probe response
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Both features are used in 6GHz for in-band discovery.

Additions for FILS Discovery support:
(1) IEEE Std 802.11ai-2016 9.6.8.36 FILS discovery frame elements
	(Figures 9-687b, 9-687c) and 6GHz specific definitions
	from IEEE P802.11ax/D6.0, Table 9-386â€”PHY Index subfield
	and 26.17.2.3.2, AP behavior for fast passive scanning.
(2) Configuration options for FILS discovery transmission,
	fils_discovery_min_interval - Default 20 TUs
	fils_discovery_max_interval - Default 0 (disabled)
(3) Nested attribute, NL80211_ATTR_FILS_DISCOVERY which uses
	struct nl80211_fils_discovery_attributes.
(4) Netlink command NL80211_CMD_SET_FILS_DISCOVERY to configure
	the transmission.

Additions for unsolicited broadcast probe response support:
(1) Configuration option to set packet interval,
	unsol_bcast_probe_resp_interval - Default 0 (disabled).
(2) Nested attribute, NL80211_ATTR_UNSOL_BCAST_PROBE_RESP which uses
	struct nl80211_unsol_bcast_probe_resp_attributes
(3) Netlink command NL80211_CMD_SET_UNSOL_BCAST_PROBE_RESP to
	configure the transmission.

Signed-off-by: Aloka Dixit <alokad@codeaurora.org>
---
 hostapd/config_file.c        |   8 +
 hostapd/hostapd.conf         |  11 ++
 src/ap/ap_config.c           |  10 ++
 src/ap/ap_config.h           |   4 +
 src/ap/beacon.c              | 296 +++++++++++++++++++++++++++++++++++
 src/common/ieee802_11_defs.h |  36 +++++
 src/drivers/driver.h         |  35 +++++
 src/drivers/driver_nl80211.c | 113 ++++++++++++-
 src/drivers/nl80211_copy.h   |  91 ++++++++++-
 9 files changed, 602 insertions(+), 2 deletions(-)

diff --git a/hostapd/config_file.c b/hostapd/config_file.c
index 056a14e9503c..9552fbe6bd50 100644
--- a/hostapd/config_file.c
+++ b/hostapd/config_file.c
@@ -3561,6 +3561,10 @@ static int hostapd_config_fill(struct hostapd_config *conf,
 		conf->he_oper_centr_freq_seg0_idx = atoi(pos);
 	} else if (os_strcmp(buf, "he_oper_centr_freq_seg1_idx") == 0) {
 		conf->he_oper_centr_freq_seg1_idx = atoi(pos);
+	} else if (os_strcmp(buf,
+			     "unsol_bcast_probe_resp_interval") == 0) {
+		bss->unsol_bcast_probe_resp_interval =
+			(atoi(pos) > 20) ? 20 : atoi(pos);
 #endif /* CONFIG_IEEE80211AX */
 	} else if (os_strcmp(buf, "max_listen_interval") == 0) {
 		bss->max_listen_interval = atoi(pos);
@@ -4371,6 +4375,10 @@ static int hostapd_config_fill(struct hostapd_config *conf,
 		bss->dhcp_server_port = atoi(pos);
 	} else if (os_strcmp(buf, "dhcp_relay_port") == 0) {
 		bss->dhcp_relay_port = atoi(pos);
+	} else if (os_strcmp(buf, "fils_discovery_min_interval") == 0) {
+		bss->fils_discovery_min_int = atoi(pos);
+	} else if (os_strcmp(buf, "fils_discovery_max_interval") == 0) {
+		bss->fils_discovery_max_int = atoi(pos);
 #endif /* CONFIG_FILS */
 	} else if (os_strcmp(buf, "multicast_to_unicast") == 0) {
 		bss->multicast_to_unicast = atoi(pos);
diff --git a/hostapd/hostapd.conf b/hostapd/hostapd.conf
index c160d736c72f..4c00ad95683e 100644
--- a/hostapd/hostapd.conf
+++ b/hostapd/hostapd.conf
@@ -873,6 +873,12 @@ wmm_ac_vo_acm=0
 #he_spr_srg_obss_pd_min_offset
 #he_spr_srg_obss_pd_max_offset
 
+# Unsolicited broadcast probe response transmission settings, 6GHz only.
+# If interval is set to non-zero, the AP schedules unsolicited
+# broadcast probe response frames for in-band discovery. Refer to
+# IEEE P802.11ax/D6.0 26.17.2.3.2, AP behavior for fast passive scanning.
+#unsol_bcast_probe_resp_interval=0(default) to 20 TUs.
+
 ##### IEEE 802.1X-2004 related configuration ##################################
 
 # Require IEEE 802.1X authorization
@@ -1927,6 +1933,11 @@ own_ip_addr=127.0.0.1
 # default: 30 TUs (= 30.72 milliseconds)
 #fils_hlp_wait_time=30
 
+# FILS discovery transmission minimum and maximum packet interval settings.
+# If maximum interval is non-zero, the AP schedules FILS discovery transmission
+#fils_discovery_max_interval=0 to 10000 (in TUs).
+#fils_discovery_min_interval=0 to 10000 (in TUs).
+
 # Transition Disable indication
 # The AP can notify authenticated stations to disable transition mode in their
 # network profiles when the network has completed transition steps, i.e., once
diff --git a/src/ap/ap_config.c b/src/ap/ap_config.c
index 61136c450761..ebea19b8f9fc 100644
--- a/src/ap/ap_config.c
+++ b/src/ap/ap_config.c
@@ -131,6 +131,7 @@ void hostapd_config_defaults_bss(struct hostapd_bss_config *bss)
 	bss->fils_hlp_wait_time = 30;
 	bss->dhcp_server_port = DHCP_SERVER_PORT;
 	bss->dhcp_relay_port = DHCP_SERVER_PORT;
+	bss->fils_discovery_min_int = 20;
 #endif /* CONFIG_FILS */
 
 	bss->broadcast_deauth = 1;
@@ -1344,6 +1345,15 @@ static int hostapd_config_check_bss(struct hostapd_bss_config *bss,
 	}
 #endif /* CONFIG_SAE_PK */
 
+#ifdef CONFIG_FILS
+	if (bss->fils_discovery_max_int &&
+	    bss->unsol_bcast_probe_resp_interval) {
+		wpa_printf(MSG_ERROR,
+			   "Cannot enable both FILS discovery and unsolicited broadcast probe response at the same time");
+		return -1;
+	}
+#endif /* CONFIG_FILS */
+
 	return 0;
 }
 
diff --git a/src/ap/ap_config.h b/src/ap/ap_config.h
index 4e1c58629d87..f32e9151708e 100644
--- a/src/ap/ap_config.h
+++ b/src/ap/ap_config.h
@@ -734,6 +734,8 @@ struct hostapd_bss_config {
 	unsigned int fils_hlp_wait_time;
 	u16 dhcp_server_port;
 	u16 dhcp_relay_port;
+	u32 fils_discovery_min_int;
+	u32 fils_discovery_max_int;
 #endif /* CONFIG_FILS */
 
 	int multicast_to_unicast;
@@ -866,6 +868,8 @@ struct hostapd_bss_config {
 	 */
 	u8 mka_psk_set;
 #endif /* CONFIG_MACSEC */
+
+	u32 unsol_bcast_probe_resp_interval;
 };
 
 /**
diff --git a/src/ap/beacon.c b/src/ap/beacon.c
index 11a547fb1637..e8dbba507b7d 100644
--- a/src/ap/beacon.c
+++ b/src/ap/beacon.c
@@ -1127,6 +1127,25 @@ static u8 * hostapd_probe_resp_offloads(struct hostapd_data *hapd,
 
 #endif /* NEED_AP_MLME */
 
+#ifdef CONFIG_IEEE80211AX
+/* Unsolicited broadcast probe response transmission, 6GHz only */
+static u8 *hostapd_unsol_bcast_probe_resp(struct hostapd_data *hapd,
+					  struct wpa_driver_ap_params *params)
+{
+	if (!is_6ghz_op_class(hapd->iconf->op_class))
+		return NULL;
+
+	if (hapd->iconf->multiple_bssid &&
+	    hapd != hostapd_get_primary_bss(hapd))
+		return NULL;
+
+	params->unsol_bcast_probe_resp_interval =
+				hapd->conf->unsol_bcast_probe_resp_interval;
+
+	return hostapd_gen_probe_resp(hapd, NULL, 0,
+				      &params->unsol_bcast_probe_resp_tmpl_len);
+}
+#endif /* CONFIG_IEEE80211AX */
 
 void sta_track_del(struct hostapd_sta_info *info)
 {
@@ -1138,6 +1157,269 @@ void sta_track_del(struct hostapd_sta_info *info)
 }
 
 
+#ifdef CONFIG_FILS
+static u8 hostapd_fils_discovery_rsn(struct hostapd_data *hapd, u16 *cap,
+				     u32 *suite_selector_ptr)
+{
+	const u8 *ie, *start;
+	u8 len;
+	u16 cnt;
+	u32 suite_selector = 0;
+
+	ie = hostapd_wpa_ie(hapd, WLAN_EID_RSN);
+	if (!ie || ie[1] < 6)
+		return 0;
+
+	len = ie[1];
+	start = &ie[2];
+	ie += 4;
+	do {
+		/*  Group Data Cipher Suite Selector */
+		suite_selector = ie[3];
+		ie += 4;
+
+		/*  Pairwise Cipher Suite Selector */
+		if ((ie - start) >= len)
+			break;
+		os_memcpy((u8 *) &cnt, ie, 2);
+		ie += 2;
+		if (cnt) {
+			suite_selector |= (((u32) ie[3]) << 12);
+			ie += (4 * cnt);
+		}
+
+		/*  AKM Cipher Suite Selector */
+		if ((ie - start) >= len)
+			break;
+		os_memcpy((u8 *) &cnt, ie, 2);
+		ie += 2;
+		if (cnt) {
+			suite_selector |= (((u32) ie[3]) << 18);
+			ie += (4 * cnt);
+		}
+
+		/* RSN capabilities */
+		if ((ie - start) >= len)
+			break;
+		os_memcpy((u8 *) cap, ie, 2);
+		ie += 2;
+
+		/*  Group Management Cipher Suite Selector */
+		if ((ie - start) < len)
+			suite_selector |= (((u32) ie[3]) << 6);
+	} while (0);
+
+	*suite_selector_ptr = suite_selector;
+	return 1;
+}
+
+
+u16 hostapd_fils_discovery_cap(struct hostapd_data *hapd)
+{
+	u16 cap_info = 0, nss_mask = 0x0003, rx_mcs, tx_mcs;
+	u8 nss = 0, chwidth = 0, *mcs = NULL;
+	int i;
+
+	cap_info = FILS_DISCOVERY_CAP_ESS |
+		   (hapd->conf->wpa ? FILS_DISCOVERY_CAP_PRIVACY : 0) |
+		   (hapd->iconf->multiple_bssid ?
+		    FILS_DISCOVERY_CAP_MULTIPLE_BSSID_PRESENT : 0);
+
+	if (is_6ghz_op_class(hapd->iconf->op_class)) {
+		cap_info |= (FILS_DISCOVERY_CAP_PHY_INDEX_HE <<
+			     FILS_DISCOVERY_CAP_PHY_INDEX_SHIFT);
+
+		switch (hapd->iconf->op_class) {
+		case 132:
+			chwidth = FILS_DISCOVERY_CAP_BSS_CHWIDTH_40;
+			break;
+		case 133:
+			chwidth = FILS_DISCOVERY_CAP_BSS_CHWIDTH_80;
+			break;
+		case 134:
+		case 135:
+			chwidth = FILS_DISCOVERY_CAP_BSS_CHWIDTH_160_8080;
+			break;
+		}
+	} else {
+		switch (hostapd_get_oper_chwidth(hapd->iconf)) {
+		case CHANWIDTH_80P80MHZ:
+		case CHANWIDTH_160MHZ:
+			chwidth = FILS_DISCOVERY_CAP_BSS_CHWIDTH_160_8080;
+			break;
+		case CHANWIDTH_80MHZ:
+			chwidth = FILS_DISCOVERY_CAP_BSS_CHWIDTH_80;
+			break;
+		case CHANWIDTH_USE_HT:
+			if (hapd->iconf->secondary_channel)
+				chwidth = FILS_DISCOVERY_CAP_BSS_CHWIDTH_40;
+			break;
+		}
+
+		if (hapd->iconf->ieee80211ax) {
+#ifdef CONFIG_IEEE80211AX
+			cap_info |= (FILS_DISCOVERY_CAP_PHY_INDEX_HE <<
+				     FILS_DISCOVERY_CAP_PHY_INDEX_SHIFT);
+#endif /* CONFIG_IEEE80211AX */
+		}
+	}
+
+	cap_info |= (chwidth << FILS_DISCOVERY_CAP_BSS_CHWIDTH_SHIFT);
+
+	/* Current FILS discovery support is limited to HE */
+	if (hapd->iface->current_mode) {
+		mcs = hapd->iface->current_mode->he_capab[IEEE80211_MODE_AP].mcs;
+		os_memcpy(&rx_mcs, &mcs[0], 2);
+		os_memcpy(&tx_mcs, &mcs[2], 2);
+		for (i = 0; i < HE_NSS_MAX_STREAMS; i++) {
+			if (((rx_mcs & nss_mask) != nss_mask) &&
+			    ((tx_mcs & nss_mask) != nss_mask))
+				nss++;
+
+			rx_mcs >>= 2;
+			tx_mcs >>= 2;
+		}
+		if (nss > 4)
+			cap_info |= (4 << FILS_DISCOVERY_CAP_NSS_SHIFT);
+		else if (nss)
+			cap_info |= ((nss - 1) << FILS_DISCOVERY_CAP_NSS_SHIFT);
+	}
+	return cap_info;
+}
+
+
+static u8 * hostapd_gen_fils_discovery(struct hostapd_data *hapd, u32 *len)
+{
+	struct ieee80211_mgmt *head;
+	const u8 *mobility_domain;
+	u8 *pos, *length_pos, rsn = 0, buf[200], buf_len;
+	u16 frm_cntl = 0, rsn_cap = 0;
+	u32 suite_selectors = 0, total_len;
+
+#define FILS_DISOVERY_TMPL_HEAD_LEN 26
+#define FILS_DISOVERY_TMPL_MIN_LEN 19
+
+	total_len = FILS_DISOVERY_TMPL_HEAD_LEN + FILS_DISOVERY_TMPL_MIN_LEN;
+
+	/* FILS discovery frame control: 2 bytes */
+	frm_cntl = (sizeof(hapd->conf->ssid.short_ssid) - 1) |
+		   FILS_DISCOVERY_FRM_CNTL_CAP_PRESENT |
+		   FILS_DISCOVERY_FRM_CNTL_SHORT_SSID_PRESENT |
+		   FILS_DISCOVERY_FRM_CNTL_LENGTH_PRESENT;
+
+	/* Check for optional subfields and calculate length */
+	rsn = hostapd_fils_discovery_rsn(hapd, &rsn_cap, &suite_selectors);
+	if (rsn) {
+		frm_cntl |= FILS_DISCOVERY_FRM_CNTL_RSN_INFO_PRESENT;
+		total_len += 5;
+	}
+
+	mobility_domain = hostapd_wpa_ie(hapd, WLAN_EID_MOBILITY_DOMAIN);
+	if (mobility_domain) {
+		frm_cntl |= FILS_DISCOVERY_FRM_CNTL_MOBILITY_DOMAIN_PRESENT;
+		total_len += 3;
+	}
+
+	total_len += hostapd_eid_reduced_neighbor_report_len(hapd);
+
+	pos = hostapd_eid_fils_indic(hapd, buf, 0);
+	buf_len = pos - buf;
+	total_len += buf_len;
+
+	head = os_zalloc(total_len);
+	if (!head)
+		return NULL;
+
+	head->frame_control = IEEE80211_FC(WLAN_FC_TYPE_MGMT,
+					   WLAN_FC_STYPE_ACTION);
+	os_memset(head->da, 0xff, ETH_ALEN);
+	os_memcpy(head->sa, hapd->own_addr, ETH_ALEN);
+	os_memcpy(head->bssid, hapd->own_addr, ETH_ALEN);
+
+	head->u.action.category = WLAN_ACTION_PUBLIC;
+	head->u.action.u.public_action.action = WLAN_PA_FILS_DISCOVERY;
+
+	pos = &head->u.action.u.public_action.variable[0];
+	*((u16 *) pos) = host_to_le16(frm_cntl);
+	pos += 2;
+
+	/* hardware or low-level driver will setup timestamp */
+	pos += 8;
+
+	/* Beacon interval */
+	*((u16 *) pos) = host_to_le16(hapd->iconf->beacon_int);
+	pos += 2;
+
+	/* Short SSID */
+	*((u32 *) pos) = host_to_le32(hapd->conf->ssid.short_ssid);
+	pos += sizeof(hapd->conf->ssid.short_ssid);
+
+	/* Store position of FILS discovery information element length field */
+	length_pos = pos++;
+
+	/* FD Capability : total 2 bytes */
+	*((u16 *) pos) = host_to_le16(hostapd_fils_discovery_cap(hapd));
+	pos += 2;
+
+	/* RSN */
+	if (frm_cntl & FILS_DISCOVERY_FRM_CNTL_RSN_INFO_PRESENT) {
+		os_memcpy(pos, &rsn_cap, 2);
+		os_memcpy(&pos[2], &suite_selectors, 3);
+		pos += 5;
+	}
+
+	/* Mobility Domain */
+	if (frm_cntl & FILS_DISCOVERY_FRM_CNTL_MOBILITY_DOMAIN_PRESENT) {
+		os_memcpy(pos, &mobility_domain[2], 3);
+		pos += 3;
+	}
+
+	/* Fill the FILS discovery information element length */
+	*length_pos = pos - (length_pos + 1);
+
+	/* Reduced Neighbor Report element */
+	pos = hostapd_eid_reduced_neighbor_report(hapd, pos);
+
+	/* FILS indication element */
+	if (buf_len) {
+		os_memcpy(pos, buf, buf_len);
+		pos += buf_len;
+	}
+
+	*len = pos - (u8 *) head;
+	return ((u8 *) head);
+}
+
+
+/* Configure FILS discovery transmission */
+static u8 * hostapd_fils_discovery(struct hostapd_data *hapd,
+				  struct wpa_driver_ap_params *params)
+{
+	if (hapd->iconf->multiple_bssid &&
+	    hapd != hostapd_get_primary_bss(hapd))
+		return NULL;
+
+#define VALID_INTERVAL(x,y) { x = (x > y) ? y : x; }
+
+	params->fils_discovery_max_int = hapd->conf->fils_discovery_max_int;
+	if (is_6ghz_op_class(hapd->iconf->op_class))
+		VALID_INTERVAL(params->fils_discovery_max_int,
+			       FILS_DISCOVERY_MAX_INTERVAL_6GHZ);
+
+	params->fils_discovery_min_int = hapd->conf->fils_discovery_min_int;
+	VALID_INTERVAL(params->fils_discovery_min_int,
+		       params->fils_discovery_max_int);
+#undef VALID_INTERVAL
+
+	if (params->fils_discovery_max_int)
+		return hostapd_gen_fils_discovery(hapd,
+						  (u32 *)&params->fils_discovery_tmpl_len);
+
+	return NULL;
+}
+#endif /* CONFIG_FILS */
+
+
 int ieee802_11_build_ap_params(struct hostapd_data *hapd,
 			       struct wpa_driver_ap_params *params)
 {
@@ -1475,6 +1757,14 @@ void ieee802_11_free_ap_params(struct wpa_driver_ap_params *params)
 	params->head = NULL;
 	os_free(params->proberesp);
 	params->proberesp = NULL;
+#ifdef CONFIG_FILS
+	os_free(params->fils_discovery_tmpl);
+	params->fils_discovery_tmpl = NULL;
+#endif /* CONFIG_FILS */
+#ifdef CONFIG_IEEE80211AX
+	os_free(params->unsol_bcast_probe_resp_tmpl);
+	params->unsol_bcast_probe_resp_tmpl = NULL;
+#endif /* CONFIG_IEEE80211AX */
 }
 
 
@@ -1519,9 +1809,15 @@ int ieee802_11_set_beacon(struct hostapd_data *hapd)
 	params.he_bss_color = hapd->iface->conf->he_op.he_bss_color;
 	params.twt_responder = hostapd_get_he_twt_responder(hapd,
 							    IEEE80211_MODE_AP);
+	params.unsol_bcast_probe_resp_tmpl =
+				hostapd_unsol_bcast_probe_resp(hapd, &params);
 #endif /* CONFIG_IEEE80211AX */
 	hapd->reenable_beacon = 0;
 
+#ifdef CONFIG_FILS
+	params.fils_discovery_tmpl = hostapd_fils_discovery(hapd, &params);
+#endif /* CONFIG_FILS */
+
 	if (cmode &&
 	    hostapd_set_freq_params(&freq, iconf->hw_mode, iface->freq,
 				    iconf->channel, iconf->enable_edmg,
diff --git a/src/common/ieee802_11_defs.h b/src/common/ieee802_11_defs.h
index 5e98d39a2bf1..6e6f74d60a39 100644
--- a/src/common/ieee802_11_defs.h
+++ b/src/common/ieee802_11_defs.h
@@ -2374,4 +2374,40 @@ enum mscs_description_subelem {
 	MCSC_SUBELEM_STATUS = 1,
 };
 
+/**
+ * IEEE Std 802.11ai-2016 9.6.8.36 FILS Discovery frame format,
+ * Figure 9-687b - FILS Discovery Frame Control subfield format
+ */
+#define FILS_DISCOVERY_FRM_CNTL_CAP_PRESENT               ((u16)BIT(5))
+#define FILS_DISCOVERY_FRM_CNTL_SHORT_SSID_PRESENT        ((u16)BIT(6))
+#define FILS_DISCOVERY_FRM_CNTL_AP_CSN_PRESENT            ((u16)BIT(7))
+#define FILS_DISCOVERY_FRM_CNTL_ANO_PRESENT               ((u16)BIT(8))
+#define FILS_DISCOVERY_FRM_CNTL_FREQ_SEG1_PRESENT         ((u16)BIT(9))
+#define FILS_DISCOVERY_FRM_CNTL_PRI_CHAN_PRESENT          ((u16)BIT(10))
+#define FILS_DISCOVERY_FRM_CNTL_RSN_INFO_PRESENT          ((u16)BIT(11))
+#define FILS_DISCOVERY_FRM_CNTL_LENGTH_PRESENT            ((u16)BIT(12))
+#define FILS_DISCOVERY_FRM_CNTL_MOBILITY_DOMAIN_PRESENT   ((u16)BIT(13))
+
+/**
+ * IEEE Std 802.11ai-2016 9.6.8.36 FILS Discovery frame format,
+ * Figure 9-687c - FD Capability subfield format
+ */
+#define FILS_DISCOVERY_CAP_ESS                            BIT(0)
+#define FILS_DISCOVERY_CAP_PRIVACY                        BIT(1)
+#define FILS_DISCOVERY_CAP_MULTIPLE_BSSID_PRESENT         BIT(9)
+#define FILS_DISCOVERY_CAP_BSS_CHWIDTH_20                 0
+#define FILS_DISCOVERY_CAP_BSS_CHWIDTH_40                 1
+#define FILS_DISCOVERY_CAP_BSS_CHWIDTH_80                 2
+#define FILS_DISCOVERY_CAP_BSS_CHWIDTH_160_8080           3
+#define FILS_DISCOVERY_CAP_BSS_CHWIDTH_SHIFT              2
+#define FILS_DISCOVERY_CAP_NSS_SHIFT                      5
+#define FILS_DISCOVERY_CAP_PHY_INDEX_SHIFT                10
+#define FILS_DISCOVERY_CAP_PHY_INDEX_HT                   2
+#define FILS_DISCOVERY_CAP_PHY_INDEX_VHT                  3
+
+/**
+ * IEEE P802.11ax/D6.0 26.17.2.3.2, AP behavior for fast passive scanning
+ */
+#define FILS_DISCOVERY_CAP_PHY_INDEX_HE                   4
+#define FILS_DISCOVERY_MAX_INTERVAL_6GHZ                  20
 #endif /* IEEE802_11_DEFS_H */
diff --git a/src/drivers/driver.h b/src/drivers/driver.h
index 444b2fe64c8c..7c63e8879187 100644
--- a/src/drivers/driver.h
+++ b/src/drivers/driver.h
@@ -1520,6 +1520,41 @@ struct wpa_driver_ap_params {
 	 * twt_responder - Whether Target Wait Time responder is enabled
 	 */
 	int twt_responder;
+
+	/**
+	 * FILS discovery minimum interval
+	 */
+	u32 fils_discovery_min_int;
+
+	/**
+	 * FILS discovery maximum interval
+	 */
+	u32 fils_discovery_max_int;
+
+	/**
+	 * FILS discovery template data
+	 */
+	u8 *fils_discovery_tmpl;
+
+	/**
+	 * FILS discovery template length
+	 */
+	size_t fils_discovery_tmpl_len;
+
+	/**
+	 * Unsolicited broadcast probe response interval
+	 */
+	u32 unsol_bcast_probe_resp_interval;
+
+	/**
+	 * Unsolicited broadcast probe response template data
+	 */
+	u8 *unsol_bcast_probe_resp_tmpl;
+
+	/**
+	 * Unsolicited broadcast probe response template length
+	 */
+	size_t unsol_bcast_probe_resp_tmpl_len;
 };
 
 struct wpa_driver_mesh_bss_params {
diff --git a/src/drivers/driver_nl80211.c b/src/drivers/driver_nl80211.c
index 599e6bcbc322..93213d29b018 100644
--- a/src/drivers/driver_nl80211.c
+++ b/src/drivers/driver_nl80211.c
@@ -4258,7 +4258,6 @@ static int nl80211_put_beacon_rate(struct nl_msg *msg, const u64 flags,
 	return 0;
 }
 
-
 static int nl80211_set_multicast_to_unicast(struct i802_bss *bss,
 					    int multicast_to_unicast)
 {
@@ -4305,6 +4304,110 @@ static int nl80211_set_multicast_to_unicast(struct i802_bss *bss,
 }
 
 
+#ifdef CONFIG_FILS
+static int nl80211_fils_discovery(struct i802_bss *bss,
+				  struct wpa_driver_ap_params *params)
+{
+	struct nlattr *attr;
+	struct wpa_driver_nl80211_data *drv = bss->drv;
+	struct nl_msg *msg;
+
+	if (!params->fils_discovery_max_int)
+		return 0;
+
+	wpa_printf(MSG_DEBUG,
+		   "nl80211: FILS discovery maximum interval=%u, minimum interval=%u",
+		   params->fils_discovery_max_int,
+		   params->fils_discovery_min_int);
+
+	msg = nl80211_bss_msg(bss, 0, NL80211_CMD_SET_FILS_DISCOVERY);
+	if (!msg)
+		return -ENOBUFS;
+
+	attr = nla_nest_start(msg, NL80211_ATTR_FILS_DISCOVERY);
+	if (!attr)
+		goto error;
+
+	if (nla_put_u32(msg, NL80211_FILS_DISCOVERY_INT_MIN,
+			params->fils_discovery_min_int) ||
+	    nla_put_u32(msg, NL80211_FILS_DISCOVERY_INT_MAX,
+			params->fils_discovery_max_int)) {
+		wpa_printf(MSG_ERROR,
+			   "nl80211: Failed to build FILS discovery msg for %s\n",
+			   bss->ifname);
+		goto error;
+	}
+
+	if (params->fils_discovery_tmpl &&
+	    nla_put(msg, NL80211_FILS_DISCOVERY_TMPL,
+		    params->fils_discovery_tmpl_len,
+		    params->fils_discovery_tmpl)) {
+		wpa_printf(MSG_ERROR,
+			   "nl80211: Failed to build FILS discovery msg for %s\n",
+			   bss->ifname);
+		goto error;
+	}
+
+	nla_nest_end(msg, attr);
+
+	return send_and_recv_msgs(drv, msg, NULL, NULL, NULL, NULL);
+
+error:
+	nlmsg_free(msg);
+	return -1;
+}
+#endif /* CONFIG_FILS */
+
+#ifdef CONFIG_IEEE80211AX
+static int nl80211_unsol_bcast_probe_resp(struct i802_bss *bss,
+					  struct wpa_driver_ap_params *params)
+{
+	struct nlattr *attr;
+	struct wpa_driver_nl80211_data *drv = bss->drv;
+	struct nl_msg *msg;
+
+	if (!params->unsol_bcast_probe_resp_interval)
+		return 0;
+
+	wpa_printf(MSG_DEBUG,
+		   "nl80211: Unsolicited broadcast probe response interval=%u",
+		   params->unsol_bcast_probe_resp_interval);
+
+	msg = nl80211_bss_msg(bss, 0, NL80211_CMD_SET_UNSOL_BCAST_PROBE_RESP);
+	if (!msg)
+		return -ENOBUFS;
+
+	attr = nla_nest_start(msg, NL80211_ATTR_UNSOL_BCAST_PROBE_RESP);
+	if (!attr)
+		goto error;
+
+	if (nla_put_u32(msg, NL80211_UNSOL_BCAST_PROBE_RESP_INT,
+			params->unsol_bcast_probe_resp_interval)) {
+		wpa_printf(MSG_ERROR,
+			   "nl80211: Failed to build unsolicited broadcast probe response msg for %s\n",
+			   bss->ifname);
+		goto error;
+	}
+
+	if (params->unsol_bcast_probe_resp_tmpl &&
+	    nla_put(msg, NL80211_UNSOL_BCAST_PROBE_RESP_TMPL,
+		    params->unsol_bcast_probe_resp_tmpl_len,
+		    params->unsol_bcast_probe_resp_tmpl)) {
+		wpa_printf(MSG_ERROR,
+			   "nl80211: Failed to build unsolicited broadcast probe response msg for %s\n",
+			   bss->ifname);
+		goto error;
+	}
+
+	nla_nest_end(msg, attr);
+	return send_and_recv_msgs(drv, msg, NULL, NULL, NULL, NULL);
+
+error:
+	nlmsg_free(msg);
+	return -1;
+}
+#endif /* CONFIG_IEEE80211AX */
+
 static int wpa_driver_nl80211_set_ap(void *priv,
 				     struct wpa_driver_ap_params *params)
 {
@@ -4563,6 +4666,7 @@ static int wpa_driver_nl80211_set_ap(void *priv,
 		if (nla_put_flag(msg, NL80211_ATTR_TWT_RESPONDER))
 			goto fail;
 	}
+
 #endif /* CONFIG_IEEE80211AX */
 
 	ret = send_and_recv_msgs_owner(drv, msg, get_connect_handle(bss), 1,
@@ -4577,6 +4681,13 @@ static int wpa_driver_nl80211_set_ap(void *priv,
 				params->isolate, params->basic_rates);
 		nl80211_set_multicast_to_unicast(bss,
 						 params->multicast_to_unicast);
+#ifdef CONFIG_FILS
+		nl80211_fils_discovery(bss, params);
+#endif /* CONFIG_FILS */
+#ifdef CONFIG_IEEE80211AX
+		nl80211_unsol_bcast_probe_resp(bss, params);
+#endif /* CONFIG_IEEE80211AX */
+
 		if (beacon_set && params->freq &&
 		    params->freq->bandwidth != bss->bandwidth) {
 			wpa_printf(MSG_DEBUG,
diff --git a/src/drivers/nl80211_copy.h b/src/drivers/nl80211_copy.h
index 0ea69d7382f0..62a0e2ae5ea0 100644
--- a/src/drivers/nl80211_copy.h
+++ b/src/drivers/nl80211_copy.h
@@ -1175,6 +1175,12 @@
  *	were indicated by driver and now need to be reflected in
  *	Beacon frame.
  *
+ * @NL80211_CMD_SET_FILS_DISCOVERY: Command to set FILS discovery transmission
+ *	parameters.
+ *
+ * @NL80211_CMD_SET_UNSOL_BCAST_PROBE_RESP: Command to set unsolicited
+ *	broadcast probe response transmission parameters.
+ *
  * @NL80211_CMD_MAX: highest used command number
  * @__NL80211_CMD_AFTER_LAST: internal use
  */
@@ -1406,6 +1412,10 @@ enum nl80211_commands {
 	NL80211_CMD_CONTROL_PORT_FRAME_TX_STATUS,
 
 	NL80211_CMD_UPDATE_HE_MUEDCA_PARAMS,
+
+	NL80211_CMD_SET_FILS_DISCOVERY,
+	NL80211_CMD_SET_UNSOL_BCAST_PROBE_RESP,
+
 	/* add new commands above here */
 
 	/* used to define NL80211_CMD_MAX below */
@@ -2511,8 +2521,22 @@ enum nl80211_commands {
  * @NL80211_ATTR_HE_6GHZ_CAPABILITY: HE 6 GHz Band Capability element (from
  *	association request when used with NL80211_CMD_NEW_STATION).
  *
+ * @NL80211_ATTR_FILS_DISCOVERY: Optional parameter to configure FILS
+ *	discovery. It is a nested attribute, see
+ *	&enum nl80211_fils_discovery_attributes.
+ *
+ * @NL80211_ATTR_UNSOL_BCAST_PROBE_RESP: Optional parameter to configure
+ *	unsolicited broadcast probe response. It is a nested attribute, see
+ *	&enum nl80211_unsol_bcast_probe_resp_attributes.
+ *
+ * @NL80211_ATTR_S1G_CAPABILITY: S1G Capability information element (from
+ *	association request when used with NL80211_CMD_NEW_STATION)
+ * @NL80211_ATTR_S1G_CAPABILITY_MASK: S1G Capability Information element
+ *	override mask. Used with NL80211_ATTR_S1G_CAPABILITY in
+ *	NL80211_CMD_ASSOCIATE or NL80211_CMD_CONNECT.
+ *
  * @NL80211_ATTR_HE_MUEDCA_PARAMS: MU-EDCA AC parameters for the
-	NL80211_CMD_UPDATE_HE_MUEDCA_PARAMS command.
+ *	NL80211_CMD_UPDATE_HE_MUEDCA_PARAMS command.
  *
  * @NUM_NL80211_ATTR: total number of nl80211_attrs available
  * @NL80211_ATTR_MAX: highest attribute number currently defined
@@ -2996,7 +3020,15 @@ enum nl80211_attrs {
 
 	NL80211_ATTR_HE_6GHZ_CAPABILITY,
 
+	NL80211_ATTR_FILS_DISCOVERY,
+
+	NL80211_ATTR_UNSOL_BCAST_PROBE_RESP,
+
+	NL80211_ATTR_S1G_CAPABILITY,
+	NL80211_ATTR_S1G_CAPABILITY_MASK,
+
 	NL80211_ATTR_HE_MUEDCA_PARAMS,
+
 	/* add attributes here, update the policy in nl80211.c */
 
 	__NL80211_ATTR_AFTER_LAST,
@@ -6936,4 +6968,61 @@ enum nl80211_iftype_akm_attributes {
 	NL80211_IFTYPE_AKM_ATTR_MAX = __NL80211_IFTYPE_AKM_ATTR_LAST - 1,
 };
 
+/**
+ * enum nl80211_fils_discovery_attributes - FILS discovery configuration
+ * from IEEE Std 802.11ai-2016, Annex C.3 MIB detail.
+ *
+ * @__NL80211_FILS_DISCOVERY_INVALID: Invalid
+ *
+ * @NL80211_FILS_DISCOVERY_INT_MIN: Minimum packet interval (u32, TU).
+ *	Allowed range: 0..10000 (TU = Time Unit)
+ * @NL80211_FILS_DISCOVERY_INT_MAX: Maximum packet interval (u32, TU).
+ *	Allowed range: 0..10000 (TU = Time Unit)
+ * @NL80211_FILS_DISCOVERY_TMPL: Optional FILS discovery template.
+ *	It has contents of IEEE Std 802.11ai-2016 9.6.8.36 FILS discovery frame
+ *	(Figure 9-687a).
+ *	It may include 6GHz specific data specified in IEEE P802.11ax/D6.0,
+ *	9.6.7.36 FILS Discovery frame format.
+ *
+ * @__NL80211_FILS_DISCOVERY_LAST: Internal
+ * @NL80211_FILS_DISCOVERY_MAX: highest attribute
+ */
+enum nl80211_fils_discovery_attributes {
+	__NL80211_FILS_DISCOVERY_INVALID,
+
+	NL80211_FILS_DISCOVERY_INT_MIN,
+	NL80211_FILS_DISCOVERY_INT_MAX,
+	NL80211_FILS_DISCOVERY_TMPL,
+
+	/* keep last */
+	__NL80211_FILS_DISCOVERY_LAST,
+	NL80211_FILS_DISCOVERY_MAX = __NL80211_FILS_DISCOVERY_LAST - 1
+};
+
+/**
+ * enum nl80211_unsol_bcast_probe_resp_attributes - Unsolicited broadcast probe
+ *     response configuration. Applicable only in 6GHz.
+ *
+ * @__NL80211_UNSOL_BCAST_PROBE_RESP_INVALID: Invalid
+ *
+ * @NL80211_UNSOL_BCAST_PROBE_RESP_INT: Maximum packet interval (u32, TU).
+ *     Allowed range: 0..20 (TU = Time Unit). IEEE P802.11ax/D6.0
+ *     26.17.2.3.2 (AP behavior for fast passive scanning.
+ * @NL80211_UNSOL_BCAST_PROBE_RESP_TMPL: Unsolicited broadcast probe response
+ *     frame template (binary).
+ *
+ * @__NL80211_UNSOL_BCAST_PROBE_RESP_LAST: Internal
+ * @NL80211_UNSOL_BCAST_PROBE_RESP_MAX: highest attribute
+ */
+enum nl80211_unsol_bcast_probe_resp_attributes {
+	__NL80211_UNSOL_BCAST_PROBE_RESP_INVALID,
+
+	NL80211_UNSOL_BCAST_PROBE_RESP_INT,
+	NL80211_UNSOL_BCAST_PROBE_RESP_TMPL,
+
+	/* keep last */
+	__NL80211_UNSOL_BCAST_PROBE_RESP_LAST,
+	NL80211_UNSOL_BCAST_PROBE_RESP_MAX =
+		__NL80211_UNSOL_BCAST_PROBE_RESP_LAST - 1
+};
 #endif /* __LINUX_NL80211_H */
-- 
2.25.0

