From 4a58da0a8bcb37f5ceac80fabb64c38ec2eedd94 Mon Sep 17 00:00:00 2001
From: Aloka Dixit <quic_alokad@quicinc.com>
Date: Thu, 10 Dec 2020 15:13:11 -0800
Subject: [PATCH 14/15] hostad: RNR for EMA AP

(1) Enable RNR by default for EMA AP.
(2) Only for EMA AP, split reduced neighbor report in as many groups as
    number of multiple BSSID offset groups.
    Each RNR group skips the profiles already include in the corresponding
    MBSSID groups.
    The last additional group will have data common for all EMA beacons.
(3) Enable reduced neighbor report by default in 5GHz/2.4GHz beacons
    and probe responses if one or more 6GHz APs are co-located.

Signed-off-by: Aloka Dixit <quic_alokad@quicinc.com>
---
 src/ap/beacon.c      |  52 ++++++++++++++-------
 src/ap/ieee802_11.c  | 106 +++++++++++++++++++++++++++++++++++++------
 src/ap/ieee802_11.h  |   5 +-
 src/drivers/driver.h |  22 +++++++++
 4 files changed, 152 insertions(+), 33 deletions(-)

--- a/src/ap/beacon.c
+++ b/src/ap/beacon.c
@@ -488,7 +488,7 @@ static u8 * hostapd_set_mbssid_beacon(st
 	params->mbssid_count = iface->num_bss;
 
 	len = hostapd_eid_mbssid_len(tx_bss, WLAN_FC_STYPE_BEACON, &num_mbssid,
-				     NULL, 0);
+				     NULL, 0, &params->rnr_elem_len);
 	if (hapd->iconf->ema) {
 		if (!iface->ema_max_periodicity) {
 			wpa_printf(MSG_WARNING, "MBSSID: Driver doesn't support"
@@ -509,27 +509,30 @@ static u8 * hostapd_set_mbssid_beacon(st
 
 	params->mbssid_elem_count = num_mbssid;
 	params->mbssid_elem = os_zalloc(len);
-	if (!params->mbssid_elem) {
-		wpa_printf(MSG_ERROR, "Memory allocation failed for multiple "
-			   "BSSID elements");
-		return eid;
-	}
+	if (!params->mbssid_elem)
+		goto error;
 
 	params->mbssid_elem_offset = os_zalloc(params->mbssid_elem_count *
 					       sizeof(u8 *));
-	if (!params->mbssid_elem_offset) {
-		wpa_printf(MSG_ERROR, "MBSSID: Memory allocation failed for "
-			   "multiple BSSID element offsets");
-		os_free(params->mbssid_elem);
-		params->mbssid_elem = NULL;
-		return eid;
-	}
+	if (!params->mbssid_elem_offset)
+		goto error;
+
+	params->rnr_elem = os_zalloc(params->rnr_elem_len);
+	if (!params->rnr_elem)
+		goto error;
+
+	params->rnr_elem_offset = os_zalloc((params->mbssid_elem_count + 1) *
+					    sizeof(u8 *));
+	if (!params->rnr_elem_offset)
+		goto error;
 
 	end = hostapd_eid_mbssid(tx_bss, params->mbssid_elem,
 				 params->mbssid_elem + len,
 				 WLAN_FC_STYPE_BEACON,
 				 params->mbssid_elem_count,
-				 params->mbssid_elem_offset, NULL, 0);
+				 params->mbssid_elem_offset, NULL, 0,
+				 params->rnr_elem, params->rnr_elem_offset,
+				 &params->rnr_elem_count, params->rnr_elem_len);
 	params->mbssid_elem_len = end - params->mbssid_elem;
 
         if (hapd->iconf->ema) {
@@ -540,6 +543,19 @@ static u8 * hostapd_set_mbssid_beacon(st
                 *eid++ = params->mbssid_elem_count;
         }
 	return eid;
+
+error:
+	os_free(params->mbssid_elem);
+	params->mbssid_elem = NULL;
+	os_free(params->mbssid_elem_offset);
+	params->mbssid_elem_offset = NULL;
+	os_free(params->rnr_elem);
+	params->rnr_elem = NULL;
+	os_free(params->rnr_elem_offset);
+	params->rnr_elem_offset = NULL;
+	wpa_printf(MSG_ERROR,
+		   "Memory allocation failed for multiple BSSID elements");
+	return eid;
 }
 
 
@@ -624,7 +640,7 @@ static u8 * hostapd_gen_probe_resp(struc
 #endif /* CONFIG_IEEE80211AX */
 
 	buflen += hostapd_eid_mbssid_len(hapd_probed, WLAN_FC_STYPE_PROBE_RESP,
-					 NULL, known_bss, known_bss_len);
+					 NULL, known_bss, known_bss_len, NULL);
 	buflen += hostapd_eid_rnr_len(hapd, WLAN_FC_STYPE_PROBE_RESP);
 	buflen += hostapd_mbo_ie_len(hapd);
 	buflen += hostapd_eid_owe_trans_len(hapd);
@@ -706,7 +722,7 @@ static u8 * hostapd_gen_probe_resp(struc
 	pos = hostapd_eid_ht_operation(hapd, pos);
 	pos = hostapd_eid_mbssid(hapd_probed, pos, epos,
 				 WLAN_FC_STYPE_PROBE_RESP, 0, NULL,
-				 known_bss, known_bss_len);
+				 known_bss, known_bss_len, NULL, NULL, NULL, 0);
 
 	ext_cap_pos = pos;
 	pos = hostapd_eid_ext_capab(hapd, pos);
@@ -2002,6 +2018,10 @@ void ieee802_11_free_ap_params(struct wp
 	params->mbssid_elem = NULL;
 	os_free(params->mbssid_elem_offset);
 	params->mbssid_elem_offset = NULL;
+	os_free(params->rnr_elem);
+	params->rnr_elem = NULL;
+	os_free(params->rnr_elem_offset);
+	params->rnr_elem_offset = NULL;
 #ifdef CONFIG_FILS
 	os_free(params->fd_frame_tmpl);
 	params->fd_frame_tmpl = NULL;
--- a/src/ap/ieee802_11.c
+++ b/src/ap/ieee802_11.c
@@ -7336,9 +7336,12 @@ static size_t hostapd_eid_nr_db_len(stru
 }
 
 
+const int ema_not_applicable = -1;
 static size_t hostapd_eid_rnr_iface_len(struct hostapd_data *hapd,
 					struct hostapd_data *reporting_hapd,
-					size_t *current_len)
+					size_t *current_len,
+					int ema_bss_index_1,
+					int ema_bss_index_2)
 {
 	size_t total_len = 0, len = *current_len;
 	int tbtt_count = 0;
@@ -7364,6 +7367,10 @@ static size_t hostapd_eid_rnr_iface_len(
 			    bss->conf->ignore_broadcast_ssid)
 				continue;
 
+			if ((ema_bss_index_1 != -1) && (ema_bss_index_2 != -1) &&
+			    (i >= ema_bss_index_1) && (i < ema_bss_index_2))
+				continue;
+
 			if (len + RNR_TBTT_INFO_LEN > 255 ||
 			    tbtt_count >= RNR_TBTT_INFO_COUNT_MAX)
 				break;
@@ -7442,7 +7449,9 @@ static size_t hostapd_eid_rnr_colocation
 			continue;
 
 		len += hostapd_eid_rnr_iface_len(iface->bss[0], hapd,
-						 current_len);
+						 current_len,
+						 ema_not_applicable,
+						 ema_not_applicable);
 	}
 
 	return len;
@@ -7465,15 +7474,20 @@ size_t hostapd_eid_rnr_len(struct hostap
 			total_len += hostapd_eid_rnr_colocation_len(
 				hapd, &current_len);
 
-		if (hapd->conf->rnr && hapd->iface->num_bss > 1)
+		if (hapd->conf->rnr && hapd->iface->num_bss > 1 &&
+		    !hapd->iconf->mbssid)
 			total_len += hostapd_eid_rnr_iface_len(hapd, hapd,
-							       &current_len);
+							       &current_len,
+							       ema_not_applicable,
+							       ema_not_applicable);
 		break;
 
 	case WLAN_FC_STYPE_ACTION:
 		if (hapd->iface->num_bss > 1 && mode == STANDALONE_6GHZ)
 			total_len += hostapd_eid_rnr_iface_len(hapd, hapd,
-							       &current_len);
+							       &current_len,
+							       ema_not_applicable,
+							       ema_not_applicable);
 		break;
 
 	default:
@@ -7541,7 +7555,8 @@ static u8 * hostapd_eid_nr_db(struct hos
 
 static u8 * hostapd_eid_rnr_iface(struct hostapd_data *hapd,
 				  struct hostapd_data *reporting_hapd,
-				  u8 *eid, size_t *current_len)
+				  u8 *eid, size_t *current_len,
+				  int ema_bss_index_1, int ema_bss_index_2)
 {
 	struct hostapd_data *bss;
 	struct hostapd_iface *iface = hapd->iface;
@@ -7586,6 +7601,10 @@ static u8 * hostapd_eid_rnr_iface(struct
 			    bss->conf->ignore_broadcast_ssid)
 				continue;
 
+			if ((ema_bss_index_1 != -1) && (ema_bss_index_2 != -1) &&
+			    (i >= ema_bss_index_1) && (i < ema_bss_index_2))
+				continue;
+
 			if (len + RNR_TBTT_INFO_LEN > 255 ||
 			    tbtt_count >= RNR_TBTT_INFO_COUNT_MAX)
 				break;
@@ -7599,6 +7618,12 @@ static u8 * hostapd_eid_rnr_iface(struct
 			    reporting_hapd->conf->ssid.short_ssid)
 				bss_param |= RNR_BSS_PARAM_SAME_SSID;
 
+			if (hapd->iconf->mbssid) {
+				bss_param |= RNR_BSS_PARAM_MULTIPLE_BSSID;
+				if (bss == hostapd_mbssid_get_tx_bss(hapd))
+					bss_param |= RNR_BSS_PARAM_TRANSMITTED_BSSID;
+			}
+
 			if (is_6ghz_op_class(hapd->iconf->op_class) &&
 			    bss->conf->unsol_bcast_probe_resp_interval)
 				bss_param |=
@@ -7642,7 +7667,8 @@ static u8 * hostapd_eid_rnr_colocation(s
 			continue;
 
 		eid = hostapd_eid_rnr_iface(iface->bss[0], hapd, eid,
-					    current_len);
+					    current_len, ema_not_applicable,
+					    ema_not_applicable);
 	}
 
 	return eid;
@@ -7666,15 +7692,20 @@ u8 * hostapd_eid_rnr(struct hostapd_data
 			eid = hostapd_eid_rnr_colocation(hapd, eid,
 							 &current_len);
 
-		if (hapd->conf->rnr && hapd->iface->num_bss > 1)
+		if (hapd->conf->rnr && hapd->iface->num_bss > 1 &&
+		    !hapd->iconf->mbssid)
 			eid = hostapd_eid_rnr_iface(hapd, hapd, eid,
-						    &current_len);
+						    &current_len,
+						    ema_not_applicable,
+						    ema_not_applicable);
 		break;
 
 	case WLAN_FC_STYPE_ACTION:
 		if (hapd->iface->num_bss > 1 && mode == STANDALONE_6GHZ)
 			eid = hostapd_eid_rnr_iface(hapd, hapd,	eid,
-						    &current_len);
+						    &current_len,
+						    ema_not_applicable,
+						    ema_not_applicable);
 		break;
 
 	default:
@@ -7760,9 +7791,9 @@ mbssid_too_big:
 
 size_t hostapd_eid_mbssid_len(struct hostapd_data *hapd, u32 frame_type,
 			      u8 *elem_count, const u8 *known_bss,
-			      size_t known_bss_len)
+			      size_t known_bss_len, size_t *rnr_len)
 {
-	size_t len = 0, bss_index = 1;
+	size_t len = 0, bss_index = 1, rnr_cur_len = 0, rnr_count;
 
 	if (!hapd->iconf->mbssid || hapd->iface->num_bss <= 1 ||
 	    (frame_type != WLAN_FC_STYPE_BEACON &&
@@ -7779,13 +7810,26 @@ size_t hostapd_eid_mbssid_len(struct hos
 	}
 
 	while (bss_index < hapd->iface->num_bss) {
+		rnr_count = bss_index;
 		len += hostapd_eid_mbssid_elem_len(hapd, frame_type,
 						   &bss_index, known_bss,
 						   known_bss_len);
 
 		if (frame_type == WLAN_FC_STYPE_BEACON)
 			*elem_count += 1;
+		if (hapd->iconf->ema && rnr_len) {
+			rnr_cur_len = 0;
+			(*rnr_len) += hostapd_eid_rnr_iface_len(hapd,
+								hostapd_mbssid_get_tx_bss(hapd),
+								&rnr_cur_len,
+								rnr_count,
+								bss_index);
+		}
 	}
+
+	if (hapd->iconf->ema && rnr_len)
+		(*rnr_len) += hostapd_eid_rnr_len(hapd, frame_type);
+
 	return len;
 }
 
@@ -7910,11 +7954,13 @@ mbssid_too_big:
 
 u8 * hostapd_eid_mbssid(struct hostapd_data *hapd, u8 *eid, u8 *end,
 			u32 frame_type, u8 elem_count, u8 **elem_offset,
-			const u8 *known_bss, size_t known_bss_len)
+			const u8 *known_bss, size_t known_bss_len, u8 *rnr_eid,
+			u8 **rnr_offsets, int *rnr_count, int rnr_len)
 {
-	size_t bss_index = 1;
-	u8 elem_index = 0;
+	size_t bss_index = 1, cur_len = 0;
+	u8 elem_index = 0, *rnr_start_eid = rnr_eid;
 	u8 max_bssid_indicator = hostapd_max_bssid_indicator(hapd);
+	bool add_rnr = false;
 
 	if (!hapd->iconf->mbssid || hapd->iface->num_bss <= 1 ||
 	    (frame_type != WLAN_FC_STYPE_BEACON &&
@@ -7926,7 +7972,12 @@ u8 * hostapd_eid_mbssid(struct hostapd_d
 		return eid;
 	}
 
+	if (hapd->iconf->ema && frame_type == WLAN_FC_STYPE_BEACON && rnr_len)
+		add_rnr = true;
+
 	while (bss_index < hapd->iface->num_bss) {
+		int rnr_start_count = bss_index;
+
 		if (frame_type == WLAN_FC_STYPE_BEACON) {
 			if (elem_index == elem_count) {
 				wpa_printf(MSG_WARNING, "MBSSID: More number of"
@@ -7941,7 +7992,32 @@ u8 * hostapd_eid_mbssid(struct hostapd_d
 					      max_bssid_indicator, &bss_index,
 					      elem_count, known_bss,
 					      known_bss_len);
+
+		if (add_rnr == true) {
+			rnr_offsets[*rnr_count] = rnr_eid;
+			*rnr_count = *rnr_count + 1;
+			cur_len = 0;
+
+			rnr_eid = hostapd_eid_rnr_iface(hapd,
+							hostapd_mbssid_get_tx_bss(hapd),
+							rnr_eid, &cur_len,
+							rnr_start_count,
+							bss_index);
+		}
 	}
+
+	if ((add_rnr == true) && ((rnr_eid - rnr_start_eid) < rnr_len)) {
+		rnr_offsets[*rnr_count] = rnr_eid;
+		*rnr_count = *rnr_count + 1;
+		cur_len = 0;
+
+		if (hapd->conf->rnr)
+			rnr_eid = hostapd_eid_nr_db(hapd, rnr_eid, &cur_len);
+		if (get_colocation_mode(hapd) == COLOCATED_LOWER_BAND)
+			rnr_eid = hostapd_eid_rnr_colocation(hapd, rnr_eid,
+							     &cur_len);
+	}
+
 	return eid;
 }
 
--- a/src/ap/ieee802_11.h
+++ b/src/ap/ieee802_11.h
@@ -132,10 +132,11 @@ u8 * hostapd_eid_bss_max_idle_period(str
 int auth_sae_init_committed(struct hostapd_data *hapd, struct sta_info *sta);
 size_t hostapd_eid_mbssid_len(struct hostapd_data *hapd, u32 frame_type,
 			      u8 *elem_count, const u8 *known_bss,
-			      size_t known_bss_len);
+			      size_t known_bss_len, size_t *rnr_len);
 u8 * hostapd_eid_mbssid(struct hostapd_data *hapd, u8 *eid, u8 *end,
 			u32 frame_type, u8 elem_count, u8 **elem_offset,
-			const u8 *known_bss, size_t known_bss_len);
+			const u8 *known_bss, size_t known_bss_len, u8 *rnr_eid,
+			u8 **rnr_offsets, int *rnr_count, int rnr_len);
 #ifdef CONFIG_SAE
 void sae_clear_retransmit_timer(struct hostapd_data *hapd,
 				struct sta_info *sta);
--- a/src/drivers/driver.h
+++ b/src/drivers/driver.h
@@ -1669,6 +1669,27 @@ struct wpa_driver_ap_params {
 	 */
 	u8 ema;
 
+	/**
+	 * rnr_elem - This buffer contains all of reduced neighbor report (RNR)
+	 * elements
+	 */
+	u8 *rnr_elem;
+
+	/**
+	 * rnr_elem_len - Length of rnr_elem buffer
+	 */
+	size_t rnr_elem_len;
+
+	/**
+	 * rnr_elem_count - Number of RNR elements
+	 */
+	int rnr_elem_count;
+
+	/**
+	 * rnr_elem_offset - The offsets to the elements in rnr_elem.
+	 * Kernel will use these to include RNR elements in EMA beacons.
+	 */
+	u8 **rnr_elem_offset;
 };
 
 struct wpa_driver_mesh_bss_params {
@@ -2340,6 +2361,7 @@ struct wpa_bss_params {
 	int wpa_key_mgmt;
 	int rsn_preauth;
 	enum mfp_options ieee80211w;
+
 };
 
 #define WPA_STA_AUTHORIZED BIT(0)
