From 897902953cd02174e49ea796307bb0b74526e84d Mon Sep 17 00:00:00 2001
From: John Crispin <john@phrozen.org>
Date: Thu, 15 Oct 2020 21:35:08 -0700
Subject: [PATCH] multiple_bssid: add support

Add support for multiple bssid. In order to be able to do EMA HW
offloading inside the kernel, we need to send the multiple bssid elemets
inside a dedicated nl80211 arreibute.

Signed-off-by: Aloka Dixit <alokad@codeaurora.org>
Signed-off-by: John Crispin <john@phrozen.org>
---
 hostapd/config_file.c        |  4 ++--
 hostapd/ctrl_iface.c         |  3 +++
 src/ap/ap_config.c           |  2 +-
 src/ap/ap_config.h           |  2 +-
 src/ap/beacon.c              |  5 ++++-
 src/ap/ieee802_11.c          | 17 ++++++++++++++---
 src/ap/ieee802_11_shared.c   |  4 ++--
 src/common/ieee802_11_defs.h |  1 +
 src/drivers/driver.h         |  9 +++++++--
 src/drivers/driver_nl80211.c | 21 ++++++++++-----------
 src/drivers/nl80211_copy.h   | 12 ++++--------
 11 files changed, 49 insertions(+), 31 deletions(-)

diff --git a/hostapd/config_file.c b/hostapd/config_file.c
index 6e40f23c6402..eac599bac95a 100644
--- a/hostapd/config_file.c
+++ b/hostapd/config_file.c
@@ -4540,8 +4540,8 @@ static int hostapd_config_fill(struct hostapd_config *conf,
 #endif /* CONFIG_MACSEC */
 	} else if (os_strcmp(buf, "multiple_bssid") == 0) {
 		conf->multiple_bssid = atoi(pos);
-	} else if (os_strcmp(buf, "ema") == 0) {
-		conf->ema = atoi(pos);
+	} else if (os_strcmp(buf, "ema_beacon") == 0) {
+		conf->ema_beacon = atoi(pos);
 	} else if (os_strcmp(buf, "rnr_beacon") == 0) {
 		bss->rnr_beacon = atoi(pos);
 	} else {
diff --git a/hostapd/ctrl_iface.c b/hostapd/ctrl_iface.c
index a2cad3beecd1..1bccaa8f0e1e 100644
--- a/hostapd/ctrl_iface.c
+++ b/hostapd/ctrl_iface.c
@@ -2704,6 +2704,9 @@ static int hostapd_ctrl_iface_chan_switch(struct hostapd_iface *iface,
 			 * submitting multi-BSS CSA requests? */
 			return ret;
 		}
+
+		if (iface->bss[i]->iconf->multiple_bssid)
+			break;
 	}
 
 	return 0;
diff --git a/src/ap/ap_config.c b/src/ap/ap_config.c
index 0fa52437f6ac..25f29131f699 100644
--- a/src/ap/ap_config.c
+++ b/src/ap/ap_config.c
@@ -1422,7 +1422,7 @@ int hostapd_config_check(struct hostapd_config *conf, int full_config)
 			return -1;
 	}
 
-	if (conf->ema && !conf->multiple_bssid) {
+	if (conf->ema_beacon && !conf->multiple_bssid) {
 		wpa_printf(MSG_ERROR,
 			   "Cannot enable ema without enabling multiple_bssid");
 		return -1;
diff --git a/src/ap/ap_config.h b/src/ap/ap_config.h
index 54b9e90be661..a4695c8c2bbb 100644
--- a/src/ap/ap_config.h
+++ b/src/ap/ap_config.h
@@ -1002,7 +1002,7 @@ struct hostapd_config {
 	u8 ht40_plus_minus_allowed;
 
 	u8 multiple_bssid;
-	u8 ema;
+	u8 ema_beacon;
 
 	/* Use driver-generated interface addresses when adding multiple BSSs */
 	u8 use_driver_iface_addr;
diff --git a/src/ap/beacon.c b/src/ap/beacon.c
index 27af7f4b387e..6945e27021b8 100644
--- a/src/ap/beacon.c
+++ b/src/ap/beacon.c
@@ -1817,6 +1817,9 @@ int ieee802_11_build_ap_params(struct hostapd_data *hapd,
 
 		params->multiple_bssid_index = hostapd_get_bss_index(hapd);
 		params->multiple_bssid_count = hapd->iface->num_bss;
+		params->ema_beacon = hapd->iconf->ema_beacon;
+		if (hapd != hapd->iface->bss[0])
+			params->multiple_bssid_parent = hapd->iface->bss[0]->conf->iface;
 		params->multiple_bssid_ies = os_zalloc(len);
 		if (params->multiple_bssid_ies == NULL)
 			return -1;
@@ -1826,7 +1829,7 @@ int ieee802_11_build_ap_params(struct hostapd_data *hapd,
 						 1, params->multiple_bssid_ie_offsets,
 						 &params->multiple_bssid_ie_count,
 						 MULTIPLE_BSSID_IE_MAX,
-						 hapd->iconf->ema);
+						 hapd->iconf->ema_beacon);
 		params->multiple_bssid_ie_len = end - params->multiple_bssid_ies;
 		if ((params->multiple_bssid_ie_count <= 1) &&
 		    (ext_cap_len >= 13) && (ext_cap_pos[12] & 0x08))
diff --git a/src/ap/ieee802_11.c b/src/ap/ieee802_11.c
index 81f58182f5bd..e8e84b57100e 100644
--- a/src/ap/ieee802_11.c
+++ b/src/ap/ieee802_11.c
@@ -5831,7 +5831,7 @@ static u8 * hostapd_eid_multiple_bssid_chunk(struct hostapd_data *hapd,
 	for (i = *count; i < hapd->iface->num_bss; i++) {
 		bss = hapd->iface->bss[i];
 		conf = bss->conf;
-		u8 *bss_size_offset, *index_size_offset, *pos = eid;
+		u8 *bss_size_offset, *index_size_offset, *pos = eid, *rsn;
 		u16 capab_info;
 
 		*eid++ = WLAN_EID_SUBELEMENT_NONTRANSMITTED_BSSID_PROFILE;
@@ -5866,8 +5866,19 @@ static u8 * hostapd_eid_multiple_bssid_chunk(struct hostapd_data *hapd,
 		}
 		*index_size_offset = (eid - index_size_offset) - 1;
 
-		eid = hostapd_get_rsne(bss, eid, end - eid);
-		eid = hostapd_get_rsnxe(bss, eid, end - eid);
+		rsn = hostapd_get_rsne(bss, eid, end - eid);
+		if (rsn == eid) {
+			/* add RSN non-inheritance IE */
+			*eid++ = WLAN_EID_EXTENSION;
+			*eid++ = 3;
+			*eid++ = WLAN_EID_EXT_NON_INHERITANCE;
+			*eid++ = 1;
+			*eid++ = WLAN_EID_RSN;
+		} else {
+			eid = rsn;
+			eid = hostapd_get_rsnxe(bss, eid, end - eid);
+		}
+
 		*bss_size_offset = (eid - bss_size_offset) - 1;
 
 		if ((eid - size_offset) - 1 > 255) {
diff --git a/src/ap/ieee802_11_shared.c b/src/ap/ieee802_11_shared.c
index 9517eb1bb965..f7aa175af5a6 100644
--- a/src/ap/ieee802_11_shared.c
+++ b/src/ap/ieee802_11_shared.c
@@ -428,7 +428,7 @@ static void hostapd_ext_capab_byte(struct hostapd_data *hapd, u8 *pos, int idx)
 		}
 #endif /* CONFIG_SAE */
 		/* Bit 83 - EMA AP Support */
-		if (hapd->iconf->ema)
+		if (hapd->iconf->ema_beacon)
                         *pos |= 0x08;
 		if (hapd->conf->beacon_prot)
 			*pos |= 0x10; /* Bit 84 - Beacon Protection Enabled */
@@ -499,7 +499,7 @@ u8 * hostapd_eid_ext_capab(struct hostapd_data *hapd, u8 *eid)
 	    hostapd_sae_pw_id_in_use(hapd->conf))
 		len = 11;
 #endif /* CONFIG_SAE */
-	if (len < 11 && (hapd->conf->beacon_prot || hapd->iconf->ema))
+	if (len < 11 && (hapd->conf->beacon_prot || hapd->iconf->ema_beacon))
 		len = 11;
 #ifdef CONFIG_SAE_PK
 	if (len < 12 && hapd->conf->wpa &&
diff --git a/src/common/ieee802_11_defs.h b/src/common/ieee802_11_defs.h
index 21ef86bd1dff..59b48eb7d2bd 100644
--- a/src/common/ieee802_11_defs.h
+++ b/src/common/ieee802_11_defs.h
@@ -477,6 +477,7 @@
 #define WLAN_EID_EXT_SPATIAL_REUSE 39
 #define WLAN_EID_EXT_COLOR_CHANGE_ANNOUNCEMENT 42
 #define WLAN_EID_EXT_OCV_OCI 54
+#define WLAN_EID_EXT_NON_INHERITANCE 56
 #define WLAN_EID_EXT_SHORT_SSID_LIST 58
 #define WLAN_EID_EXT_HE_6GHZ_BAND_CAP 59
 #define WLAN_EID_EXT_EDMG_CAPABILITIES 61
diff --git a/src/drivers/driver.h b/src/drivers/driver.h
index 5257fcdb3787..fc7ceaf01416 100644
--- a/src/drivers/driver.h
+++ b/src/drivers/driver.h
@@ -1580,9 +1580,9 @@ struct wpa_driver_ap_params {
 	size_t unsol_bcast_probe_resp_tmpl_len;
 
 	/**
-	 * multiple_bssid_non_transmitted - Is this a non transmitted BSS
+	 * multiple_bssid_parent - The transmitting iface
 	 */
-	int multiple_bssid_non_transmitted;
+	const char *multiple_bssid_parent;
 
 	/**
 	 * multiple_bssid_index - The index of this BSS in the group
@@ -1614,6 +1614,11 @@ struct wpa_driver_ap_params {
 	 */
 	int multiple_bssid_ie_count;
 
+	/**
+	 * ema_beacon - should the multiple_bssid beacons be sent out in EMA mode
+	 */
+	int ema_beacon;
+
 	/**
 	 * Management frame protection
 	 */
diff --git a/src/drivers/driver_nl80211.c b/src/drivers/driver_nl80211.c
index 4a91fc813957..2171a9b5a316 100644
--- a/src/drivers/driver_nl80211.c
+++ b/src/drivers/driver_nl80211.c
@@ -4798,6 +4798,16 @@ static int wpa_driver_nl80211_set_ap(void *priv,
 			   params->multiple_bssid_index);
 		nla_put_u8(msg, NL80211_ATTR_MULTIPLE_BSSID_COUNT,
 			   params->multiple_bssid_count);
+		if (params->ema_beacon)
+			nla_put_flag(msg, NL80211_ATTR_MULTIPLE_BSSID_EMA);
+	}
+
+	if (params->multiple_bssid_parent) {
+		int ifidx = if_nametoindex(params->multiple_bssid_parent);
+		if (ifidx <= 0)
+			goto fail;
+		nla_put_u32(msg, NL80211_ATTR_MULTIPLE_BSSID_PARENT,
+			    ifidx);
 	}
 
 	if (params->multiple_bssid_ie_len) {
@@ -5453,17 +5463,6 @@ static int nl80211_create_iface_once(struct wpa_driver_nl80211_data *drv,
 			goto fail;
 	}
 
-	if (multiple_bssid_non_transmitted) {
-		if (!multiple_bssid_parent)
-			goto fail;
-		ifidx = if_nametoindex(multiple_bssid_parent);
-		if (ifidx <= 0)
-			goto fail;
-		nla_put_flag(msg, NL80211_ATTR_MULTIPLE_BSSID_NON_TRANSMITTING);
-		nla_put_u32(msg, NL80211_ATTR_MULTIPLE_BSSID_PARENT,
-			    ifidx);
-	}
-
 	/*
 	 * Tell cfg80211 that the interface belongs to the socket that created
 	 * it, and the interface should be deleted when the socket is closed.
diff --git a/src/drivers/nl80211_copy.h b/src/drivers/nl80211_copy.h
index 1d92197e21cf..3709808fce70 100644
--- a/src/drivers/nl80211_copy.h
+++ b/src/drivers/nl80211_copy.h
@@ -2546,9 +2546,6 @@ enum nl80211_commands {
  * @NL80211_ATTR_HE_MUEDCA_PARAMS: MU-EDCA AC parameters for the
  *	NL80211_CMD_UPDATE_HE_MUEDCA_PARAMS command.
  *
- * @NL80211_ATTR_MULTIPLE_BSSID_NON_TRANSMITTING: Set the Non-Transmitted flag for this
- *	BSSIDs beacon.
- *
  * @NL80211_ATTR_MULTIPLE_BSSID_PARENT: If this is a Non-Transmitted BSSID, define
  *	the parent (transmitting) interface.
  *
@@ -2558,7 +2555,9 @@ enum nl80211_commands {
  * @NL80211_ATTR_MULTIPLE_BSSID_COUNT: The number of BSSs inside the multi bssid element.
  *
  * @NL80211_ATTR_MULTIPLE_BSSID_IES: The Elements that describe our multiple BSS group.
- * these get passed separately as the kernel might need to split them up for EMA VAP.
+ *	these get passed separately as the kernel might need to split them up for EMA VAP.
+ *
+ * @NL80211_ATTR_MULTIPLE_BSSID_EMA: Shall the multiple BSS beacons be sent out in EMA mode. 
  *
  * @NUM_NL80211_ATTR: total number of nl80211_attrs available
  * @NL80211_ATTR_MAX: highest attribute number currently defined
@@ -3051,14 +3050,11 @@ enum nl80211_attrs {
 
 	NL80211_ATTR_HE_MUEDCA_PARAMS,
 
-	NL80211_ATTR_S1G_CAPABILITY,
-	NL80211_ATTR_S1G_CAPABILITY_MASK,
-
-	NL80211_ATTR_MULTIPLE_BSSID_NON_TRANSMITTING,
 	NL80211_ATTR_MULTIPLE_BSSID_PARENT,
 	NL80211_ATTR_MULTIPLE_BSSID_INDEX,
 	NL80211_ATTR_MULTIPLE_BSSID_COUNT,
 	NL80211_ATTR_MULTIPLE_BSSID_IES,
+	NL80211_ATTR_MULTIPLE_BSSID_EMA,
 
 	NL80211_ATTR_OBSS_COLOR_BITMAP,
 
-- 
2.25.0

