--- a/src/ap/beacon.c
+++ b/src/ap/beacon.c
@@ -563,7 +563,6 @@ static u8 * hostapd_gen_probe_resp(struc
 	    !is_6ghz_op_class(hapd->iconf->op_class)) {
 		pos = hostapd_eid_vht_capabilities(hapd, pos, 0);
 		pos = hostapd_eid_vht_operation(hapd, pos);
-		pos = hostapd_eid_txpower_envelope(hapd, pos);
 	}
 #endif /* CONFIG_IEEE80211AC */
 
@@ -571,6 +570,7 @@ static u8 * hostapd_gen_probe_resp(struc
 	    hapd->iconf->ieee80211ax)
 		pos = hostapd_eid_wb_chsw_wrapper(hapd, pos);
 
+	pos = hostapd_eid_txpower_envelope(hapd, pos);
 	pos = hostapd_eid_fils_indic(hapd, pos, 0);
 	pos = hostapd_get_rsnxe(hapd, pos, epos - pos);
 
@@ -1577,7 +1577,6 @@ int ieee802_11_build_ap_params(struct ho
 	if (hapd->iconf->ieee80211ac && !hapd->conf->disable_11ac) {
 		tailpos = hostapd_eid_vht_capabilities(hapd, tailpos, 0);
 		tailpos = hostapd_eid_vht_operation(hapd, tailpos);
-		tailpos = hostapd_eid_txpower_envelope(hapd, tailpos);
 	}
 #endif /* CONFIG_IEEE80211AC */
 
@@ -1585,6 +1584,7 @@ int ieee802_11_build_ap_params(struct ho
 	     hapd->iconf->ieee80211ax)
 		tailpos = hostapd_eid_wb_chsw_wrapper(hapd, tailpos);
 
+	tailpos = hostapd_eid_txpower_envelope(hapd, tailpos);
 	tailpos = hostapd_eid_fils_indic(hapd, tailpos, 0);
 	tailpos = hostapd_get_rsnxe(hapd, tailpos, tailend - tailpos);
 
--- a/src/ap/ieee802_11_vht.c
+++ b/src/ap/ieee802_11_vht.c
@@ -177,8 +177,10 @@ u8 * hostapd_eid_txpower_envelope(struct
 	u8 channel, tx_pwr_count, local_pwr_constraint;
 	int max_tx_power;
 	u8 tx_pwr;
+	u8 oper_chwidth;
 
-	if (!mode)
+	if (!mode || (!(hapd->iconf->ieee80211ac && !hapd->conf->disable_11ac) &&
+            !hapd->iconf->ieee80211ax))
 		return eid;
 
 	if (ieee80211_freq_to_chan(iface->freq, &channel) == NUM_HOSTAPD_MODES)
@@ -191,7 +193,12 @@ u8 * hostapd_eid_txpower_envelope(struct
 	if (i == mode->num_channels)
 		return eid;
 
-	switch (iface->conf->vht_oper_chwidth) {
+	if (is_6ghz_op_class(iconf->op_class))
+		oper_chwidth = iface->conf->he_oper_chwidth;
+	else
+		oper_chwidth = iface->conf->vht_oper_chwidth;
+
+	switch (oper_chwidth) {
 	case CHANWIDTH_USE_HT:
 		if (iconf->secondary_channel == 0) {
 			/* Max Transmit Power count = 0 (20 MHz) */
