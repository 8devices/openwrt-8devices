/*
 * Copyright (c) 2022 Qualcomm Innovation Center, Inc. All rights reserved.
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <fal/fal_init.h>

/*
 * PPE exception type.
 */
#define PPE_DRV_EXCEPTION_FLOW_TYPE_L2_ONLY		0x1
#define PPE_DRV_EXCEPTION_FLOW_TYPE_L3_ONLY		0x2
#define PPE_DRV_EXCEPTION_FLOW_TYPE_L2_FLOW		0x4
#define PPE_DRV_EXCEPTION_FLOW_TYPE_L3_FLOW		0x8
#define PPE_DRV_EXCEPTION_FLOW_TYPE_MULTICAST		0x10
#define PPE_DRV_EXCEPTION_FLOW_TYPE_L2_FLOW_HIT		0x20
#define PPE_DRV_EXCEPTION_FLOW_TYPE_L3_FLOW_HIT		0x40
#define PPE_DRV_EXCEPTION_FLOW_TYPE_L2_FLOW_MISS	0x80
#define PPE_DRV_EXCEPTION_FLOW_TYPE_L3_FLOW_MISS	0x100

/*
 * Deacceleration action for exception
 */
#define PPE_DRV_EXCEPTION_DEACCEL_DIS		0
#define PPE_DRV_EXCEPTION_DEACCEL_EN		1

/*
 * TCP flag definitions
 */
#define PPE_DRV_TCP_FLAG_FIN 0x01
#define PPE_DRV_TCP_FLAG_SYN 0x02
#define PPE_DRV_TCP_FLAG_RST 0x04
#define PPE_DRV_TCP_FLAG_PSH 0x08
#define PPE_DRV_TCP_FLAG_ACK 0x10
#define PPE_DRV_TCP_FLAG_URG 0x20

/*
 * ppe_drv_exception_code
 *	PPE Exception codes
 */
enum ppe_drv_exception_code {
	PPE_DRV_EXCEPTION_UNKNOWN_L2_PROT,
	PPE_DRV_EXCEPTION_PPPOE_WRONG_VER_TYPE,
	PPE_DRV_EXCEPTION_PPPOE_WRONG_CODE,
	PPE_DRV_EXCEPTION_PPPOE_UNSUPPORTED_PPP_PROT,
	PPE_DRV_EXCEPTION_IPV4_WRONG_VER,
	PPE_DRV_EXCEPTION_IPV4_SMALL_IHL,
	PPE_DRV_EXCEPTION_IPV4_WITH_OPTION,
	PPE_DRV_EXCEPTION_IPV4_HDR_INCOMPLETE,
	PPE_DRV_EXCEPTION_IPV4_BAD_TOTAL_LEN,
	PPE_DRV_EXCEPTION_IPV4_DATA_INCOMPLETE,
	PPE_DRV_EXCEPTION_IPV4_FRAG,
	PPE_DRV_EXCEPTION_IPV4_PING_OF_DEATH,
	PPE_DRV_EXCEPTION_IPV4_SMALL_TTL,
	PPE_DRV_EXCEPTION_IPV4_UNK_IP_PROT,
	PPE_DRV_EXCEPTION_IPV4_CHECKSUM_ERR,
	PPE_DRV_EXCEPTION_IPV4_INV_SIP,
	PPE_DRV_EXCEPTION_IPV4_INV_DIP,
	PPE_DRV_EXCEPTION_IPV4_LAND_ATTACK,
	PPE_DRV_EXCEPTION_IPV4_AH_HDR_INCOMPLETE,
	PPE_DRV_EXCEPTION_IPV4_AH_HDR_CROSS_BORDER,
	PPE_DRV_EXCEPTION_IPV4_ESP_HDR_INCOMPLETE,
	PPE_DRV_EXCEPTION_IPV6_WRONG_VER,
	PPE_DRV_EXCEPTION_IPV6_HDR_INCOMPLETE,
	PPE_DRV_EXCEPTION_IPV6_BAD_PAYLOAD_LEN,
	PPE_DRV_EXCEPTION_IPV6_DATA_INCOMPLETE,
	PPE_DRV_EXCEPTION_IPV6_WITH_EXT_HDR,
	PPE_DRV_EXCEPTION_IPV6_SMALL_HOP_LIMIT,
	PPE_DRV_EXCEPTION_IPV6_INV_SIP,
	PPE_DRV_EXCEPTION_IPV6_INV_DIP,
	PPE_DRV_EXCEPTION_IPV6_LAND_ATTACK,
	PPE_DRV_EXCEPTION_IPV6_FRAG,
	PPE_DRV_EXCEPTION_IPV6_PING_OF_DEATH,
	PPE_DRV_EXCEPTION_IPV6_WITH_MORE_EXT_HDR,
	PPE_DRV_EXCEPTION_IPV6_UNK_LAST_NEXT_HDR,
	PPE_DRV_EXCEPTION_IPV6_MOBILITY_HDR_INCOMPLETE,
	PPE_DRV_EXCEPTION_IPV6_MOBILITY_HDR_CROSS_BORDER,
	PPE_DRV_EXCEPTION_IPV6_AH_HDR_INCOMPLETE,
	PPE_DRV_EXCEPTION_IPV6_AH_HDR_CROSS_BORDER,
	PPE_DRV_EXCEPTION_IPV6_ESP_HDR_INCOMPLETE,
	PPE_DRV_EXCEPTION_IPV6_ESP_HDR_CROSS_BORDER,
	PPE_DRV_EXCEPTION_IPV6_OTHER_EXT_HDR_INCOMPLETE,
	PPE_DRV_EXCEPTION_IPV6_OTHER_EXT_HDR_CROSS_BORDER,
	PPE_DRV_EXCEPTION_TCP_HDR_INCOMPLETE,
	PPE_DRV_EXCEPTION_TCP_HDR_CROSS_BORDER,
	PPE_DRV_EXCEPTION_TCP_SMAE_SP_DP,
	PPE_DRV_EXCEPTION_TCP_SMALL_DATA_OFFSET,
	PPE_DRV_EXCEPTION_TCP_FLAGS_0,
	PPE_DRV_EXCEPTION_TCP_FLAGS_1,
	PPE_DRV_EXCEPTION_TCP_FLAGS_2,
	PPE_DRV_EXCEPTION_TCP_FLAGS_3,
	PPE_DRV_EXCEPTION_TCP_FLAGS_4,
	PPE_DRV_EXCEPTION_TCP_FLAGS_5,
	PPE_DRV_EXCEPTION_TCP_FLAGS_6,
	PPE_DRV_EXCEPTION_TCP_FLAGS_7,
	PPE_DRV_EXCEPTION_TCP_CHECKSUM_ERR,
	PPE_DRV_EXCEPTION_UDP_HDR_INCOMPLETE,
	PPE_DRV_EXCEPTION_UDP_HDR_CROSS_BORDER,
	PPE_DRV_EXCEPTION_UDP_SMAE_SP_DP,
	PPE_DRV_EXCEPTION_UDP_BAD_LEN,
	PPE_DRV_EXCEPTION_UDP_DATA_INCOMPLETE,
	PPE_DRV_EXCEPTION_UDP_CHECKSUM_ERR,
	PPE_DRV_EXCEPTION_UDP_LITE_HDR_INCOMPLETE,
	PPE_DRV_EXCEPTION_UDP_LITE_HDR_CROSS_BORDER,
	PPE_DRV_EXCEPTION_UDP_LITE_SMAE_SP_DP,
	PPE_DRV_EXCEPTION_UDP_LITE_CSM_COV_1_TO_7,
	PPE_DRV_EXCEPTION_UDP_LITE_CSM_COV_TOO_LONG,
	PPE_DRV_EXCEPTION_UDP_LITE_CSM_COV_CROSS_BORDER,
	PPE_DRV_EXCEPTION_UDP_LITE_CHECKSUM_ERR,
	PPE_DRV_EXCEPTION_MAX,
};

/*
 * ppe_drv_exception
 *	ppe per exception configuration.
 */
struct ppe_drv_exception {
	enum ppe_drv_exception_code code;	/* Exception code */
	fal_fwd_cmd_t action;			/* PPE action when exception is encountered */
	uint8_t deaccel_en;			/* Decelerate a flow for a specific exception */
	uint8_t flow_type;			/* Flow type - L2, L3, Multicast */
};

/*
 * ppe_drv_exception_tcpflag
 *	ppe tcp flag exception.
 */
struct ppe_drv_exception_tcpflag {
	uint8_t flags;				/* TCP Flag for which exception is configured */
};

void ppe_drv_exception_init(void);
